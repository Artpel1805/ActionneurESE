
ActionneurESE_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed4  08006ed4  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006edc  08006edc  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08006ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  08006fec  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08006fec  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a5f  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1c  00000000  00000000  00034b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  000375b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a52  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150ba  00000000  00000000  00061172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4aa  00000000  00000000  0007622c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001736d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051dc  00000000  00000000  00173728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006c80 	.word	0x08006c80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	08006c80 	.word	0x08006c80

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a32      	ldr	r2, [pc, #200]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2108      	movs	r1, #8
 8000656:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_GPIO_Init+0xe8>)
 8000658:	f001 f8ea 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2120      	movs	r1, #32
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 f8e4 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4817      	ldr	r0, [pc, #92]	; (80006dc <MX_GPIO_Init+0xe8>)
 8000680:	f000 ff54 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000684:	2308      	movs	r3, #8
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	4810      	ldr	r0, [pc, #64]	; (80006dc <MX_GPIO_Init+0xe8>)
 800069c:	f000 ff46 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006a0:	2320      	movs	r3, #32
 80006a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f000 ff37 	bl	800152c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2028      	movs	r0, #40	; 0x28
 80006c4:	f000 fe3d 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c8:	2028      	movs	r0, #40	; 0x28
 80006ca:	f000 fe54 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000800 	.word	0x48000800

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09e      	sub	sp, #120	; 0x78
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fcba 	bl	8001066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f933 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f7ff ff7d 	bl	80005f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006fa:	f000 fae1 	bl	8000cc0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 fbdd 	bl	8000ebc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2224      	movs	r2, #36	; 0x24
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f005 fa5b 	bl	8005bc4 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800070e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000712:	2240      	movs	r2, #64	; 0x40
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 fa54 	bl	8005bc4 <memset>
 800071c:	4b7a      	ldr	r3, [pc, #488]	; (8000908 <main+0x228>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000722:	2240      	movs	r2, #64	; 0x40
 8000724:	2100      	movs	r1, #0
 8000726:	4879      	ldr	r0, [pc, #484]	; (800090c <main+0x22c>)
 8000728:	f005 fa4c 	bl	8005bc4 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800072c:	2201      	movs	r2, #1
 800072e:	4976      	ldr	r1, [pc, #472]	; (8000908 <main+0x228>)
 8000730:	4877      	ldr	r0, [pc, #476]	; (8000910 <main+0x230>)
 8000732:	f003 fa8d 	bl	8003c50 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000736:	200a      	movs	r0, #10
 8000738:	f000 fd06 	bl	8001148 <HAL_Delay>

  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	2266      	movs	r2, #102	; 0x66
 8000742:	4974      	ldr	r1, [pc, #464]	; (8000914 <main+0x234>)
 8000744:	4872      	ldr	r0, [pc, #456]	; (8000910 <main+0x230>)
 8000746:	f003 f9ed 	bl	8003b24 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	2218      	movs	r2, #24
 8000750:	4971      	ldr	r1, [pc, #452]	; (8000918 <main+0x238>)
 8000752:	486f      	ldr	r0, [pc, #444]	; (8000910 <main+0x230>)
 8000754:	f003 f9e6 	bl	8003b24 <HAL_UART_Transmit>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000758:	2100      	movs	r1, #0
 800075a:	4870      	ldr	r0, [pc, #448]	; (800091c <main+0x23c>)
 800075c:	f002 f932 	bl	80029c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000760:	2100      	movs	r1, #0
 8000762:	486e      	ldr	r0, [pc, #440]	; (800091c <main+0x23c>)
 8000764:	f002 ff4c 	bl	8003600 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000768:	2104      	movs	r1, #4
 800076a:	486c      	ldr	r0, [pc, #432]	; (800091c <main+0x23c>)
 800076c:	f002 f92a 	bl	80029c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000770:	2104      	movs	r1, #4
 8000772:	486a      	ldr	r0, [pc, #424]	; (800091c <main+0x23c>)
 8000774:	f002 ff44 	bl	8003600 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // uartRxReceived is set to 1 when a new character is received on uart 1
	  	  	  if(uartRxReceived){
 8000778:	4b69      	ldr	r3, [pc, #420]	; (8000920 <main+0x240>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d056      	beq.n	800082e <main+0x14e>
	  	  		  switch(uartRxBuffer[0]){
 8000780:	4b61      	ldr	r3, [pc, #388]	; (8000908 <main+0x228>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b0d      	cmp	r3, #13
 8000786:	d002      	beq.n	800078e <main+0xae>
 8000788:	2b7f      	cmp	r3, #127	; 0x7f
 800078a:	d02d      	beq.n	80007e8 <main+0x108>
 800078c:	e03c      	b.n	8000808 <main+0x128>
	  	  		  // Nouvelle ligne, instruction à traiter
	  	  		  case ASCII_CR:
	  	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	2203      	movs	r2, #3
 8000794:	4963      	ldr	r1, [pc, #396]	; (8000924 <main+0x244>)
 8000796:	485e      	ldr	r0, [pc, #376]	; (8000910 <main+0x230>)
 8000798:	f003 f9c4 	bl	8003b24 <HAL_UART_Transmit>
	  	  			  cmdBuffer[idx_cmd] = '\0';
 800079c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007a2:	4413      	add	r3, r2
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	  	  			  argc = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	673b      	str	r3, [r7, #112]	; 0x70
	  	  			  token = strtok(cmdBuffer, "=");//
 80007ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b0:	495d      	ldr	r1, [pc, #372]	; (8000928 <main+0x248>)
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 fa0e 	bl	8005bd4 <strtok>
 80007b8:	66f8      	str	r0, [r7, #108]	; 0x6c
	  	  			  while(token!=NULL){
 80007ba:	e00d      	b.n	80007d8 <main+0xf8>
	  	  				  argv[argc++] = token;
 80007bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	673a      	str	r2, [r7, #112]	; 0x70
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	3378      	adds	r3, #120	; 0x78
 80007c6:	443b      	add	r3, r7
 80007c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80007ca:	f843 2c74 	str.w	r2, [r3, #-116]
	  	  				  token = strtok(NULL, " ");
 80007ce:	4957      	ldr	r1, [pc, #348]	; (800092c <main+0x24c>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f005 f9ff 	bl	8005bd4 <strtok>
 80007d6:	66f8      	str	r0, [r7, #108]	; 0x6c
	  	  			  while(token!=NULL){
 80007d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1ee      	bne.n	80007bc <main+0xdc>
	  	  			  }
	  	  			  idx_cmd = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	677b      	str	r3, [r7, #116]	; 0x74
	  	  			  newCmdReady = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	66bb      	str	r3, [r7, #104]	; 0x68
	  	  			  break;
 80007e6:	e01f      	b.n	8000828 <main+0x148>
	  	  		  // Suppression du dernier caractère
	  	  		  case ASCII_DEL:
	  	  			  cmdBuffer[idx_cmd--] = '\0';
 80007e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	677a      	str	r2, [r7, #116]	; 0x74
 80007ee:	3378      	adds	r3, #120	; 0x78
 80007f0:	443b      	add	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	f803 2c50 	strb.w	r2, [r3, #-80]
	  	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	2201      	movs	r2, #1
 80007fe:	4942      	ldr	r1, [pc, #264]	; (8000908 <main+0x228>)
 8000800:	4843      	ldr	r0, [pc, #268]	; (8000910 <main+0x230>)
 8000802:	f003 f98f 	bl	8003b24 <HAL_UART_Transmit>
	  	  			  break;
 8000806:	e00f      	b.n	8000828 <main+0x148>
	  	  	      // Nouveau caractère
	  	  		  default:
	  	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	677a      	str	r2, [r7, #116]	; 0x74
 800080e:	4a3e      	ldr	r2, [pc, #248]	; (8000908 <main+0x228>)
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	3378      	adds	r3, #120	; 0x78
 8000814:	443b      	add	r3, r7
 8000816:	f803 2c50 	strb.w	r2, [r3, #-80]
	  	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	2201      	movs	r2, #1
 8000820:	4939      	ldr	r1, [pc, #228]	; (8000908 <main+0x228>)
 8000822:	483b      	ldr	r0, [pc, #236]	; (8000910 <main+0x230>)
 8000824:	f003 f97e 	bl	8003b24 <HAL_UART_Transmit>
	  	  		  }
	  	  		  uartRxReceived = 0;
 8000828:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <main+0x240>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
	  	  	  }

	  	  	  if(newCmdReady){
 800082e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0a1      	beq.n	8000778 <main+0x98>
	  	  			  }
	  	  			  else{
	  	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
	  	  			  }*/

				  if(strcmp(argv[0],"speed")==0){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	493e      	ldr	r1, [pc, #248]	; (8000930 <main+0x250>)
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fcf1 	bl	8000220 <strcmp>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10e      	bne.n	8000862 <main+0x182>
                      if(strlen(argv[1])==4)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fcf4 	bl	8000234 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	2b04      	cmp	r3, #4
 8000850:	d050      	beq.n	80008f4 <main+0x214>
                      {

                    	  //HAL_UART_Transmit(&huart2, vitesse, sizeof(vitesse), HAL_MAX_DELAY);
                      }
                      else {
                    	  HAL_UART_Transmit(&huart2, vitesseNotFound, sizeof(vitesseNotFound), HAL_MAX_DELAY);                      }
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	2217      	movs	r2, #23
 8000858:	4936      	ldr	r1, [pc, #216]	; (8000934 <main+0x254>)
 800085a:	482d      	ldr	r0, [pc, #180]	; (8000910 <main+0x230>)
 800085c:	f003 f962 	bl	8003b24 <HAL_UART_Transmit>
 8000860:	e048      	b.n	80008f4 <main+0x214>

	  	  		  }
	  	  		  else if(strcmp(argv[0],"start")==0)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4934      	ldr	r1, [pc, #208]	; (8000938 <main+0x258>)
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fcda 	bl	8000220 <strcmp>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d109      	bne.n	8000886 <main+0x1a6>
	  	  		  {
	  	  			start_module();
 8000872:	f000 f8d9 	bl	8000a28 <start_module>
	  	  			HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	220d      	movs	r2, #13
 800087c:	492f      	ldr	r1, [pc, #188]	; (800093c <main+0x25c>)
 800087e:	4824      	ldr	r0, [pc, #144]	; (8000910 <main+0x230>)
 8000880:	f003 f950 	bl	8003b24 <HAL_UART_Transmit>
 8000884:	e036      	b.n	80008f4 <main+0x214>

	  	  		  }
	  	  		  else if(strcmp(argv[0],"stop")==0)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	492d      	ldr	r1, [pc, #180]	; (8000940 <main+0x260>)
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fcc8 	bl	8000220 <strcmp>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d107      	bne.n	80008a6 <main+0x1c6>
	  	  		  {
	  	  			HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	220e      	movs	r2, #14
 800089c:	4929      	ldr	r1, [pc, #164]	; (8000944 <main+0x264>)
 800089e:	481c      	ldr	r0, [pc, #112]	; (8000910 <main+0x230>)
 80008a0:	f003 f940 	bl	8003b24 <HAL_UART_Transmit>
 80008a4:	e026      	b.n	80008f4 <main+0x214>
	  	  		  }
	  	  		  else if(strcmp(argv[0],"pinout")==0)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4927      	ldr	r1, [pc, #156]	; (8000948 <main+0x268>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fcb8 	bl	8000220 <strcmp>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d107      	bne.n	80008c6 <main+0x1e6>
	  	  		  {
	  	  			HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2227      	movs	r2, #39	; 0x27
 80008bc:	4923      	ldr	r1, [pc, #140]	; (800094c <main+0x26c>)
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <main+0x230>)
 80008c0:	f003 f930 	bl	8003b24 <HAL_UART_Transmit>
 80008c4:	e016      	b.n	80008f4 <main+0x214>
	  	  		  }
	  	  		  else if(strcmp(argv[0],"help")==0)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4921      	ldr	r1, [pc, #132]	; (8000950 <main+0x270>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fca8 	bl	8000220 <strcmp>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d107      	bne.n	80008e6 <main+0x206>
	  	  		  {
	  	  			HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	2221      	movs	r2, #33	; 0x21
 80008dc:	491d      	ldr	r1, [pc, #116]	; (8000954 <main+0x274>)
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <main+0x230>)
 80008e0:	f003 f920 	bl	8003b24 <HAL_UART_Transmit>
 80008e4:	e006      	b.n	80008f4 <main+0x214>
	  	  		  }

	  	  		  else{
	  	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	2214      	movs	r2, #20
 80008ec:	491a      	ldr	r1, [pc, #104]	; (8000958 <main+0x278>)
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <main+0x230>)
 80008f0:	f003 f918 	bl	8003b24 <HAL_UART_Transmit>
	  	  		  }
	  	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	2218      	movs	r2, #24
 80008fa:	4907      	ldr	r1, [pc, #28]	; (8000918 <main+0x238>)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <main+0x230>)
 80008fe:	f003 f911 	bl	8003b24 <HAL_UART_Transmit>
	  	  			  newCmdReady = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	66bb      	str	r3, [r7, #104]	; 0x68
	  	  	  if(uartRxReceived){
 8000906:	e737      	b.n	8000778 <main+0x98>
 8000908:	20000128 	.word	0x20000128
 800090c:	2000012c 	.word	0x2000012c
 8000910:	200001bc 	.word	0x200001bc
 8000914:	20000018 	.word	0x20000018
 8000918:	20000000 	.word	0x20000000
 800091c:	20000170 	.word	0x20000170
 8000920:	20000124 	.word	0x20000124
 8000924:	20000080 	.word	0x20000080
 8000928:	08006c98 	.word	0x08006c98
 800092c:	08006c9c 	.word	0x08006c9c
 8000930:	08006ca0 	.word	0x08006ca0
 8000934:	08006d34 	.word	0x08006d34
 8000938:	08006ca8 	.word	0x08006ca8
 800093c:	08006cc8 	.word	0x08006cc8
 8000940:	08006cb0 	.word	0x08006cb0
 8000944:	08006cd8 	.word	0x08006cd8
 8000948:	08006cb8 	.word	0x08006cb8
 800094c:	08006ce8 	.word	0x08006ce8
 8000950:	08006cc0 	.word	0x08006cc0
 8000954:	08006d10 	.word	0x08006d10
 8000958:	20000084 	.word	0x20000084

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	; 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	2238      	movs	r2, #56	; 0x38
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f005 f92a 	bl	8005bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 ff92 	bl	80018a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	2303      	movs	r3, #3
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000996:	2306      	movs	r3, #6
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800099a:	2355      	movs	r3, #85	; 0x55
 800099c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f82e 	bl	8001a10 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x62>
  {
    Error_Handler();
 80009ba:	f000 f82f 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2303      	movs	r3, #3
 80009c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2104      	movs	r1, #4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fb32 	bl	8002040 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009e2:	f000 f81b 	bl	8000a1c <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	; 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_UART_RxCpltCallback+0x20>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80009fe:	2201      	movs	r2, #1
 8000a00:	4904      	ldr	r1, [pc, #16]	; (8000a14 <HAL_UART_RxCpltCallback+0x24>)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_UART_RxCpltCallback+0x28>)
 8000a04:	f003 f924 	bl	8003c50 <HAL_UART_Receive_IT>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000124 	.word	0x20000124
 8000a14:	20000128 	.word	0x20000128
 8000a18:	200001bc 	.word	0x200001bc

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <start_module>:


#include "power_module.h"
#include "main.h"

void start_module(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2108      	movs	r1, #8
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <start_module+0x24>)
 8000a32:	f000 fefd 	bl	8001830 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f000 fb86 	bl	8001148 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2108      	movs	r1, #8
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <start_module+0x24>)
 8000a42:	f000 fef5 	bl	8001830 <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	48000800 	.word	0x48000800

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6613      	str	r3, [r2, #96]	; 0x60
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a86:	f000 ffb3 	bl	80019f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 fb12 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <USART2_IRQHandler+0x10>)
 8000af2:	f003 f903 	bl	8003cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200001bc 	.word	0x200001bc

08000b00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000b04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b08:	f000 feaa 	bl	8001860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	return 1;
 8000b14:	2301      	movs	r3, #1
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_kill>:

int _kill(int pid, int sig)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b2a:	f005 f821 	bl	8005b70 <__errno>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2216      	movs	r2, #22
 8000b32:	601a      	str	r2, [r3, #0]
	return -1;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_exit>:

void _exit (int status)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ffe7 	bl	8000b20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b52:	e7fe      	b.n	8000b52 <_exit+0x12>

08000b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e00a      	b.n	8000b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b66:	f3af 8000 	nop.w
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf0      	blt.n	8000b66 <_read+0x12>
	}

return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e009      	b.n	8000bb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf1      	blt.n	8000ba0 <_write+0x12>
	}
	return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_close>:

int _close(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bee:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_isatty>:

int _isatty(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return 1;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f004 ff86 	bl	8005b70 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000016c 	.word	0x2000016c
 8000c98:	20000260 	.word	0x20000260

08000c9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b098      	sub	sp, #96	; 0x60
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	615a      	str	r2, [r3, #20]
 8000ce4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2234      	movs	r2, #52	; 0x34
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 ff69 	bl	8005bc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf2:	4b44      	ldr	r3, [pc, #272]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000cf4:	4a44      	ldr	r2, [pc, #272]	; (8000e08 <MX_TIM1_Init+0x148>)
 8000cf6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000cfa:	2209      	movs	r2, #9
 8000cfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000cfe:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d00:	2220      	movs	r2, #32
 8000d02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000d04:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d06:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000d0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1e:	4839      	ldr	r0, [pc, #228]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d20:	f001 fdf8 	bl	8002914 <HAL_TIM_PWM_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f7ff fe77 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4830      	ldr	r0, [pc, #192]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d42:	f002 fd1f 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d4c:	f7ff fe66 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d50:	2360      	movs	r3, #96	; 0x60
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 614;
 8000d54:	f240 2366 	movw	r3, #614	; 0x266
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4823      	ldr	r0, [pc, #140]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d78:	f001 ff36 	bl	8002be8 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d82:	f7ff fe4b 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.Pulse = 410;
 8000d86:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d90:	2204      	movs	r2, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	481b      	ldr	r0, [pc, #108]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000d96:	f001 ff27 	bl	8002be8 <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000da0:	f7ff fe3c 	bl	8000a1c <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8000da4:	4817      	ldr	r0, [pc, #92]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000da6:	f002 fe35 	bl	8003a14 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8000db6:	23d2      	movs	r3, #210	; 0xd2
 8000db8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4807      	ldr	r0, [pc, #28]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000de8:	f002 fd62 	bl	80038b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000df2:	f7ff fe13 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000df6:	4803      	ldr	r0, [pc, #12]	; (8000e04 <MX_TIM1_Init+0x144>)
 8000df8:	f000 f828 	bl	8000e4c <HAL_TIM_MspPostInit>

}
 8000dfc:	bf00      	nop
 8000dfe:	3760      	adds	r7, #96	; 0x60
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000170 	.word	0x20000170
 8000e08:	40012c00 	.word	0x40012c00

08000e0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_TIM_PWM_MspInit+0x38>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10b      	bne.n	8000e36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e28:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40012c00 	.word	0x40012c00
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_TIM_MspPostInit+0x68>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d11d      	bne.n	8000eaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000e86:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000e8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f000 fb41 	bl	800152c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40012c00 	.word	0x40012c00
 8000eb8:	40021000 	.word	0x40021000

08000ebc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ec2:	4a23      	ldr	r2, [pc, #140]	; (8000f50 <MX_USART2_UART_Init+0x94>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f04:	4811      	ldr	r0, [pc, #68]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f06:	f002 fdbd 	bl	8003a84 <HAL_UART_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f10:	f7ff fd84 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f18:	f004 fd5f 	bl	80059da <HAL_UARTEx_SetTxFifoThreshold>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f22:	f7ff fd7b 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f2a:	f004 fd94 	bl	8005a56 <HAL_UARTEx_SetRxFifoThreshold>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f34:	f7ff fd72 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f3a:	f004 fd15 	bl	8005968 <HAL_UARTEx_DisableFifoMode>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f44:	f7ff fd6a 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200001bc 	.word	0x200001bc
 8000f50:	40004400 	.word	0x40004400

08000f54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b09e      	sub	sp, #120	; 0x78
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2254      	movs	r2, #84	; 0x54
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 fe25 	bl	8005bc4 <memset>
  if(uartHandle->Instance==USART2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_UART_MspInit+0xb8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d13e      	bne.n	8001002 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fa71 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f9c:	f7ff fd3e 	bl	8000a1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_UART_MspInit+0xbc>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_UART_MspInit+0xbc>)
 8000fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000faa:	6593      	str	r3, [r2, #88]	; 0x58
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_UART_MspInit+0xbc>)
 8000fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_UART_MspInit+0xbc>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_UART_MspInit+0xbc>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_UART_MspInit+0xbc>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f000 fa9d 	bl	800152c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2026      	movs	r0, #38	; 0x26
 8000ff8:	f000 f9a3 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ffc:	2026      	movs	r0, #38	; 0x26
 8000ffe:	f000 f9ba 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3778      	adds	r7, #120	; 0x78
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40004400 	.word	0x40004400
 8001010:	40021000 	.word	0x40021000

08001014 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800103e:	f7ff fe2d 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f004 fd9b 	bl	8005b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001046:	f7ff fb4b 	bl	80006e0 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001058:	08006ee4 	.word	0x08006ee4
  ldr r2, =_sbss
 800105c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001060:	20000260 	.word	0x20000260

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>

08001066 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f95b 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f80e 	bl	8001098 <HAL_InitTick>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e001      	b.n	800108c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001088:	f7ff fce2 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800108c:	79fb      	ldrb	r3, [r7, #7]

}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_InitTick+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d022      	beq.n	80010f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_InitTick+0x6c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_InitTick+0x68>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f966 	bl	8001392 <HAL_SYSTICK_Config>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10f      	bne.n	80010ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	d809      	bhi.n	80010e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d2:	2200      	movs	r2, #0
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295
 80010da:	f000 f932 	bl	8001342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_InitTick+0x70>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e007      	b.n	80010f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e004      	b.n	80010f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000a0 	.word	0x200000a0
 8001104:	20000098 	.word	0x20000098
 8001108:	2000009c 	.word	0x2000009c

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x1c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x20>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4413      	add	r3, r2
 800111a:	4a03      	ldr	r2, [pc, #12]	; (8001128 <HAL_IncTick+0x1c>)
 800111c:	6013      	str	r3, [r2, #0]
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	2000024c 	.word	0x2000024c
 800112c:	200000a0 	.word	0x200000a0

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000024c 	.word	0x2000024c

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d004      	beq.n	800116c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_Delay+0x40>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116c:	bf00      	nop
 800116e:	f7ff ffdf 	bl	8001130 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	429a      	cmp	r2, r3
 800117c:	d8f7      	bhi.n	800116e <HAL_Delay+0x26>
  {
  }
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000a0 	.word	0x200000a0

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff40 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff33 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa4 	bl	80012e8 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d005      	beq.n	80013ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2204      	movs	r2, #4
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e037      	b.n	800143e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 020e 	bic.w	r2, r2, #14
 80013dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 021f 	and.w	r2, r3, #31
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800141a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001432:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800143c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d00d      	beq.n	8001490 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2204      	movs	r2, #4
 8001478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e047      	b.n	8001520 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 020e 	bic.w	r2, r2, #14
 800149e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	2101      	movs	r1, #1
 80014ce:	fa01 f202 	lsl.w	r2, r1, r2
 80014d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    }
  }
  return status;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800153a:	e15a      	b.n	80017f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 814c 	beq.w	80017ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d005      	beq.n	800156c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001568:	2b02      	cmp	r3, #2
 800156a:	d130      	bne.n	80015ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a2:	2201      	movs	r2, #1
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f003 0201 	and.w	r2, r3, #1
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d017      	beq.n	800160a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2203      	movs	r2, #3
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d123      	bne.n	800165e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	6939      	ldr	r1, [r7, #16]
 800165a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0203 	and.w	r2, r3, #3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80a6 	beq.w	80017ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a0:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <HAL_GPIO_Init+0x2e4>)
 80016a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a4:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <HAL_GPIO_Init+0x2e4>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6613      	str	r3, [r2, #96]	; 0x60
 80016ac:	4b58      	ldr	r3, [pc, #352]	; (8001810 <HAL_GPIO_Init+0x2e4>)
 80016ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b8:	4a56      	ldr	r2, [pc, #344]	; (8001814 <HAL_GPIO_Init+0x2e8>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016e2:	d01f      	beq.n	8001724 <HAL_GPIO_Init+0x1f8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_GPIO_Init+0x2ec>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d019      	beq.n	8001720 <HAL_GPIO_Init+0x1f4>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_GPIO_Init+0x2f0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d013      	beq.n	800171c <HAL_GPIO_Init+0x1f0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <HAL_GPIO_Init+0x2f4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00d      	beq.n	8001718 <HAL_GPIO_Init+0x1ec>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a49      	ldr	r2, [pc, #292]	; (8001824 <HAL_GPIO_Init+0x2f8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_Init+0x1e8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a48      	ldr	r2, [pc, #288]	; (8001828 <HAL_GPIO_Init+0x2fc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_GPIO_Init+0x1e4>
 800170c:	2305      	movs	r3, #5
 800170e:	e00a      	b.n	8001726 <HAL_GPIO_Init+0x1fa>
 8001710:	2306      	movs	r3, #6
 8001712:	e008      	b.n	8001726 <HAL_GPIO_Init+0x1fa>
 8001714:	2304      	movs	r3, #4
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x1fa>
 8001718:	2303      	movs	r3, #3
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x1fa>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x1fa>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x1fa>
 8001724:	2300      	movs	r3, #0
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001736:	4937      	ldr	r1, [pc, #220]	; (8001814 <HAL_GPIO_Init+0x2e8>)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_GPIO_Init+0x300>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001768:	4a30      	ldr	r2, [pc, #192]	; (800182c <HAL_GPIO_Init+0x300>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_GPIO_Init+0x300>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_GPIO_Init+0x300>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_GPIO_Init+0x300>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_GPIO_Init+0x300>)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_GPIO_Init+0x300>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_GPIO_Init+0x300>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f47f ae9d 	bne.w	800153c <HAL_GPIO_Init+0x10>
  }
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	48000400 	.word	0x48000400
 800181c:	48000800 	.word	0x48000800
 8001820:	48000c00 	.word	0x48000c00
 8001824:	48001000 	.word	0x48001000
 8001828:	48001400 	.word	0x48001400
 800182c:	40010400 	.word	0x40010400

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800184c:	e002      	b.n	8001854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d006      	beq.n	8001884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f806 	bl	8001890 <HAL_GPIO_EXTI_Callback>
  }
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40010400 	.word	0x40010400

08001890 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d141      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018b6:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c2:	d131      	bne.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ca:	4a46      	ldr	r2, [pc, #280]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d4:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018dc:	4a41      	ldr	r2, [pc, #260]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2232      	movs	r2, #50	; 0x32
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	4a3f      	ldr	r2, [pc, #252]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018fa:	e002      	b.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3b01      	subs	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190e:	d102      	bne.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f2      	bne.n	80018fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001916:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001922:	d158      	bne.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e057      	b.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001928:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800192e:	4a2d      	ldr	r2, [pc, #180]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001934:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001938:	e04d      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001940:	d141      	bne.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800194a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194e:	d131      	bne.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001956:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001968:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2232      	movs	r2, #50	; 0x32
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	4a1c      	ldr	r2, [pc, #112]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	0c9b      	lsrs	r3, r3, #18
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001986:	e002      	b.n	800198e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3b01      	subs	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199a:	d102      	bne.n	80019a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f2      	bne.n	8001988 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ae:	d112      	bne.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e011      	b.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019c4:	e007      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40007000 	.word	0x40007000
 80019e8:	20000098 	.word	0x20000098
 80019ec:	431bde83 	.word	0x431bde83

080019f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fe:	6093      	str	r3, [r2, #8]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40007000 	.word	0x40007000

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e306      	b.n	8002030 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d075      	beq.n	8001b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2e:	4b97      	ldr	r3, [pc, #604]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a38:	4b94      	ldr	r3, [pc, #592]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	2b0c      	cmp	r3, #12
 8001a46:	d102      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3e>
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d002      	beq.n	8001a54 <HAL_RCC_OscConfig+0x44>
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d10b      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4b8d      	ldr	r3, [pc, #564]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d05b      	beq.n	8001b18 <HAL_RCC_OscConfig+0x108>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d157      	bne.n	8001b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e2e1      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x74>
 8001a76:	4b85      	ldr	r3, [pc, #532]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a84      	ldr	r2, [pc, #528]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e01d      	b.n	8001ac0 <HAL_RCC_OscConfig+0xb0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x98>
 8001a8e:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a7e      	ldr	r2, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7b      	ldr	r2, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0xb0>
 8001aa8:	4b78      	ldr	r3, [pc, #480]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a77      	ldr	r2, [pc, #476]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b75      	ldr	r3, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a74      	ldr	r2, [pc, #464]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb32 	bl	8001130 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fb2e 	bl	8001130 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e2a6      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xc0>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fb1e 	bl	8001130 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fb1a 	bl	8001130 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e292      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b0a:	4b60      	ldr	r3, [pc, #384]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0xe8>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d075      	beq.n	8001c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b26:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b30:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0x136>
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d002      	beq.n	8001b4c <HAL_RCC_OscConfig+0x13c>
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d11f      	bne.n	8001b8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_OscConfig+0x154>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e265      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	4946      	ldr	r1, [pc, #280]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b78:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fa8b 	bl	8001098 <HAL_InitTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d043      	beq.n	8001c10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e251      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d023      	beq.n	8001bdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3c      	ldr	r2, [pc, #240]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fac6 	bl	8001130 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fac2 	bl	8001130 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e23a      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	061b      	lsls	r3, r3, #24
 8001bd4:	492d      	ldr	r1, [pc, #180]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
 8001bda:	e01a      	b.n	8001c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001be2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff faa2 	bl	8001130 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fa9e 	bl	8001130 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e216      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1e0>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d041      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2c:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c36:	f7ff fa7b 	bl	8001130 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fa77 	bl	8001130 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1ef      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ef      	beq.n	8001c3e <HAL_RCC_OscConfig+0x22e>
 8001c5e:	e020      	b.n	8001ca2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x27c>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff fa5e 	bl	8001130 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c76:	e00d      	b.n	8001c94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fa5a 	bl	8001130 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d906      	bls.n	8001c94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1d2      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c94:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ea      	bne.n	8001c78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80a6 	beq.w	8001dfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cb4:	4b84      	ldr	r3, [pc, #528]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2b4>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x2b6>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	4a7e      	ldr	r2, [pc, #504]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd6:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce6:	4b79      	ldr	r3, [pc, #484]	; (8001ecc <HAL_RCC_OscConfig+0x4bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d118      	bne.n	8001d24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf2:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCC_OscConfig+0x4bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a75      	ldr	r2, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x4bc>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fa17 	bl	8001130 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d06:	f7ff fa13 	bl	8001130 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e18b      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d18:	4b6c      	ldr	r3, [pc, #432]	; (8001ecc <HAL_RCC_OscConfig+0x4bc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d108      	bne.n	8001d3e <HAL_RCC_OscConfig+0x32e>
 8001d2c:	4b66      	ldr	r3, [pc, #408]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d32:	4a65      	ldr	r2, [pc, #404]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d3c:	e024      	b.n	8001d88 <HAL_RCC_OscConfig+0x378>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d110      	bne.n	8001d68 <HAL_RCC_OscConfig+0x358>
 8001d46:	4b60      	ldr	r3, [pc, #384]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4c:	4a5e      	ldr	r2, [pc, #376]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d56:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5c:	4a5a      	ldr	r2, [pc, #360]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d66:	e00f      	b.n	8001d88 <HAL_RCC_OscConfig+0x378>
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d016      	beq.n	8001dbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff f9ce 	bl	8001130 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7ff f9ca 	bl	8001130 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e140      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ed      	beq.n	8001d98 <HAL_RCC_OscConfig+0x388>
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f9b7 	bl	8001130 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7ff f9b3 	bl	8001130 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e129      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ddc:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ed      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dea:	7ffb      	ldrb	r3, [r7, #31]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df0:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	4a34      	ldr	r2, [pc, #208]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d03c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e16:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff f986 	bl	8001130 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e28:	f7ff f982 	bl	8001130 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0fa      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ef      	beq.n	8001e28 <HAL_RCC_OscConfig+0x418>
 8001e48:	e01b      	b.n	8001e82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e50:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f969 	bl	8001130 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e62:	f7ff f965 	bl	8001130 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0dd      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ef      	bne.n	8001e62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80d1 	beq.w	800202e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	f000 808b 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d15e      	bne.n	8001f60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff f93f 	bl	8001130 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	e00c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f93b 	bl	8001130 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d905      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0b3      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ec      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001edc:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b56      	ldr	r3, [pc, #344]	; (800203c <HAL_RCC_OscConfig+0x62c>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6a11      	ldr	r1, [r2, #32]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eec:	3a01      	subs	r2, #1
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ef6:	0212      	lsls	r2, r2, #8
 8001ef8:	4311      	orrs	r1, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001efe:	0852      	lsrs	r2, r2, #1
 8001f00:	3a01      	subs	r2, #1
 8001f02:	0552      	lsls	r2, r2, #21
 8001f04:	4311      	orrs	r1, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f0a:	0852      	lsrs	r2, r2, #1
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	0652      	lsls	r2, r2, #25
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f16:	06d2      	lsls	r2, r2, #27
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	4947      	ldr	r1, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f20:	4b45      	ldr	r3, [pc, #276]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a44      	ldr	r2, [pc, #272]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a41      	ldr	r2, [pc, #260]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff f8fa 	bl	8001130 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff f8f6 	bl	8001130 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e06e      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x530>
 8001f5e:	e066      	b.n	800202e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a34      	ldr	r2, [pc, #208]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a31      	ldr	r2, [pc, #196]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f78:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a2e      	ldr	r2, [pc, #184]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001f7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f8d2 	bl	8001130 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff f8ce 	bl	8001130 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e046      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x580>
 8001fae:	e03e      	b.n	800202e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e039      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_OscConfig+0x628>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d12c      	bne.n	800202a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d123      	bne.n	800202a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d11b      	bne.n	800202a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d113      	bne.n	800202a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d109      	bne.n	800202a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	3b01      	subs	r3, #1
 8002024:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	019f800c 	.word	0x019f800c

08002040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e11e      	b.n	8002296 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b91      	ldr	r3, [pc, #580]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b8e      	ldr	r3, [pc, #568]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 020f 	bic.w	r2, r3, #15
 800206e:	498c      	ldr	r1, [pc, #560]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b8a      	ldr	r3, [pc, #552]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e106      	b.n	8002296 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d073      	beq.n	800217c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d129      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209c:	4b81      	ldr	r3, [pc, #516]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0f4      	b.n	8002296 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020ac:	f000 f99e 	bl	80023ec <RCC_GetSysClockFreqFromPLLSource>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4a7c      	ldr	r2, [pc, #496]	; (80022a8 <HAL_RCC_ClockConfig+0x268>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d93f      	bls.n	800213a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020ba:	4b7a      	ldr	r3, [pc, #488]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d033      	beq.n	800213a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d12f      	bne.n	800213a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020da:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e2:	4a70      	ldr	r2, [pc, #448]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80020e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e024      	b.n	800213a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0c6      	b.n	8002296 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002108:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0be      	b.n	8002296 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002118:	f000 f8ce 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 800211c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4a61      	ldr	r2, [pc, #388]	; (80022a8 <HAL_RCC_ClockConfig+0x268>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d909      	bls.n	800213a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002126:	4b5f      	ldr	r3, [pc, #380]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4957      	ldr	r1, [pc, #348]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800214c:	f7fe fff0 	bl	8001130 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe ffec 	bl	8001130 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e095      	b.n	8002296 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002194:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a42      	ldr	r2, [pc, #264]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 800219a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800219e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021ac:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021b4:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80021b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b39      	ldr	r3, [pc, #228]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4936      	ldr	r1, [pc, #216]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b80      	cmp	r3, #128	; 0x80
 80021d4:	d105      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4a32      	ldr	r2, [pc, #200]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d21d      	bcs.n	800222c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 020f 	bic.w	r2, r3, #15
 80021f8:	4929      	ldr	r1, [pc, #164]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002200:	f7fe ff96 	bl	8001130 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe ff92 	bl	8001130 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e03b      	b.n	8002296 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d1ed      	bne.n	8002208 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4917      	ldr	r1, [pc, #92]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490f      	ldr	r1, [pc, #60]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800226a:	f000 f825 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 800226e:	4602      	mov	r2, r0
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCC_ClockConfig+0x264>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	490c      	ldr	r1, [pc, #48]	; (80022ac <HAL_RCC_ClockConfig+0x26c>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	fa22 f303 	lsr.w	r3, r2, r3
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x270>)
 8002288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x274>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe ff02 	bl	8001098 <HAL_InitTick>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	04c4b400 	.word	0x04c4b400
 80022ac:	08006d4c 	.word	0x08006d4c
 80022b0:	20000098 	.word	0x20000098
 80022b4:	2000009c 	.word	0x2000009c

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022be:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d102      	bne.n	80022d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	e047      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e03e      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d136      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3301      	adds	r3, #1
 8002304:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800230c:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <HAL_RCC_GetSysClockFreq+0xc0>)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002316:	68d2      	ldr	r2, [r2, #12]
 8002318:	0a12      	lsrs	r2, r2, #8
 800231a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	617b      	str	r3, [r7, #20]
      break;
 8002324:	e00c      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002330:	68d2      	ldr	r2, [r2, #12]
 8002332:	0a12      	lsrs	r2, r2, #8
 8002334:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002338:	fb02 f303 	mul.w	r3, r2, r3
 800233c:	617b      	str	r3, [r7, #20]
      break;
 800233e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0e5b      	lsrs	r3, r3, #25
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	3301      	adds	r3, #1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e001      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002360:	693b      	ldr	r3, [r7, #16]
}
 8002362:	4618      	mov	r0, r3
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	00f42400 	.word	0x00f42400
 8002378:	016e3600 	.word	0x016e3600

0800237c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_GetHCLKFreq+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000098 	.word	0x20000098

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002398:	f7ff fff0 	bl	800237c <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4904      	ldr	r1, [pc, #16]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08006d5c 	.word	0x08006d5c

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023c4:	f7ff ffda 	bl	800237c <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0adb      	lsrs	r3, r3, #11
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4904      	ldr	r1, [pc, #16]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08006d5c 	.word	0x08006d5c

080023ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d10c      	bne.n	800242a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800241a:	68d2      	ldr	r2, [r2, #12]
 800241c:	0a12      	lsrs	r2, r2, #8
 800241e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
    break;
 8002428:	e00c      	b.n	8002444 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4a0e      	ldr	r2, [pc, #56]	; (800246c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	0a12      	lsrs	r2, r2, #8
 8002438:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    break;
 8002442:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0e5b      	lsrs	r3, r3, #25
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40021000 	.word	0x40021000
 8002470:	016e3600 	.word	0x016e3600
 8002474:	00f42400 	.word	0x00f42400

08002478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002480:	2300      	movs	r3, #0
 8002482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002484:	2300      	movs	r3, #0
 8002486:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8098 	beq.w	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	4a3f      	ldr	r2, [pc, #252]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	6593      	str	r3, [r2, #88]	; 0x58
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a39      	ldr	r2, [pc, #228]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024ce:	f7fe fe2f 	bl	8001130 <HAL_GetTick>
 80024d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d4:	e009      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe fe2b 	bl	8001130 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d902      	bls.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	74fb      	strb	r3, [r7, #19]
        break;
 80024e8:	e005      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ef      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d159      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002506:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d01e      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	d019      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002522:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002534:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fdeb 	bl	8001130 <HAL_GetTick>
 800255a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255c:	e00b      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7fe fde7 	bl	8001130 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d902      	bls.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	74fb      	strb	r3, [r7, #19]
            break;
 8002574:	e006      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ec      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002598:	4903      	ldr	r1, [pc, #12]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025a0:	e008      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	74bb      	strb	r3, [r7, #18]
 80025a6:	e005      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b4:	7c7b      	ldrb	r3, [r7, #17]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4ba7      	ldr	r3, [pc, #668]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4aa6      	ldr	r2, [pc, #664]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d2:	4ba1      	ldr	r3, [pc, #644]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f023 0203 	bic.w	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	499d      	ldr	r1, [pc, #628]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f4:	4b98      	ldr	r3, [pc, #608]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 020c 	bic.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	4995      	ldr	r1, [pc, #596]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002616:	4b90      	ldr	r3, [pc, #576]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	498c      	ldr	r1, [pc, #560]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002638:	4b87      	ldr	r3, [pc, #540]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	4984      	ldr	r1, [pc, #528]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800265a:	4b7f      	ldr	r3, [pc, #508]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	497b      	ldr	r1, [pc, #492]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800267c:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	4973      	ldr	r1, [pc, #460]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800269e:	4b6e      	ldr	r3, [pc, #440]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	496a      	ldr	r1, [pc, #424]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026c0:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4962      	ldr	r1, [pc, #392]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026e2:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	4959      	ldr	r1, [pc, #356]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002704:	4b54      	ldr	r3, [pc, #336]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	4951      	ldr	r1, [pc, #324]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002726:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	4948      	ldr	r1, [pc, #288]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4940      	ldr	r1, [pc, #256]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002766:	d105      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002768:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002772:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	4932      	ldr	r1, [pc, #200]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a0:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a2c      	ldr	r2, [pc, #176]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	4924      	ldr	r1, [pc, #144]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d6:	d105      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d8:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d015      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	4916      	ldr	r1, [pc, #88]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800280e:	d105      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d019      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002846:	d109      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a02      	ldr	r2, [pc, #8]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002852:	60d3      	str	r3, [r2, #12]
 8002854:	e002      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4926      	ldr	r1, [pc, #152]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002886:	d105      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ae:	4918      	ldr	r1, [pc, #96]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	490a      	ldr	r1, [pc, #40]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002904:	7cbb      	ldrb	r3, [r7, #18]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e049      	b.n	80029ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fa66 	bl	8000e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f000 fa5c 	bl	8002e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_TIM_PWM_Start+0x24>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e03c      	b.n	8002a62 <HAL_TIM_PWM_Start+0x9e>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d109      	bne.n	8002a02 <HAL_TIM_PWM_Start+0x3e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	e02f      	b.n	8002a62 <HAL_TIM_PWM_Start+0x9e>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d109      	bne.n	8002a1c <HAL_TIM_PWM_Start+0x58>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e022      	b.n	8002a62 <HAL_TIM_PWM_Start+0x9e>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d109      	bne.n	8002a36 <HAL_TIM_PWM_Start+0x72>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	bf14      	ite	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	2300      	moveq	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	e015      	b.n	8002a62 <HAL_TIM_PWM_Start+0x9e>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d109      	bne.n	8002a50 <HAL_TIM_PWM_Start+0x8c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e008      	b.n	8002a62 <HAL_TIM_PWM_Start+0x9e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0a6      	b.n	8002bb8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_PWM_Start+0xb6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a78:	e023      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xfe>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_PWM_Start+0xc6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a88:	e01b      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xfe>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_PWM_Start+0xd6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a98:	e013      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xfe>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start+0xe6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002aa8:	e00b      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xfe>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0xf6>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab8:	e003      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xfe>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fd72 	bl	80035b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <HAL_TIM_PWM_Start+0x1fc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d018      	beq.n	8002b0c <HAL_TIM_PWM_Start+0x148>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <HAL_TIM_PWM_Start+0x200>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_TIM_PWM_Start+0x148>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_TIM_PWM_Start+0x204>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00e      	beq.n	8002b0c <HAL_TIM_PWM_Start+0x148>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a36      	ldr	r2, [pc, #216]	; (8002bcc <HAL_TIM_PWM_Start+0x208>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d009      	beq.n	8002b0c <HAL_TIM_PWM_Start+0x148>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <HAL_TIM_PWM_Start+0x20c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIM_PWM_Start+0x148>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a33      	ldr	r2, [pc, #204]	; (8002bd4 <HAL_TIM_PWM_Start+0x210>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIM_PWM_Start+0x14c>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_TIM_PWM_Start+0x14e>
 8002b10:	2300      	movs	r3, #0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <HAL_TIM_PWM_Start+0x1fc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x1b2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d01d      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x1b2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_TIM_PWM_Start+0x214>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d018      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x1b2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <HAL_TIM_PWM_Start+0x218>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x1b2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <HAL_TIM_PWM_Start+0x21c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00e      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x1b2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_TIM_PWM_Start+0x200>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x1b2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_TIM_PWM_Start+0x204>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x1b2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_TIM_PWM_Start+0x210>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d115      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_TIM_PWM_Start+0x220>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d015      	beq.n	8002bb4 <HAL_TIM_PWM_Start+0x1f0>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8e:	d011      	beq.n	8002bb4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba0:	e008      	b.n	8002bb4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e000      	b.n	8002bb6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40013400 	.word	0x40013400
 8002bc8:	40014000 	.word	0x40014000
 8002bcc:	40014400 	.word	0x40014400
 8002bd0:	40014800 	.word	0x40014800
 8002bd4:	40015000 	.word	0x40015000
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40000c00 	.word	0x40000c00
 8002be4:	00010007 	.word	0x00010007

08002be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0ff      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b14      	cmp	r3, #20
 8002c12:	f200 80f0 	bhi.w	8002df6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c71 	.word	0x08002c71
 8002c20:	08002df7 	.word	0x08002df7
 8002c24:	08002df7 	.word	0x08002df7
 8002c28:	08002df7 	.word	0x08002df7
 8002c2c:	08002cb1 	.word	0x08002cb1
 8002c30:	08002df7 	.word	0x08002df7
 8002c34:	08002df7 	.word	0x08002df7
 8002c38:	08002df7 	.word	0x08002df7
 8002c3c:	08002cf3 	.word	0x08002cf3
 8002c40:	08002df7 	.word	0x08002df7
 8002c44:	08002df7 	.word	0x08002df7
 8002c48:	08002df7 	.word	0x08002df7
 8002c4c:	08002d33 	.word	0x08002d33
 8002c50:	08002df7 	.word	0x08002df7
 8002c54:	08002df7 	.word	0x08002df7
 8002c58:	08002df7 	.word	0x08002df7
 8002c5c:	08002d75 	.word	0x08002d75
 8002c60:	08002df7 	.word	0x08002df7
 8002c64:	08002df7 	.word	0x08002df7
 8002c68:	08002df7 	.word	0x08002df7
 8002c6c:	08002db5 	.word	0x08002db5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f972 	bl	8002f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0208 	orr.w	r2, r2, #8
 8002c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6999      	ldr	r1, [r3, #24]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	619a      	str	r2, [r3, #24]
      break;
 8002cae:	e0a5      	b.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f9ec 	bl	8003094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	021a      	lsls	r2, r3, #8
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
      break;
 8002cf0:	e084      	b.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fa5f 	bl	80031bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0208 	orr.w	r2, r2, #8
 8002d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0204 	bic.w	r2, r2, #4
 8002d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69d9      	ldr	r1, [r3, #28]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	61da      	str	r2, [r3, #28]
      break;
 8002d30:	e064      	b.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fad1 	bl	80032e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69d9      	ldr	r1, [r3, #28]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	021a      	lsls	r2, r3, #8
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	61da      	str	r2, [r3, #28]
      break;
 8002d72:	e043      	b.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fb44 	bl	8003408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0208 	orr.w	r2, r2, #8
 8002d8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0204 	bic.w	r2, r2, #4
 8002d9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002db2:	e023      	b.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fb8e 	bl	80034dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dde:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	021a      	lsls	r2, r3, #8
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002df4:	e002      	b.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop

08002e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <TIM_Base_SetConfig+0x12c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d017      	beq.n	8002e58 <TIM_Base_SetConfig+0x48>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2e:	d013      	beq.n	8002e58 <TIM_Base_SetConfig+0x48>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a43      	ldr	r2, [pc, #268]	; (8002f40 <TIM_Base_SetConfig+0x130>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00f      	beq.n	8002e58 <TIM_Base_SetConfig+0x48>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a42      	ldr	r2, [pc, #264]	; (8002f44 <TIM_Base_SetConfig+0x134>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <TIM_Base_SetConfig+0x48>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a41      	ldr	r2, [pc, #260]	; (8002f48 <TIM_Base_SetConfig+0x138>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <TIM_Base_SetConfig+0x48>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a40      	ldr	r2, [pc, #256]	; (8002f4c <TIM_Base_SetConfig+0x13c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x48>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3f      	ldr	r2, [pc, #252]	; (8002f50 <TIM_Base_SetConfig+0x140>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a33      	ldr	r2, [pc, #204]	; (8002f3c <TIM_Base_SetConfig+0x12c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d023      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d01f      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <TIM_Base_SetConfig+0x130>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01b      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <TIM_Base_SetConfig+0x134>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d017      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <TIM_Base_SetConfig+0x138>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2d      	ldr	r2, [pc, #180]	; (8002f4c <TIM_Base_SetConfig+0x13c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00f      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <TIM_Base_SetConfig+0x144>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00b      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <TIM_Base_SetConfig+0x148>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <TIM_Base_SetConfig+0x14c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d003      	beq.n	8002eba <TIM_Base_SetConfig+0xaa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <TIM_Base_SetConfig+0x140>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d108      	bne.n	8002ecc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <TIM_Base_SetConfig+0x12c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <TIM_Base_SetConfig+0x110>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <TIM_Base_SetConfig+0x13c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00f      	beq.n	8002f20 <TIM_Base_SetConfig+0x110>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <TIM_Base_SetConfig+0x144>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <TIM_Base_SetConfig+0x110>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <TIM_Base_SetConfig+0x148>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <TIM_Base_SetConfig+0x110>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <TIM_Base_SetConfig+0x14c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_Base_SetConfig+0x110>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <TIM_Base_SetConfig+0x140>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	615a      	str	r2, [r3, #20]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40013400 	.word	0x40013400
 8002f50:	40015000 	.word	0x40015000
 8002f54:	40014000 	.word	0x40014000
 8002f58:	40014400 	.word	0x40014400
 8002f5c:	40014800 	.word	0x40014800

08002f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f023 0201 	bic.w	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 0302 	bic.w	r3, r3, #2
 8002fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a30      	ldr	r2, [pc, #192]	; (800307c <TIM_OC1_SetConfig+0x11c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d013      	beq.n	8002fe8 <TIM_OC1_SetConfig+0x88>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a2f      	ldr	r2, [pc, #188]	; (8003080 <TIM_OC1_SetConfig+0x120>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00f      	beq.n	8002fe8 <TIM_OC1_SetConfig+0x88>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a2e      	ldr	r2, [pc, #184]	; (8003084 <TIM_OC1_SetConfig+0x124>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_OC1_SetConfig+0x88>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <TIM_OC1_SetConfig+0x128>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <TIM_OC1_SetConfig+0x88>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a2c      	ldr	r2, [pc, #176]	; (800308c <TIM_OC1_SetConfig+0x12c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_OC1_SetConfig+0x88>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <TIM_OC1_SetConfig+0x130>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d10c      	bne.n	8003002 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0308 	bic.w	r3, r3, #8
 8002fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f023 0304 	bic.w	r3, r3, #4
 8003000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <TIM_OC1_SetConfig+0x11c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <TIM_OC1_SetConfig+0xd2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <TIM_OC1_SetConfig+0x120>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00f      	beq.n	8003032 <TIM_OC1_SetConfig+0xd2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <TIM_OC1_SetConfig+0x124>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_OC1_SetConfig+0xd2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <TIM_OC1_SetConfig+0x128>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_OC1_SetConfig+0xd2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <TIM_OC1_SetConfig+0x12c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_OC1_SetConfig+0xd2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a18      	ldr	r2, [pc, #96]	; (8003090 <TIM_OC1_SetConfig+0x130>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d111      	bne.n	8003056 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	621a      	str	r2, [r3, #32]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40013400 	.word	0x40013400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800
 8003090:	40015000 	.word	0x40015000

08003094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0210 	bic.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0320 	bic.w	r3, r3, #32
 80030e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <TIM_OC2_SetConfig+0x110>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d007      	beq.n	8003108 <TIM_OC2_SetConfig+0x74>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <TIM_OC2_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_OC2_SetConfig+0x74>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <TIM_OC2_SetConfig+0x118>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d10d      	bne.n	8003124 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIM_OC2_SetConfig+0x110>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <TIM_OC2_SetConfig+0xc0>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a1e      	ldr	r2, [pc, #120]	; (80031a8 <TIM_OC2_SetConfig+0x114>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00f      	beq.n	8003154 <TIM_OC2_SetConfig+0xc0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <TIM_OC2_SetConfig+0x11c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00b      	beq.n	8003154 <TIM_OC2_SetConfig+0xc0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <TIM_OC2_SetConfig+0x120>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <TIM_OC2_SetConfig+0xc0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <TIM_OC2_SetConfig+0x124>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_OC2_SetConfig+0xc0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <TIM_OC2_SetConfig+0x118>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d113      	bne.n	800317c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800315a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40013400 	.word	0x40013400
 80031ac:	40015000 	.word	0x40015000
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800

080031bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <TIM_OC3_SetConfig+0x10c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_OC3_SetConfig+0x72>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <TIM_OC3_SetConfig+0x110>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC3_SetConfig+0x72>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <TIM_OC3_SetConfig+0x114>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10d      	bne.n	800324a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <TIM_OC3_SetConfig+0x10c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <TIM_OC3_SetConfig+0xbe>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <TIM_OC3_SetConfig+0x110>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00f      	beq.n	800327a <TIM_OC3_SetConfig+0xbe>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <TIM_OC3_SetConfig+0x118>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <TIM_OC3_SetConfig+0xbe>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <TIM_OC3_SetConfig+0x11c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <TIM_OC3_SetConfig+0xbe>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <TIM_OC3_SetConfig+0x120>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_OC3_SetConfig+0xbe>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <TIM_OC3_SetConfig+0x114>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d113      	bne.n	80032a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	621a      	str	r2, [r3, #32]
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40013400 	.word	0x40013400
 80032d0:	40015000 	.word	0x40015000
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40014400 	.word	0x40014400
 80032dc:	40014800 	.word	0x40014800

080032e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800332e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	031b      	lsls	r3, r3, #12
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <TIM_OC4_SetConfig+0x110>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <TIM_OC4_SetConfig+0x74>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <TIM_OC4_SetConfig+0x114>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_OC4_SetConfig+0x74>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <TIM_OC4_SetConfig+0x118>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10d      	bne.n	8003370 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800335a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	031b      	lsls	r3, r3, #12
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800336e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <TIM_OC4_SetConfig+0x110>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <TIM_OC4_SetConfig+0xc0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <TIM_OC4_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00f      	beq.n	80033a0 <TIM_OC4_SetConfig+0xc0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <TIM_OC4_SetConfig+0x11c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00b      	beq.n	80033a0 <TIM_OC4_SetConfig+0xc0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <TIM_OC4_SetConfig+0x120>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <TIM_OC4_SetConfig+0xc0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <TIM_OC4_SetConfig+0x124>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_OC4_SetConfig+0xc0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <TIM_OC4_SetConfig+0x118>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d113      	bne.n	80033c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40013400 	.word	0x40013400
 80033f8:	40015000 	.word	0x40015000
 80033fc:	40014000 	.word	0x40014000
 8003400:	40014400 	.word	0x40014400
 8003404:	40014800 	.word	0x40014800

08003408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800344c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <TIM_OC5_SetConfig+0xbc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <TIM_OC5_SetConfig+0x82>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <TIM_OC5_SetConfig+0xc0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00f      	beq.n	800348a <TIM_OC5_SetConfig+0x82>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <TIM_OC5_SetConfig+0xc4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00b      	beq.n	800348a <TIM_OC5_SetConfig+0x82>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <TIM_OC5_SetConfig+0xc8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <TIM_OC5_SetConfig+0x82>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <TIM_OC5_SetConfig+0xcc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d003      	beq.n	800348a <TIM_OC5_SetConfig+0x82>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <TIM_OC5_SetConfig+0xd0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d109      	bne.n	800349e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	621a      	str	r2, [r3, #32]
}
 80034b8:	bf00      	nop
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40013400 	.word	0x40013400
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40014400 	.word	0x40014400
 80034d4:	40014800 	.word	0x40014800
 80034d8:	40015000 	.word	0x40015000

080034dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	051b      	lsls	r3, r3, #20
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <TIM_OC6_SetConfig+0xc0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <TIM_OC6_SetConfig+0x84>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <TIM_OC6_SetConfig+0xc4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00f      	beq.n	8003560 <TIM_OC6_SetConfig+0x84>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <TIM_OC6_SetConfig+0xc8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00b      	beq.n	8003560 <TIM_OC6_SetConfig+0x84>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <TIM_OC6_SetConfig+0xcc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <TIM_OC6_SetConfig+0x84>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a16      	ldr	r2, [pc, #88]	; (80035ac <TIM_OC6_SetConfig+0xd0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC6_SetConfig+0x84>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <TIM_OC6_SetConfig+0xd4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d109      	bne.n	8003574 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	029b      	lsls	r3, r3, #10
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800
 80035b0:	40015000 	.word	0x40015000

080035b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2201      	movs	r2, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	401a      	ands	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_TIMEx_PWMN_Start+0x24>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e022      	b.n	800366a <HAL_TIMEx_PWMN_Start+0x6a>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b04      	cmp	r3, #4
 8003628:	d109      	bne.n	800363e <HAL_TIMEx_PWMN_Start+0x3e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	bf14      	ite	ne
 8003636:	2301      	movne	r3, #1
 8003638:	2300      	moveq	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	e015      	b.n	800366a <HAL_TIMEx_PWMN_Start+0x6a>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d109      	bne.n	8003658 <HAL_TIMEx_PWMN_Start+0x58>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e008      	b.n	800366a <HAL_TIMEx_PWMN_Start+0x6a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e073      	b.n	800375a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d104      	bne.n	8003682 <HAL_TIMEx_PWMN_Start+0x82>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003680:	e013      	b.n	80036aa <HAL_TIMEx_PWMN_Start+0xaa>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d104      	bne.n	8003692 <HAL_TIMEx_PWMN_Start+0x92>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003690:	e00b      	b.n	80036aa <HAL_TIMEx_PWMN_Start+0xaa>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d104      	bne.n	80036a2 <HAL_TIMEx_PWMN_Start+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036a0:	e003      	b.n	80036aa <HAL_TIMEx_PWMN_Start+0xaa>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2204      	movs	r2, #4
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f9c1 	bl	8003a3a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a25      	ldr	r2, [pc, #148]	; (8003764 <HAL_TIMEx_PWMN_Start+0x164>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d022      	beq.n	8003718 <HAL_TIMEx_PWMN_Start+0x118>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d01d      	beq.n	8003718 <HAL_TIMEx_PWMN_Start+0x118>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a21      	ldr	r2, [pc, #132]	; (8003768 <HAL_TIMEx_PWMN_Start+0x168>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d018      	beq.n	8003718 <HAL_TIMEx_PWMN_Start+0x118>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a20      	ldr	r2, [pc, #128]	; (800376c <HAL_TIMEx_PWMN_Start+0x16c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d013      	beq.n	8003718 <HAL_TIMEx_PWMN_Start+0x118>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <HAL_TIMEx_PWMN_Start+0x170>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00e      	beq.n	8003718 <HAL_TIMEx_PWMN_Start+0x118>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_TIMEx_PWMN_Start+0x174>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_TIMEx_PWMN_Start+0x118>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <HAL_TIMEx_PWMN_Start+0x178>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIMEx_PWMN_Start+0x118>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_TIMEx_PWMN_Start+0x17c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d115      	bne.n	8003744 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_TIMEx_PWMN_Start+0x180>)
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d015      	beq.n	8003756 <HAL_TIMEx_PWMN_Start+0x156>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d011      	beq.n	8003756 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	e008      	b.n	8003756 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e000      	b.n	8003758 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40000c00 	.word	0x40000c00
 8003774:	40013400 	.word	0x40013400
 8003778:	40014000 	.word	0x40014000
 800377c:	40015000 	.word	0x40015000
 8003780:	00010007 	.word	0x00010007

08003784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003798:	2302      	movs	r3, #2
 800379a:	e074      	b.n	8003886 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a34      	ldr	r2, [pc, #208]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a33      	ldr	r2, [pc, #204]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a31      	ldr	r2, [pc, #196]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a21      	ldr	r2, [pc, #132]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d022      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d01d      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1f      	ldr	r2, [pc, #124]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d018      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00e      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a15      	ldr	r2, [pc, #84]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a11      	ldr	r2, [pc, #68]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10c      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4313      	orrs	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40013400 	.word	0x40013400
 800389c:	40015000 	.word	0x40015000
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800
 80038a8:	40000c00 	.word	0x40000c00
 80038ac:	40014000 	.word	0x40014000

080038b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e096      	b.n	80039fa <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d106      	bne.n	8003972 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a24      	ldr	r2, [pc, #144]	; (8003a08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d12b      	bne.n	80039e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	051b      	lsls	r3, r3, #20
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d009      	beq.n	80039da <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d004      	beq.n	80039da <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d106      	bne.n	80039e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40013400 	.word	0x40013400
 8003a10:	40015000 	.word	0x40015000

08003a14 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1a      	ldr	r2, [r3, #32]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	621a      	str	r2, [r3, #32]
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e042      	b.n	8003b1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fd fa53 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2224      	movs	r2, #36	; 0x24
 8003ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fc50 	bl	800436c <UART_SetConfig>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e022      	b.n	8003b1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 ff40 	bl	8004964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 ffc7 	bl	8004aa8 <UART_CheckIdleState>
 8003b1a:	4603      	mov	r3, r0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	f040 8083 	bne.w	8003c46 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_UART_Transmit+0x28>
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e07b      	b.n	8003c48 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_UART_Transmit+0x3a>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e074      	b.n	8003c48 <HAL_UART_Transmit+0x124>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2221      	movs	r2, #33	; 0x21
 8003b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b76:	f7fd fadb 	bl	8001130 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	d108      	bne.n	8003ba8 <HAL_UART_Transmit+0x84>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	e003      	b.n	8003bb0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003bb8:	e02c      	b.n	8003c14 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 ffba 	bl	8004b3e <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e039      	b.n	8003c48 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	3302      	adds	r3, #2
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e007      	b.n	8003c02 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1cc      	bne.n	8003bba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2200      	movs	r2, #0
 8003c28:	2140      	movs	r1, #64	; 0x40
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 ff87 	bl	8004b3e <UART_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e006      	b.n	8003c48 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e000      	b.n	8003c48 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d142      	bne.n	8003cee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_UART_Receive_IT+0x24>
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e03b      	b.n	8003cf0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Receive_IT+0x36>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e034      	b.n	8003cf0 <HAL_UART_Receive_IT+0xa0>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_UART_Receive_IT+0xa8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d018      	beq.n	8003cde <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	69f9      	ldr	r1, [r7, #28]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e6      	bne.n	8003cac <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fff3 	bl	8004cd0 <UART_Start_Receive_IT>
 8003cea:	4603      	mov	r3, r0
 8003cec:	e000      	b.n	8003cf0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3728      	adds	r7, #40	; 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40008000 	.word	0x40008000

08003cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b0ba      	sub	sp, #232	; 0xe8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d26:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11b      	bne.n	8003d70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d015      	beq.n	8003d70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 82d6 	beq.w	8004312 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
      }
      return;
 8003d6e:	e2d0      	b.n	8004312 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 811f 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003d7e:	4b8b      	ldr	r3, [pc, #556]	; (8003fac <HAL_UART_IRQHandler+0x2b0>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d8a:	4b89      	ldr	r3, [pc, #548]	; (8003fb0 <HAL_UART_IRQHandler+0x2b4>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8112 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d011      	beq.n	8003dc4 <HAL_UART_IRQHandler+0xc8>
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2201      	movs	r2, #1
 8003db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d011      	beq.n	8003df4 <HAL_UART_IRQHandler+0xf8>
 8003dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2202      	movs	r2, #2
 8003de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dea:	f043 0204 	orr.w	r2, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d011      	beq.n	8003e24 <HAL_UART_IRQHandler+0x128>
 8003e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2204      	movs	r2, #4
 8003e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1a:	f043 0202 	orr.w	r2, r3, #2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d017      	beq.n	8003e60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003e40:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <HAL_UART_IRQHandler+0x2b0>)
 8003e42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e56:	f043 0208 	orr.w	r2, r3, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <HAL_UART_IRQHandler+0x196>
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00c      	beq.n	8003e92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 823c 	beq.w	8004316 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d013      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d005      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d04f      	beq.n	8003f96 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 f814 	bl	8004f24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d141      	bne.n	8003f8e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3308      	adds	r3, #8
 8003f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1d9      	bne.n	8003f0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d013      	beq.n	8003f86 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f62:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <HAL_UART_IRQHandler+0x2b8>)
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd fa76 	bl	800145c <HAL_DMA_Abort_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d017      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003f80:	4610      	mov	r0, r2
 8003f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e00f      	b.n	8003fa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f9da 	bl	8004340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e00b      	b.n	8003fa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9d6 	bl	8004340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e007      	b.n	8003fa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9d2 	bl	8004340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003fa4:	e1b7      	b.n	8004316 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa6:	bf00      	nop
    return;
 8003fa8:	e1b5      	b.n	8004316 <HAL_UART_IRQHandler+0x61a>
 8003faa:	bf00      	nop
 8003fac:	10000001 	.word	0x10000001
 8003fb0:	04000120 	.word	0x04000120
 8003fb4:	08004ff1 	.word	0x08004ff1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 814a 	bne.w	8004256 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8143 	beq.w	8004256 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 813c 	beq.w	8004256 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	f040 80b5 	bne.w	8004160 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004002:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8187 	beq.w	800431a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004016:	429a      	cmp	r2, r3
 8004018:	f080 817f 	bcs.w	800431a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004022:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 8086 	bne.w	8004144 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800404c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004066:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800406e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800407a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1da      	bne.n	8004038 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3308      	adds	r3, #8
 80040a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e1      	bne.n	8004082 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e3      	bne.n	80040be <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	f023 0310 	bic.w	r3, r3, #16
 8004118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004126:	65bb      	str	r3, [r7, #88]	; 0x58
 8004128:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800412c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e4      	bne.n	8004104 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd f933 	bl	80013aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004150:	b29b      	uxth	r3, r3
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	b29b      	uxth	r3, r3
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f8fb 	bl	8004354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800415e:	e0dc      	b.n	800431a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800416c:	b29b      	uxth	r3, r3
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80ce 	beq.w	800431e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80c9 	beq.w	800431e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800419a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041ae:	647b      	str	r3, [r7, #68]	; 0x44
 80041b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e4      	bne.n	800418c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3308      	adds	r3, #8
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	623b      	str	r3, [r7, #32]
   return(result);
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ea:	633a      	str	r2, [r7, #48]	; 0x30
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e1      	bne.n	80041c2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	617b      	str	r3, [r7, #20]
   return(result);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e4      	bne.n	8004212 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800424c:	4619      	mov	r1, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f880 	bl	8004354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004254:	e063      	b.n	800431e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00e      	beq.n	8004280 <HAL_UART_IRQHandler+0x584>
 8004262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004276:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f001 fb57 	bl	800592c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800427e:	e051      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d014      	beq.n	80042b6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d03a      	beq.n	8004322 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
    }
    return;
 80042b4:	e035      	b.n	8004322 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_UART_IRQHandler+0x5da>
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fea4 	bl	800501c <UART_EndTransmit_IT>
    return;
 80042d4:	e026      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_UART_IRQHandler+0x5fa>
 80042e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f001 fb30 	bl	8005954 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042f4:	e016      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <HAL_UART_IRQHandler+0x628>
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004306:	2b00      	cmp	r3, #0
 8004308:	da0c      	bge.n	8004324 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f001 fb18 	bl	8005940 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004310:	e008      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
      return;
 8004312:	bf00      	nop
 8004314:	e006      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
    return;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
      return;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
      return;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
    return;
 8004322:	bf00      	nop
  }
}
 8004324:	37e8      	adds	r7, #232	; 0xe8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop

0800432c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800436c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004370:	b08c      	sub	sp, #48	; 0x30
 8004372:	af00      	add	r7, sp, #0
 8004374:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	431a      	orrs	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	431a      	orrs	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	4313      	orrs	r3, r2
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4baa      	ldr	r3, [pc, #680]	; (8004644 <UART_SetConfig+0x2d8>)
 800439c:	4013      	ands	r3, r2
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a9f      	ldr	r2, [pc, #636]	; (8004648 <UART_SetConfig+0x2dc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d4:	4313      	orrs	r3, r2
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80043e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	f023 010f 	bic.w	r1, r3, #15
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a90      	ldr	r2, [pc, #576]	; (800464c <UART_SetConfig+0x2e0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d125      	bne.n	800445c <UART_SetConfig+0xf0>
 8004410:	4b8f      	ldr	r3, [pc, #572]	; (8004650 <UART_SetConfig+0x2e4>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b03      	cmp	r3, #3
 800441c:	d81a      	bhi.n	8004454 <UART_SetConfig+0xe8>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0xb8>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004435 	.word	0x08004435
 8004428:	08004445 	.word	0x08004445
 800442c:	0800443d 	.word	0x0800443d
 8004430:	0800444d 	.word	0x0800444d
 8004434:	2301      	movs	r3, #1
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443a:	e116      	b.n	800466a <UART_SetConfig+0x2fe>
 800443c:	2302      	movs	r3, #2
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004442:	e112      	b.n	800466a <UART_SetConfig+0x2fe>
 8004444:	2304      	movs	r3, #4
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444a:	e10e      	b.n	800466a <UART_SetConfig+0x2fe>
 800444c:	2308      	movs	r3, #8
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004452:	e10a      	b.n	800466a <UART_SetConfig+0x2fe>
 8004454:	2310      	movs	r3, #16
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445a:	e106      	b.n	800466a <UART_SetConfig+0x2fe>
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a7c      	ldr	r2, [pc, #496]	; (8004654 <UART_SetConfig+0x2e8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d138      	bne.n	80044d8 <UART_SetConfig+0x16c>
 8004466:	4b7a      	ldr	r3, [pc, #488]	; (8004650 <UART_SetConfig+0x2e4>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b0c      	cmp	r3, #12
 8004472:	d82d      	bhi.n	80044d0 <UART_SetConfig+0x164>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x110>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044b1 	.word	0x080044b1
 8004480:	080044d1 	.word	0x080044d1
 8004484:	080044d1 	.word	0x080044d1
 8004488:	080044d1 	.word	0x080044d1
 800448c:	080044c1 	.word	0x080044c1
 8004490:	080044d1 	.word	0x080044d1
 8004494:	080044d1 	.word	0x080044d1
 8004498:	080044d1 	.word	0x080044d1
 800449c:	080044b9 	.word	0x080044b9
 80044a0:	080044d1 	.word	0x080044d1
 80044a4:	080044d1 	.word	0x080044d1
 80044a8:	080044d1 	.word	0x080044d1
 80044ac:	080044c9 	.word	0x080044c9
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b6:	e0d8      	b.n	800466a <UART_SetConfig+0x2fe>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044be:	e0d4      	b.n	800466a <UART_SetConfig+0x2fe>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c6:	e0d0      	b.n	800466a <UART_SetConfig+0x2fe>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ce:	e0cc      	b.n	800466a <UART_SetConfig+0x2fe>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d6:	e0c8      	b.n	800466a <UART_SetConfig+0x2fe>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a5e      	ldr	r2, [pc, #376]	; (8004658 <UART_SetConfig+0x2ec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d125      	bne.n	800452e <UART_SetConfig+0x1c2>
 80044e2:	4b5b      	ldr	r3, [pc, #364]	; (8004650 <UART_SetConfig+0x2e4>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044ec:	2b30      	cmp	r3, #48	; 0x30
 80044ee:	d016      	beq.n	800451e <UART_SetConfig+0x1b2>
 80044f0:	2b30      	cmp	r3, #48	; 0x30
 80044f2:	d818      	bhi.n	8004526 <UART_SetConfig+0x1ba>
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d00a      	beq.n	800450e <UART_SetConfig+0x1a2>
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	d814      	bhi.n	8004526 <UART_SetConfig+0x1ba>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <UART_SetConfig+0x19a>
 8004500:	2b10      	cmp	r3, #16
 8004502:	d008      	beq.n	8004516 <UART_SetConfig+0x1aa>
 8004504:	e00f      	b.n	8004526 <UART_SetConfig+0x1ba>
 8004506:	2300      	movs	r3, #0
 8004508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450c:	e0ad      	b.n	800466a <UART_SetConfig+0x2fe>
 800450e:	2302      	movs	r3, #2
 8004510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004514:	e0a9      	b.n	800466a <UART_SetConfig+0x2fe>
 8004516:	2304      	movs	r3, #4
 8004518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451c:	e0a5      	b.n	800466a <UART_SetConfig+0x2fe>
 800451e:	2308      	movs	r3, #8
 8004520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004524:	e0a1      	b.n	800466a <UART_SetConfig+0x2fe>
 8004526:	2310      	movs	r3, #16
 8004528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452c:	e09d      	b.n	800466a <UART_SetConfig+0x2fe>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a4a      	ldr	r2, [pc, #296]	; (800465c <UART_SetConfig+0x2f0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d125      	bne.n	8004584 <UART_SetConfig+0x218>
 8004538:	4b45      	ldr	r3, [pc, #276]	; (8004650 <UART_SetConfig+0x2e4>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004542:	2bc0      	cmp	r3, #192	; 0xc0
 8004544:	d016      	beq.n	8004574 <UART_SetConfig+0x208>
 8004546:	2bc0      	cmp	r3, #192	; 0xc0
 8004548:	d818      	bhi.n	800457c <UART_SetConfig+0x210>
 800454a:	2b80      	cmp	r3, #128	; 0x80
 800454c:	d00a      	beq.n	8004564 <UART_SetConfig+0x1f8>
 800454e:	2b80      	cmp	r3, #128	; 0x80
 8004550:	d814      	bhi.n	800457c <UART_SetConfig+0x210>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <UART_SetConfig+0x1f0>
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d008      	beq.n	800456c <UART_SetConfig+0x200>
 800455a:	e00f      	b.n	800457c <UART_SetConfig+0x210>
 800455c:	2300      	movs	r3, #0
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004562:	e082      	b.n	800466a <UART_SetConfig+0x2fe>
 8004564:	2302      	movs	r3, #2
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456a:	e07e      	b.n	800466a <UART_SetConfig+0x2fe>
 800456c:	2304      	movs	r3, #4
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004572:	e07a      	b.n	800466a <UART_SetConfig+0x2fe>
 8004574:	2308      	movs	r3, #8
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457a:	e076      	b.n	800466a <UART_SetConfig+0x2fe>
 800457c:	2310      	movs	r3, #16
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004582:	e072      	b.n	800466a <UART_SetConfig+0x2fe>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a35      	ldr	r2, [pc, #212]	; (8004660 <UART_SetConfig+0x2f4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d12a      	bne.n	80045e4 <UART_SetConfig+0x278>
 800458e:	4b30      	ldr	r3, [pc, #192]	; (8004650 <UART_SetConfig+0x2e4>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459c:	d01a      	beq.n	80045d4 <UART_SetConfig+0x268>
 800459e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a2:	d81b      	bhi.n	80045dc <UART_SetConfig+0x270>
 80045a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a8:	d00c      	beq.n	80045c4 <UART_SetConfig+0x258>
 80045aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ae:	d815      	bhi.n	80045dc <UART_SetConfig+0x270>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <UART_SetConfig+0x250>
 80045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b8:	d008      	beq.n	80045cc <UART_SetConfig+0x260>
 80045ba:	e00f      	b.n	80045dc <UART_SetConfig+0x270>
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c2:	e052      	b.n	800466a <UART_SetConfig+0x2fe>
 80045c4:	2302      	movs	r3, #2
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ca:	e04e      	b.n	800466a <UART_SetConfig+0x2fe>
 80045cc:	2304      	movs	r3, #4
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d2:	e04a      	b.n	800466a <UART_SetConfig+0x2fe>
 80045d4:	2308      	movs	r3, #8
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045da:	e046      	b.n	800466a <UART_SetConfig+0x2fe>
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e2:	e042      	b.n	800466a <UART_SetConfig+0x2fe>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a17      	ldr	r2, [pc, #92]	; (8004648 <UART_SetConfig+0x2dc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d13a      	bne.n	8004664 <UART_SetConfig+0x2f8>
 80045ee:	4b18      	ldr	r3, [pc, #96]	; (8004650 <UART_SetConfig+0x2e4>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045fc:	d01a      	beq.n	8004634 <UART_SetConfig+0x2c8>
 80045fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004602:	d81b      	bhi.n	800463c <UART_SetConfig+0x2d0>
 8004604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004608:	d00c      	beq.n	8004624 <UART_SetConfig+0x2b8>
 800460a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460e:	d815      	bhi.n	800463c <UART_SetConfig+0x2d0>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <UART_SetConfig+0x2b0>
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	d008      	beq.n	800462c <UART_SetConfig+0x2c0>
 800461a:	e00f      	b.n	800463c <UART_SetConfig+0x2d0>
 800461c:	2300      	movs	r3, #0
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004622:	e022      	b.n	800466a <UART_SetConfig+0x2fe>
 8004624:	2302      	movs	r3, #2
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462a:	e01e      	b.n	800466a <UART_SetConfig+0x2fe>
 800462c:	2304      	movs	r3, #4
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004632:	e01a      	b.n	800466a <UART_SetConfig+0x2fe>
 8004634:	2308      	movs	r3, #8
 8004636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463a:	e016      	b.n	800466a <UART_SetConfig+0x2fe>
 800463c:	2310      	movs	r3, #16
 800463e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004642:	e012      	b.n	800466a <UART_SetConfig+0x2fe>
 8004644:	cfff69f3 	.word	0xcfff69f3
 8004648:	40008000 	.word	0x40008000
 800464c:	40013800 	.word	0x40013800
 8004650:	40021000 	.word	0x40021000
 8004654:	40004400 	.word	0x40004400
 8004658:	40004800 	.word	0x40004800
 800465c:	40004c00 	.word	0x40004c00
 8004660:	40005000 	.word	0x40005000
 8004664:	2310      	movs	r3, #16
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4aae      	ldr	r2, [pc, #696]	; (8004928 <UART_SetConfig+0x5bc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	f040 8097 	bne.w	80047a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800467a:	2b08      	cmp	r3, #8
 800467c:	d823      	bhi.n	80046c6 <UART_SetConfig+0x35a>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <UART_SetConfig+0x318>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046c7 	.word	0x080046c7
 800468c:	080046b1 	.word	0x080046b1
 8004690:	080046c7 	.word	0x080046c7
 8004694:	080046b7 	.word	0x080046b7
 8004698:	080046c7 	.word	0x080046c7
 800469c:	080046c7 	.word	0x080046c7
 80046a0:	080046c7 	.word	0x080046c7
 80046a4:	080046bf 	.word	0x080046bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7fd fe74 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80046ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046ae:	e010      	b.n	80046d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b0:	4b9e      	ldr	r3, [pc, #632]	; (800492c <UART_SetConfig+0x5c0>)
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046b4:	e00d      	b.n	80046d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b6:	f7fd fdff 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 80046ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046bc:	e009      	b.n	80046d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046c4:	e005      	b.n	80046d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8130 	beq.w	800493a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	4a94      	ldr	r2, [pc, #592]	; (8004930 <UART_SetConfig+0x5c4>)
 80046e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d305      	bcc.n	800470a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	429a      	cmp	r2, r3
 8004708:	d903      	bls.n	8004712 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004710:	e113      	b.n	800493a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	2200      	movs	r2, #0
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	60fa      	str	r2, [r7, #12]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	4a84      	ldr	r2, [pc, #528]	; (8004930 <UART_SetConfig+0x5c4>)
 8004720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004724:	b29b      	uxth	r3, r3
 8004726:	2200      	movs	r2, #0
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004730:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004734:	f7fb fddc 	bl	80002f0 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	020b      	lsls	r3, r1, #8
 800474a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800474e:	0202      	lsls	r2, r0, #8
 8004750:	6979      	ldr	r1, [r7, #20]
 8004752:	6849      	ldr	r1, [r1, #4]
 8004754:	0849      	lsrs	r1, r1, #1
 8004756:	2000      	movs	r0, #0
 8004758:	460c      	mov	r4, r1
 800475a:	4605      	mov	r5, r0
 800475c:	eb12 0804 	adds.w	r8, r2, r4
 8004760:	eb43 0905 	adc.w	r9, r3, r5
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	469a      	mov	sl, r3
 800476c:	4693      	mov	fp, r2
 800476e:	4652      	mov	r2, sl
 8004770:	465b      	mov	r3, fp
 8004772:	4640      	mov	r0, r8
 8004774:	4649      	mov	r1, r9
 8004776:	f7fb fdbb 	bl	80002f0 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4613      	mov	r3, r2
 8004780:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004788:	d308      	bcc.n	800479c <UART_SetConfig+0x430>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004790:	d204      	bcs.n	800479c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a3a      	ldr	r2, [r7, #32]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	e0ce      	b.n	800493a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047a2:	e0ca      	b.n	800493a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ac:	d166      	bne.n	800487c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80047ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d827      	bhi.n	8004806 <UART_SetConfig+0x49a>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <UART_SetConfig+0x450>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	08004807 	.word	0x08004807
 80047cc:	080047f7 	.word	0x080047f7
 80047d0:	08004807 	.word	0x08004807
 80047d4:	08004807 	.word	0x08004807
 80047d8:	08004807 	.word	0x08004807
 80047dc:	080047ff 	.word	0x080047ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fd fdd8 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80047e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047e6:	e014      	b.n	8004812 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fd fdea 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80047ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047ee:	e010      	b.n	8004812 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f0:	4b4e      	ldr	r3, [pc, #312]	; (800492c <UART_SetConfig+0x5c0>)
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047f4:	e00d      	b.n	8004812 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f6:	f7fd fd5f 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 80047fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047fc:	e009      	b.n	8004812 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004804:	e005      	b.n	8004812 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8090 	beq.w	800493a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	4a44      	ldr	r2, [pc, #272]	; (8004930 <UART_SetConfig+0x5c4>)
 8004820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004824:	461a      	mov	r2, r3
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	fbb3 f3f2 	udiv	r3, r3, r2
 800482c:	005a      	lsls	r2, r3, #1
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	441a      	add	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d916      	bls.n	8004874 <UART_SetConfig+0x508>
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d212      	bcs.n	8004874 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f023 030f 	bic.w	r3, r3, #15
 8004856:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	b29a      	uxth	r2, r3
 8004864:	8bfb      	ldrh	r3, [r7, #30]
 8004866:	4313      	orrs	r3, r2
 8004868:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	8bfa      	ldrh	r2, [r7, #30]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	e062      	b.n	800493a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800487a:	e05e      	b.n	800493a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800487c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004880:	2b08      	cmp	r3, #8
 8004882:	d828      	bhi.n	80048d6 <UART_SetConfig+0x56a>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x520>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	080048d7 	.word	0x080048d7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048d7 	.word	0x080048d7
 80048a4:	080048d7 	.word	0x080048d7
 80048a8:	080048d7 	.word	0x080048d7
 80048ac:	080048cf 	.word	0x080048cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fd fd70 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80048b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048b6:	e014      	b.n	80048e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b8:	f7fd fd82 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80048bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048be:	e010      	b.n	80048e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <UART_SetConfig+0x5c0>)
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048c4:	e00d      	b.n	80048e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c6:	f7fd fcf7 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 80048ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048cc:	e009      	b.n	80048e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048d4:	e005      	b.n	80048e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048e0:	bf00      	nop
    }

    if (pclk != 0U)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d028      	beq.n	800493a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	4a10      	ldr	r2, [pc, #64]	; (8004930 <UART_SetConfig+0x5c4>)
 80048ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f2:	461a      	mov	r2, r3
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	441a      	add	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	d910      	bls.n	8004934 <UART_SetConfig+0x5c8>
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004918:	d20c      	bcs.n	8004934 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	b29a      	uxth	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60da      	str	r2, [r3, #12]
 8004924:	e009      	b.n	800493a <UART_SetConfig+0x5ce>
 8004926:	bf00      	nop
 8004928:	40008000 	.word	0x40008000
 800492c:	00f42400 	.word	0x00f42400
 8004930:	08006d64 	.word	0x08006d64
      }
      else
      {
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2201      	movs	r2, #1
 800493e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2201      	movs	r2, #1
 8004946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004956:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800495a:	4618      	mov	r0, r3
 800495c:	3730      	adds	r7, #48	; 0x30
 800495e:	46bd      	mov	sp, r7
 8004960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a62:	d10a      	bne.n	8004a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab8:	f7fc fb3a 	bl	8001130 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d10e      	bne.n	8004aea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f82f 	bl	8004b3e <UART_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e025      	b.n	8004b36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d10e      	bne.n	8004b16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f819 	bl	8004b3e <UART_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e00f      	b.n	8004b36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b09c      	sub	sp, #112	; 0x70
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4e:	e0a9      	b.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	f000 80a5 	beq.w	8004ca4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5a:	f7fc fae9 	bl	8001130 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d302      	bcc.n	8004b70 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d140      	bne.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b84:	667b      	str	r3, [r7, #100]	; 0x64
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e6      	bne.n	8004b70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e069      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d051      	beq.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0e:	d149      	bne.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e6      	bne.n	8004c1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3308      	adds	r3, #8
 8004c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c6c:	623a      	str	r2, [r7, #32]
 8004c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	69f9      	ldr	r1, [r7, #28]
 8004c72:	6a3a      	ldr	r2, [r7, #32]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e010      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	f43f af46 	beq.w	8004b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3770      	adds	r7, #112	; 0x70
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b0a3      	sub	sp, #140	; 0x8c
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	d10e      	bne.n	8004d22 <UART_Start_Receive_IT+0x52>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d105      	bne.n	8004d18 <UART_Start_Receive_IT+0x48>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d16:	e02d      	b.n	8004d74 <UART_Start_Receive_IT+0xa4>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	22ff      	movs	r2, #255	; 0xff
 8004d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d20:	e028      	b.n	8004d74 <UART_Start_Receive_IT+0xa4>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <UART_Start_Receive_IT+0x76>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <UART_Start_Receive_IT+0x6c>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	22ff      	movs	r2, #255	; 0xff
 8004d36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d3a:	e01b      	b.n	8004d74 <UART_Start_Receive_IT+0xa4>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	227f      	movs	r2, #127	; 0x7f
 8004d40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d44:	e016      	b.n	8004d74 <UART_Start_Receive_IT+0xa4>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d4e:	d10d      	bne.n	8004d6c <UART_Start_Receive_IT+0x9c>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <UART_Start_Receive_IT+0x92>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	227f      	movs	r2, #127	; 0x7f
 8004d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d60:	e008      	b.n	8004d74 <UART_Start_Receive_IT+0xa4>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	223f      	movs	r2, #63	; 0x3f
 8004d66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d6a:	e003      	b.n	8004d74 <UART_Start_Receive_IT+0xa4>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2222      	movs	r2, #34	; 0x22
 8004d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3308      	adds	r3, #8
 8004da4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004da8:	673a      	str	r2, [r7, #112]	; 0x70
 8004daa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004dae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e3      	bne.n	8004d84 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc4:	d153      	bne.n	8004e6e <UART_Start_Receive_IT+0x19e>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004dcc:	88fa      	ldrh	r2, [r7, #6]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d34d      	bcc.n	8004e6e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	d107      	bne.n	8004dec <UART_Start_Receive_IT+0x11c>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a4b      	ldr	r2, [pc, #300]	; (8004f14 <UART_Start_Receive_IT+0x244>)
 8004de8:	671a      	str	r2, [r3, #112]	; 0x70
 8004dea:	e002      	b.n	8004df2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a4a      	ldr	r2, [pc, #296]	; (8004f18 <UART_Start_Receive_IT+0x248>)
 8004df0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01a      	beq.n	8004e38 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e26:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e4      	bne.n	8004e02 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004e58:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_Start_Receive_IT+0x168>
 8004e6c:	e04a      	b.n	8004f04 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e76:	d107      	bne.n	8004e88 <UART_Start_Receive_IT+0x1b8>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d103      	bne.n	8004e88 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <UART_Start_Receive_IT+0x24c>)
 8004e84:	671a      	str	r2, [r3, #112]	; 0x70
 8004e86:	e002      	b.n	8004e8e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <UART_Start_Receive_IT+0x250>)
 8004e8c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d019      	beq.n	8004ed2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004eb2:	677b      	str	r3, [r7, #116]	; 0x74
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ebe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e6      	bne.n	8004e9e <UART_Start_Receive_IT+0x1ce>
 8004ed0:	e018      	b.n	8004f04 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f043 0320 	orr.w	r3, r3, #32
 8004ee6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	69f9      	ldr	r1, [r7, #28]
 8004ef6:	6a3a      	ldr	r2, [r7, #32]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e6      	bne.n	8004ed2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	378c      	adds	r7, #140	; 0x8c
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	0800562d 	.word	0x0800562d
 8004f18:	08005335 	.word	0x08005335
 8004f1c:	080051d3 	.word	0x080051d3
 8004f20:	08005073 	.word	0x08005073

08004f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b095      	sub	sp, #84	; 0x54
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e6      	bne.n	8004f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e3      	bne.n	8004f5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d118      	bne.n	8004fd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f023 0310 	bic.w	r3, r3, #16
 8004fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004fe4:	bf00      	nop
 8004fe6:	3754      	adds	r7, #84	; 0x54
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff f996 	bl	8004340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	60bb      	str	r3, [r7, #8]
   return(result);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	61bb      	str	r3, [r7, #24]
 8005044:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6979      	ldr	r1, [r7, #20]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	613b      	str	r3, [r7, #16]
   return(result);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e6      	bne.n	8005024 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff f961 	bl	800432c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800506a:	bf00      	nop
 800506c:	3720      	adds	r7, #32
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b096      	sub	sp, #88	; 0x58
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005080:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	2b22      	cmp	r3, #34	; 0x22
 800508c:	f040 8095 	bne.w	80051ba <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800509a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800509e:	b2d9      	uxtb	r1, r3
 80050a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	400a      	ands	r2, r1
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d178      	bne.n	80051ca <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ec:	653b      	str	r3, [r7, #80]	; 0x50
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f6:	647b      	str	r3, [r7, #68]	; 0x44
 80050f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e6      	bne.n	80050d8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	623b      	str	r3, [r7, #32]
   return(result);
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800512a:	633a      	str	r2, [r7, #48]	; 0x30
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005150:	2b01      	cmp	r3, #1
 8005152:	d12e      	bne.n	80051b2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	60fb      	str	r3, [r7, #12]
   return(result);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0310 	bic.w	r3, r3, #16
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	617b      	str	r3, [r7, #20]
   return(result);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b10      	cmp	r3, #16
 8005198:	d103      	bne.n	80051a2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2210      	movs	r2, #16
 80051a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff f8d2 	bl	8004354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051b0:	e00b      	b.n	80051ca <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fb fc1c 	bl	80009f0 <HAL_UART_RxCpltCallback>
}
 80051b8:	e007      	b.n	80051ca <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699a      	ldr	r2, [r3, #24]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0208 	orr.w	r2, r2, #8
 80051c8:	619a      	str	r2, [r3, #24]
}
 80051ca:	bf00      	nop
 80051cc:	3758      	adds	r7, #88	; 0x58
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b096      	sub	sp, #88	; 0x58
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80051e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	2b22      	cmp	r3, #34	; 0x22
 80051ec:	f040 8095 	bne.w	800531a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005200:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005204:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005208:	4013      	ands	r3, r2
 800520a:	b29a      	uxth	r2, r3
 800520c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	1c9a      	adds	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d178      	bne.n	800532a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005256:	643b      	str	r3, [r7, #64]	; 0x40
 8005258:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800525c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e6      	bne.n	8005238 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3308      	adds	r3, #8
 8005270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	61fb      	str	r3, [r7, #28]
   return(result);
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	64bb      	str	r3, [r7, #72]	; 0x48
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e5      	bne.n	800526a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d12e      	bne.n	8005312 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f023 0310 	bic.w	r3, r3, #16
 80052ce:	647b      	str	r3, [r7, #68]	; 0x44
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	613b      	str	r3, [r7, #16]
   return(result);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e6      	bne.n	80052ba <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d103      	bne.n	8005302 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2210      	movs	r2, #16
 8005300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff f822 	bl	8004354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005310:	e00b      	b.n	800532a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fb fb6c 	bl	80009f0 <HAL_UART_RxCpltCallback>
}
 8005318:	e007      	b.n	800532a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699a      	ldr	r2, [r3, #24]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0208 	orr.w	r2, r2, #8
 8005328:	619a      	str	r2, [r3, #24]
}
 800532a:	bf00      	nop
 800532c:	3758      	adds	r7, #88	; 0x58
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b0a6      	sub	sp, #152	; 0x98
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005342:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	2b22      	cmp	r3, #34	; 0x22
 800536c:	f040 814f 	bne.w	800560e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005376:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800537a:	e0f6      	b.n	800556a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005386:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800538a:	b2d9      	uxtb	r1, r3
 800538c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005390:	b2da      	uxtb	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	400a      	ands	r2, r1
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80053c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d053      	beq.n	8005476 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d011      	beq.n	80053fe <UART_RxISR_8BIT_FIFOEN+0xca>
 80053da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2201      	movs	r2, #1
 80053ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f4:	f043 0201 	orr.w	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d011      	beq.n	800542e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800540a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00b      	beq.n	800542e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2202      	movs	r2, #2
 800541c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005424:	f043 0204 	orr.w	r2, r3, #4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800542e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d011      	beq.n	800545e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800543a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2204      	movs	r2, #4
 800544c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005454:	f043 0202 	orr.w	r2, r3, #2
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d006      	beq.n	8005476 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fe ff69 	bl	8004340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d173      	bne.n	800556a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80054a6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80054aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80054b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e4      	bne.n	8005482 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80054c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80054dc:	657a      	str	r2, [r7, #84]	; 0x54
 80054de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d12e      	bne.n	8005564 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	f023 0310 	bic.w	r3, r3, #16
 8005520:	67bb      	str	r3, [r7, #120]	; 0x78
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800552a:	643b      	str	r3, [r7, #64]	; 0x40
 800552c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e6      	bne.n	800550c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d103      	bne.n	8005554 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2210      	movs	r2, #16
 8005552:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fe fef9 	bl	8004354 <HAL_UARTEx_RxEventCallback>
 8005562:	e002      	b.n	800556a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fb fa43 	bl	80009f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800556a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005572:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	f47f aefe 	bne.w	800537c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005586:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800558a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800558e:	2b00      	cmp	r3, #0
 8005590:	d045      	beq.n	800561e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005598:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800559c:	429a      	cmp	r2, r3
 800559e:	d23e      	bcs.n	800561e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b6:	673b      	str	r3, [r7, #112]	; 0x70
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80055c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a14      	ldr	r2, [pc, #80]	; (8005628 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80055d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f043 0320 	orr.w	r3, r3, #32
 80055ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6979      	ldr	r1, [r7, #20]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	613b      	str	r3, [r7, #16]
   return(result);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e6      	bne.n	80055da <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800560c:	e007      	b.n	800561e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0208 	orr.w	r2, r2, #8
 800561c:	619a      	str	r2, [r3, #24]
}
 800561e:	bf00      	nop
 8005620:	3798      	adds	r7, #152	; 0x98
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	08005073 	.word	0x08005073

0800562c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b0a8      	sub	sp, #160	; 0xa0
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800563a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005662:	2b22      	cmp	r3, #34	; 0x22
 8005664:	f040 8153 	bne.w	800590e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800566e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005672:	e0fa      	b.n	800586a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005686:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800568a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800568e:	4013      	ands	r3, r2
 8005690:	b29a      	uxth	r2, r3
 8005692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005696:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	1c9a      	adds	r2, r3, #2
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d053      	beq.n	8005772 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80056d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2201      	movs	r2, #1
 80056e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f0:	f043 0201 	orr.w	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d011      	beq.n	800572a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2202      	movs	r2, #2
 8005718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005720:	f043 0204 	orr.w	r2, r3, #4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800572a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005736:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2204      	movs	r2, #4
 8005748:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005750:	f043 0202 	orr.w	r2, r3, #2
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d006      	beq.n	8005772 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fe fdeb 	bl	8004340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d175      	bne.n	800586a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800578c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e4      	bne.n	800577e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80057de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e1      	bne.n	80057b4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d12e      	bne.n	8005864 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	f023 0310 	bic.w	r3, r3, #16
 8005820:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800582a:	647b      	str	r3, [r7, #68]	; 0x44
 800582c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e6      	bne.n	800580c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b10      	cmp	r3, #16
 800584a:	d103      	bne.n	8005854 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2210      	movs	r2, #16
 8005852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fe fd79 	bl	8004354 <HAL_UARTEx_RxEventCallback>
 8005862:	e002      	b.n	800586a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fb f8c3 	bl	80009f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800586a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800586e:	2b00      	cmp	r3, #0
 8005870:	d006      	beq.n	8005880 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005872:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	f47f aefa 	bne.w	8005674 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005886:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800588a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800588e:	2b00      	cmp	r3, #0
 8005890:	d045      	beq.n	800591e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005898:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800589c:	429a      	cmp	r2, r3
 800589e:	d23e      	bcs.n	800591e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	623b      	str	r3, [r7, #32]
   return(result);
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b6:	677b      	str	r3, [r7, #116]	; 0x74
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80058c0:	633a      	str	r2, [r7, #48]	; 0x30
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a14      	ldr	r2, [pc, #80]	; (8005928 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80058d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f043 0320 	orr.w	r3, r3, #32
 80058ee:	673b      	str	r3, [r7, #112]	; 0x70
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	617b      	str	r3, [r7, #20]
   return(result);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e6      	bne.n	80058da <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800590c:	e007      	b.n	800591e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0208 	orr.w	r2, r2, #8
 800591c:	619a      	str	r2, [r3, #24]
}
 800591e:	bf00      	nop
 8005920:	37a0      	adds	r7, #160	; 0xa0
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	080051d3 	.word	0x080051d3

0800592c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HAL_UARTEx_DisableFifoMode+0x16>
 800597a:	2302      	movs	r3, #2
 800597c:	e027      	b.n	80059ce <HAL_UARTEx_DisableFifoMode+0x66>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2224      	movs	r2, #36	; 0x24
 800598a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e02d      	b.n	8005a4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2224      	movs	r2, #36	; 0x24
 80059fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f850 	bl	8005ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e02d      	b.n	8005aca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2224      	movs	r2, #36	; 0x24
 8005a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f812 	bl	8005ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d108      	bne.n	8005af6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005af4:	e031      	b.n	8005b5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005af6:	2308      	movs	r3, #8
 8005af8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005afa:	2308      	movs	r3, #8
 8005afc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	0e5b      	lsrs	r3, r3, #25
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	0f5b      	lsrs	r3, r3, #29
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	7b3a      	ldrb	r2, [r7, #12]
 8005b22:	4911      	ldr	r1, [pc, #68]	; (8005b68 <UARTEx_SetNbDataToProcess+0x94>)
 8005b24:	5c8a      	ldrb	r2, [r1, r2]
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b2a:	7b3a      	ldrb	r2, [r7, #12]
 8005b2c:	490f      	ldr	r1, [pc, #60]	; (8005b6c <UARTEx_SetNbDataToProcess+0x98>)
 8005b2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b30:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	7b7a      	ldrb	r2, [r7, #13]
 8005b40:	4909      	ldr	r1, [pc, #36]	; (8005b68 <UARTEx_SetNbDataToProcess+0x94>)
 8005b42:	5c8a      	ldrb	r2, [r1, r2]
 8005b44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b48:	7b7a      	ldrb	r2, [r7, #13]
 8005b4a:	4908      	ldr	r1, [pc, #32]	; (8005b6c <UARTEx_SetNbDataToProcess+0x98>)
 8005b4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	08006d7c 	.word	0x08006d7c
 8005b6c:	08006d84 	.word	0x08006d84

08005b70 <__errno>:
 8005b70:	4b01      	ldr	r3, [pc, #4]	; (8005b78 <__errno+0x8>)
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	200000a4 	.word	0x200000a4

08005b7c <__libc_init_array>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	4d0d      	ldr	r5, [pc, #52]	; (8005bb4 <__libc_init_array+0x38>)
 8005b80:	4c0d      	ldr	r4, [pc, #52]	; (8005bb8 <__libc_init_array+0x3c>)
 8005b82:	1b64      	subs	r4, r4, r5
 8005b84:	10a4      	asrs	r4, r4, #2
 8005b86:	2600      	movs	r6, #0
 8005b88:	42a6      	cmp	r6, r4
 8005b8a:	d109      	bne.n	8005ba0 <__libc_init_array+0x24>
 8005b8c:	4d0b      	ldr	r5, [pc, #44]	; (8005bbc <__libc_init_array+0x40>)
 8005b8e:	4c0c      	ldr	r4, [pc, #48]	; (8005bc0 <__libc_init_array+0x44>)
 8005b90:	f001 f876 	bl	8006c80 <_init>
 8005b94:	1b64      	subs	r4, r4, r5
 8005b96:	10a4      	asrs	r4, r4, #2
 8005b98:	2600      	movs	r6, #0
 8005b9a:	42a6      	cmp	r6, r4
 8005b9c:	d105      	bne.n	8005baa <__libc_init_array+0x2e>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba4:	4798      	blx	r3
 8005ba6:	3601      	adds	r6, #1
 8005ba8:	e7ee      	b.n	8005b88 <__libc_init_array+0xc>
 8005baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bae:	4798      	blx	r3
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	e7f2      	b.n	8005b9a <__libc_init_array+0x1e>
 8005bb4:	08006edc 	.word	0x08006edc
 8005bb8:	08006edc 	.word	0x08006edc
 8005bbc:	08006edc 	.word	0x08006edc
 8005bc0:	08006ee0 	.word	0x08006ee0

08005bc4 <memset>:
 8005bc4:	4402      	add	r2, r0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d100      	bne.n	8005bce <memset+0xa>
 8005bcc:	4770      	bx	lr
 8005bce:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd2:	e7f9      	b.n	8005bc8 <memset+0x4>

08005bd4 <strtok>:
 8005bd4:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <strtok+0x5c>)
 8005bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bd8:	681e      	ldr	r6, [r3, #0]
 8005bda:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005bdc:	4605      	mov	r5, r0
 8005bde:	b9fc      	cbnz	r4, 8005c20 <strtok+0x4c>
 8005be0:	2050      	movs	r0, #80	; 0x50
 8005be2:	9101      	str	r1, [sp, #4]
 8005be4:	f000 f882 	bl	8005cec <malloc>
 8005be8:	9901      	ldr	r1, [sp, #4]
 8005bea:	65b0      	str	r0, [r6, #88]	; 0x58
 8005bec:	4602      	mov	r2, r0
 8005bee:	b920      	cbnz	r0, 8005bfa <strtok+0x26>
 8005bf0:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <strtok+0x60>)
 8005bf2:	4811      	ldr	r0, [pc, #68]	; (8005c38 <strtok+0x64>)
 8005bf4:	2157      	movs	r1, #87	; 0x57
 8005bf6:	f000 f849 	bl	8005c8c <__assert_func>
 8005bfa:	e9c0 4400 	strd	r4, r4, [r0]
 8005bfe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005c02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005c06:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005c0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005c0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005c12:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005c16:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005c1a:	6184      	str	r4, [r0, #24]
 8005c1c:	7704      	strb	r4, [r0, #28]
 8005c1e:	6244      	str	r4, [r0, #36]	; 0x24
 8005c20:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005c22:	2301      	movs	r3, #1
 8005c24:	4628      	mov	r0, r5
 8005c26:	b002      	add	sp, #8
 8005c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c2c:	f000 b806 	b.w	8005c3c <__strtok_r>
 8005c30:	200000a4 	.word	0x200000a4
 8005c34:	08006d90 	.word	0x08006d90
 8005c38:	08006da7 	.word	0x08006da7

08005c3c <__strtok_r>:
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b908      	cbnz	r0, 8005c44 <__strtok_r+0x8>
 8005c40:	6810      	ldr	r0, [r2, #0]
 8005c42:	b188      	cbz	r0, 8005c68 <__strtok_r+0x2c>
 8005c44:	4604      	mov	r4, r0
 8005c46:	4620      	mov	r0, r4
 8005c48:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c52:	b91e      	cbnz	r6, 8005c5c <__strtok_r+0x20>
 8005c54:	b965      	cbnz	r5, 8005c70 <__strtok_r+0x34>
 8005c56:	6015      	str	r5, [r2, #0]
 8005c58:	4628      	mov	r0, r5
 8005c5a:	e005      	b.n	8005c68 <__strtok_r+0x2c>
 8005c5c:	42b5      	cmp	r5, r6
 8005c5e:	d1f6      	bne.n	8005c4e <__strtok_r+0x12>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f0      	bne.n	8005c46 <__strtok_r+0xa>
 8005c64:	6014      	str	r4, [r2, #0]
 8005c66:	7003      	strb	r3, [r0, #0]
 8005c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c6a:	461c      	mov	r4, r3
 8005c6c:	e00c      	b.n	8005c88 <__strtok_r+0x4c>
 8005c6e:	b915      	cbnz	r5, 8005c76 <__strtok_r+0x3a>
 8005c70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c74:	460e      	mov	r6, r1
 8005c76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005c7a:	42ab      	cmp	r3, r5
 8005c7c:	d1f7      	bne.n	8005c6e <__strtok_r+0x32>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f3      	beq.n	8005c6a <__strtok_r+0x2e>
 8005c82:	2300      	movs	r3, #0
 8005c84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c88:	6014      	str	r4, [r2, #0]
 8005c8a:	e7ed      	b.n	8005c68 <__strtok_r+0x2c>

08005c8c <__assert_func>:
 8005c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c8e:	4614      	mov	r4, r2
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <__assert_func+0x2c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4605      	mov	r5, r0
 8005c98:	68d8      	ldr	r0, [r3, #12]
 8005c9a:	b14c      	cbz	r4, 8005cb0 <__assert_func+0x24>
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <__assert_func+0x30>)
 8005c9e:	9100      	str	r1, [sp, #0]
 8005ca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ca4:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <__assert_func+0x34>)
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	f000 f80e 	bl	8005cc8 <fiprintf>
 8005cac:	f000 fcc4 	bl	8006638 <abort>
 8005cb0:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <__assert_func+0x38>)
 8005cb2:	461c      	mov	r4, r3
 8005cb4:	e7f3      	b.n	8005c9e <__assert_func+0x12>
 8005cb6:	bf00      	nop
 8005cb8:	200000a4 	.word	0x200000a4
 8005cbc:	08006e04 	.word	0x08006e04
 8005cc0:	08006e11 	.word	0x08006e11
 8005cc4:	08006e3f 	.word	0x08006e3f

08005cc8 <fiprintf>:
 8005cc8:	b40e      	push	{r1, r2, r3}
 8005cca:	b503      	push	{r0, r1, lr}
 8005ccc:	4601      	mov	r1, r0
 8005cce:	ab03      	add	r3, sp, #12
 8005cd0:	4805      	ldr	r0, [pc, #20]	; (8005ce8 <fiprintf+0x20>)
 8005cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd6:	6800      	ldr	r0, [r0, #0]
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	f000 f919 	bl	8005f10 <_vfiprintf_r>
 8005cde:	b002      	add	sp, #8
 8005ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce4:	b003      	add	sp, #12
 8005ce6:	4770      	bx	lr
 8005ce8:	200000a4 	.word	0x200000a4

08005cec <malloc>:
 8005cec:	4b02      	ldr	r3, [pc, #8]	; (8005cf8 <malloc+0xc>)
 8005cee:	4601      	mov	r1, r0
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f000 b86f 	b.w	8005dd4 <_malloc_r>
 8005cf6:	bf00      	nop
 8005cf8:	200000a4 	.word	0x200000a4

08005cfc <_free_r>:
 8005cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d044      	beq.n	8005d8c <_free_r+0x90>
 8005d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d06:	9001      	str	r0, [sp, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d0e:	bfb8      	it	lt
 8005d10:	18e4      	addlt	r4, r4, r3
 8005d12:	f000 feb9 	bl	8006a88 <__malloc_lock>
 8005d16:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <_free_r+0x94>)
 8005d18:	9801      	ldr	r0, [sp, #4]
 8005d1a:	6813      	ldr	r3, [r2, #0]
 8005d1c:	b933      	cbnz	r3, 8005d2c <_free_r+0x30>
 8005d1e:	6063      	str	r3, [r4, #4]
 8005d20:	6014      	str	r4, [r2, #0]
 8005d22:	b003      	add	sp, #12
 8005d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d28:	f000 beb4 	b.w	8006a94 <__malloc_unlock>
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d908      	bls.n	8005d42 <_free_r+0x46>
 8005d30:	6825      	ldr	r5, [r4, #0]
 8005d32:	1961      	adds	r1, r4, r5
 8005d34:	428b      	cmp	r3, r1
 8005d36:	bf01      	itttt	eq
 8005d38:	6819      	ldreq	r1, [r3, #0]
 8005d3a:	685b      	ldreq	r3, [r3, #4]
 8005d3c:	1949      	addeq	r1, r1, r5
 8005d3e:	6021      	streq	r1, [r4, #0]
 8005d40:	e7ed      	b.n	8005d1e <_free_r+0x22>
 8005d42:	461a      	mov	r2, r3
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	b10b      	cbz	r3, 8005d4c <_free_r+0x50>
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d9fa      	bls.n	8005d42 <_free_r+0x46>
 8005d4c:	6811      	ldr	r1, [r2, #0]
 8005d4e:	1855      	adds	r5, r2, r1
 8005d50:	42a5      	cmp	r5, r4
 8005d52:	d10b      	bne.n	8005d6c <_free_r+0x70>
 8005d54:	6824      	ldr	r4, [r4, #0]
 8005d56:	4421      	add	r1, r4
 8005d58:	1854      	adds	r4, r2, r1
 8005d5a:	42a3      	cmp	r3, r4
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	d1e0      	bne.n	8005d22 <_free_r+0x26>
 8005d60:	681c      	ldr	r4, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	6053      	str	r3, [r2, #4]
 8005d66:	4421      	add	r1, r4
 8005d68:	6011      	str	r1, [r2, #0]
 8005d6a:	e7da      	b.n	8005d22 <_free_r+0x26>
 8005d6c:	d902      	bls.n	8005d74 <_free_r+0x78>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	6003      	str	r3, [r0, #0]
 8005d72:	e7d6      	b.n	8005d22 <_free_r+0x26>
 8005d74:	6825      	ldr	r5, [r4, #0]
 8005d76:	1961      	adds	r1, r4, r5
 8005d78:	428b      	cmp	r3, r1
 8005d7a:	bf04      	itt	eq
 8005d7c:	6819      	ldreq	r1, [r3, #0]
 8005d7e:	685b      	ldreq	r3, [r3, #4]
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	bf04      	itt	eq
 8005d84:	1949      	addeq	r1, r1, r5
 8005d86:	6021      	streq	r1, [r4, #0]
 8005d88:	6054      	str	r4, [r2, #4]
 8005d8a:	e7ca      	b.n	8005d22 <_free_r+0x26>
 8005d8c:	b003      	add	sp, #12
 8005d8e:	bd30      	pop	{r4, r5, pc}
 8005d90:	20000250 	.word	0x20000250

08005d94 <sbrk_aligned>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	4e0e      	ldr	r6, [pc, #56]	; (8005dd0 <sbrk_aligned+0x3c>)
 8005d98:	460c      	mov	r4, r1
 8005d9a:	6831      	ldr	r1, [r6, #0]
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	b911      	cbnz	r1, 8005da6 <sbrk_aligned+0x12>
 8005da0:	f000 fb7a 	bl	8006498 <_sbrk_r>
 8005da4:	6030      	str	r0, [r6, #0]
 8005da6:	4621      	mov	r1, r4
 8005da8:	4628      	mov	r0, r5
 8005daa:	f000 fb75 	bl	8006498 <_sbrk_r>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	d00a      	beq.n	8005dc8 <sbrk_aligned+0x34>
 8005db2:	1cc4      	adds	r4, r0, #3
 8005db4:	f024 0403 	bic.w	r4, r4, #3
 8005db8:	42a0      	cmp	r0, r4
 8005dba:	d007      	beq.n	8005dcc <sbrk_aligned+0x38>
 8005dbc:	1a21      	subs	r1, r4, r0
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 fb6a 	bl	8006498 <_sbrk_r>
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d101      	bne.n	8005dcc <sbrk_aligned+0x38>
 8005dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8005dcc:	4620      	mov	r0, r4
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	20000254 	.word	0x20000254

08005dd4 <_malloc_r>:
 8005dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd8:	1ccd      	adds	r5, r1, #3
 8005dda:	f025 0503 	bic.w	r5, r5, #3
 8005dde:	3508      	adds	r5, #8
 8005de0:	2d0c      	cmp	r5, #12
 8005de2:	bf38      	it	cc
 8005de4:	250c      	movcc	r5, #12
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	4607      	mov	r7, r0
 8005dea:	db01      	blt.n	8005df0 <_malloc_r+0x1c>
 8005dec:	42a9      	cmp	r1, r5
 8005dee:	d905      	bls.n	8005dfc <_malloc_r+0x28>
 8005df0:	230c      	movs	r3, #12
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	2600      	movs	r6, #0
 8005df6:	4630      	mov	r0, r6
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dfc:	4e2e      	ldr	r6, [pc, #184]	; (8005eb8 <_malloc_r+0xe4>)
 8005dfe:	f000 fe43 	bl	8006a88 <__malloc_lock>
 8005e02:	6833      	ldr	r3, [r6, #0]
 8005e04:	461c      	mov	r4, r3
 8005e06:	bb34      	cbnz	r4, 8005e56 <_malloc_r+0x82>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f7ff ffc2 	bl	8005d94 <sbrk_aligned>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	4604      	mov	r4, r0
 8005e14:	d14d      	bne.n	8005eb2 <_malloc_r+0xde>
 8005e16:	6834      	ldr	r4, [r6, #0]
 8005e18:	4626      	mov	r6, r4
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	d140      	bne.n	8005ea0 <_malloc_r+0xcc>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	4631      	mov	r1, r6
 8005e22:	4638      	mov	r0, r7
 8005e24:	eb04 0803 	add.w	r8, r4, r3
 8005e28:	f000 fb36 	bl	8006498 <_sbrk_r>
 8005e2c:	4580      	cmp	r8, r0
 8005e2e:	d13a      	bne.n	8005ea6 <_malloc_r+0xd2>
 8005e30:	6821      	ldr	r1, [r4, #0]
 8005e32:	3503      	adds	r5, #3
 8005e34:	1a6d      	subs	r5, r5, r1
 8005e36:	f025 0503 	bic.w	r5, r5, #3
 8005e3a:	3508      	adds	r5, #8
 8005e3c:	2d0c      	cmp	r5, #12
 8005e3e:	bf38      	it	cc
 8005e40:	250c      	movcc	r5, #12
 8005e42:	4629      	mov	r1, r5
 8005e44:	4638      	mov	r0, r7
 8005e46:	f7ff ffa5 	bl	8005d94 <sbrk_aligned>
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d02b      	beq.n	8005ea6 <_malloc_r+0xd2>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	442b      	add	r3, r5
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	e00e      	b.n	8005e74 <_malloc_r+0xa0>
 8005e56:	6822      	ldr	r2, [r4, #0]
 8005e58:	1b52      	subs	r2, r2, r5
 8005e5a:	d41e      	bmi.n	8005e9a <_malloc_r+0xc6>
 8005e5c:	2a0b      	cmp	r2, #11
 8005e5e:	d916      	bls.n	8005e8e <_malloc_r+0xba>
 8005e60:	1961      	adds	r1, r4, r5
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	6025      	str	r5, [r4, #0]
 8005e66:	bf18      	it	ne
 8005e68:	6059      	strne	r1, [r3, #4]
 8005e6a:	6863      	ldr	r3, [r4, #4]
 8005e6c:	bf08      	it	eq
 8005e6e:	6031      	streq	r1, [r6, #0]
 8005e70:	5162      	str	r2, [r4, r5]
 8005e72:	604b      	str	r3, [r1, #4]
 8005e74:	4638      	mov	r0, r7
 8005e76:	f104 060b 	add.w	r6, r4, #11
 8005e7a:	f000 fe0b 	bl	8006a94 <__malloc_unlock>
 8005e7e:	f026 0607 	bic.w	r6, r6, #7
 8005e82:	1d23      	adds	r3, r4, #4
 8005e84:	1af2      	subs	r2, r6, r3
 8005e86:	d0b6      	beq.n	8005df6 <_malloc_r+0x22>
 8005e88:	1b9b      	subs	r3, r3, r6
 8005e8a:	50a3      	str	r3, [r4, r2]
 8005e8c:	e7b3      	b.n	8005df6 <_malloc_r+0x22>
 8005e8e:	6862      	ldr	r2, [r4, #4]
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	bf0c      	ite	eq
 8005e94:	6032      	streq	r2, [r6, #0]
 8005e96:	605a      	strne	r2, [r3, #4]
 8005e98:	e7ec      	b.n	8005e74 <_malloc_r+0xa0>
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	6864      	ldr	r4, [r4, #4]
 8005e9e:	e7b2      	b.n	8005e06 <_malloc_r+0x32>
 8005ea0:	4634      	mov	r4, r6
 8005ea2:	6876      	ldr	r6, [r6, #4]
 8005ea4:	e7b9      	b.n	8005e1a <_malloc_r+0x46>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f000 fdf2 	bl	8006a94 <__malloc_unlock>
 8005eb0:	e7a1      	b.n	8005df6 <_malloc_r+0x22>
 8005eb2:	6025      	str	r5, [r4, #0]
 8005eb4:	e7de      	b.n	8005e74 <_malloc_r+0xa0>
 8005eb6:	bf00      	nop
 8005eb8:	20000250 	.word	0x20000250

08005ebc <__sfputc_r>:
 8005ebc:	6893      	ldr	r3, [r2, #8]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	b410      	push	{r4}
 8005ec4:	6093      	str	r3, [r2, #8]
 8005ec6:	da08      	bge.n	8005eda <__sfputc_r+0x1e>
 8005ec8:	6994      	ldr	r4, [r2, #24]
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	db01      	blt.n	8005ed2 <__sfputc_r+0x16>
 8005ece:	290a      	cmp	r1, #10
 8005ed0:	d103      	bne.n	8005eda <__sfputc_r+0x1e>
 8005ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ed6:	f000 baef 	b.w	80064b8 <__swbuf_r>
 8005eda:	6813      	ldr	r3, [r2, #0]
 8005edc:	1c58      	adds	r0, r3, #1
 8005ede:	6010      	str	r0, [r2, #0]
 8005ee0:	7019      	strb	r1, [r3, #0]
 8005ee2:	4608      	mov	r0, r1
 8005ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <__sfputs_r>:
 8005eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	18d5      	adds	r5, r2, r3
 8005ef4:	42ac      	cmp	r4, r5
 8005ef6:	d101      	bne.n	8005efc <__sfputs_r+0x12>
 8005ef8:	2000      	movs	r0, #0
 8005efa:	e007      	b.n	8005f0c <__sfputs_r+0x22>
 8005efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f00:	463a      	mov	r2, r7
 8005f02:	4630      	mov	r0, r6
 8005f04:	f7ff ffda 	bl	8005ebc <__sfputc_r>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d1f3      	bne.n	8005ef4 <__sfputs_r+0xa>
 8005f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f10 <_vfiprintf_r>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	460d      	mov	r5, r1
 8005f16:	b09d      	sub	sp, #116	; 0x74
 8005f18:	4614      	mov	r4, r2
 8005f1a:	4698      	mov	r8, r3
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	b118      	cbz	r0, 8005f28 <_vfiprintf_r+0x18>
 8005f20:	6983      	ldr	r3, [r0, #24]
 8005f22:	b90b      	cbnz	r3, 8005f28 <_vfiprintf_r+0x18>
 8005f24:	f000 fcaa 	bl	800687c <__sinit>
 8005f28:	4b89      	ldr	r3, [pc, #548]	; (8006150 <_vfiprintf_r+0x240>)
 8005f2a:	429d      	cmp	r5, r3
 8005f2c:	d11b      	bne.n	8005f66 <_vfiprintf_r+0x56>
 8005f2e:	6875      	ldr	r5, [r6, #4]
 8005f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f32:	07d9      	lsls	r1, r3, #31
 8005f34:	d405      	bmi.n	8005f42 <_vfiprintf_r+0x32>
 8005f36:	89ab      	ldrh	r3, [r5, #12]
 8005f38:	059a      	lsls	r2, r3, #22
 8005f3a:	d402      	bmi.n	8005f42 <_vfiprintf_r+0x32>
 8005f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f3e:	f000 fd3b 	bl	80069b8 <__retarget_lock_acquire_recursive>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	071b      	lsls	r3, r3, #28
 8005f46:	d501      	bpl.n	8005f4c <_vfiprintf_r+0x3c>
 8005f48:	692b      	ldr	r3, [r5, #16]
 8005f4a:	b9eb      	cbnz	r3, 8005f88 <_vfiprintf_r+0x78>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f000 fb04 	bl	800655c <__swsetup_r>
 8005f54:	b1c0      	cbz	r0, 8005f88 <_vfiprintf_r+0x78>
 8005f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f58:	07dc      	lsls	r4, r3, #31
 8005f5a:	d50e      	bpl.n	8005f7a <_vfiprintf_r+0x6a>
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	b01d      	add	sp, #116	; 0x74
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	4b7b      	ldr	r3, [pc, #492]	; (8006154 <_vfiprintf_r+0x244>)
 8005f68:	429d      	cmp	r5, r3
 8005f6a:	d101      	bne.n	8005f70 <_vfiprintf_r+0x60>
 8005f6c:	68b5      	ldr	r5, [r6, #8]
 8005f6e:	e7df      	b.n	8005f30 <_vfiprintf_r+0x20>
 8005f70:	4b79      	ldr	r3, [pc, #484]	; (8006158 <_vfiprintf_r+0x248>)
 8005f72:	429d      	cmp	r5, r3
 8005f74:	bf08      	it	eq
 8005f76:	68f5      	ldreq	r5, [r6, #12]
 8005f78:	e7da      	b.n	8005f30 <_vfiprintf_r+0x20>
 8005f7a:	89ab      	ldrh	r3, [r5, #12]
 8005f7c:	0598      	lsls	r0, r3, #22
 8005f7e:	d4ed      	bmi.n	8005f5c <_vfiprintf_r+0x4c>
 8005f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f82:	f000 fd1a 	bl	80069ba <__retarget_lock_release_recursive>
 8005f86:	e7e9      	b.n	8005f5c <_vfiprintf_r+0x4c>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f96:	2330      	movs	r3, #48	; 0x30
 8005f98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800615c <_vfiprintf_r+0x24c>
 8005f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fa0:	f04f 0901 	mov.w	r9, #1
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	469a      	mov	sl, r3
 8005fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fac:	b10a      	cbz	r2, 8005fb2 <_vfiprintf_r+0xa2>
 8005fae:	2a25      	cmp	r2, #37	; 0x25
 8005fb0:	d1f9      	bne.n	8005fa6 <_vfiprintf_r+0x96>
 8005fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8005fb6:	d00b      	beq.n	8005fd0 <_vfiprintf_r+0xc0>
 8005fb8:	465b      	mov	r3, fp
 8005fba:	4622      	mov	r2, r4
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7ff ff93 	bl	8005eea <__sfputs_r>
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f000 80aa 	beq.w	800611e <_vfiprintf_r+0x20e>
 8005fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fcc:	445a      	add	r2, fp
 8005fce:	9209      	str	r2, [sp, #36]	; 0x24
 8005fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80a2 	beq.w	800611e <_vfiprintf_r+0x20e>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fe4:	f10a 0a01 	add.w	sl, sl, #1
 8005fe8:	9304      	str	r3, [sp, #16]
 8005fea:	9307      	str	r3, [sp, #28]
 8005fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ff2:	4654      	mov	r4, sl
 8005ff4:	2205      	movs	r2, #5
 8005ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffa:	4858      	ldr	r0, [pc, #352]	; (800615c <_vfiprintf_r+0x24c>)
 8005ffc:	f7fa f928 	bl	8000250 <memchr>
 8006000:	9a04      	ldr	r2, [sp, #16]
 8006002:	b9d8      	cbnz	r0, 800603c <_vfiprintf_r+0x12c>
 8006004:	06d1      	lsls	r1, r2, #27
 8006006:	bf44      	itt	mi
 8006008:	2320      	movmi	r3, #32
 800600a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800600e:	0713      	lsls	r3, r2, #28
 8006010:	bf44      	itt	mi
 8006012:	232b      	movmi	r3, #43	; 0x2b
 8006014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006018:	f89a 3000 	ldrb.w	r3, [sl]
 800601c:	2b2a      	cmp	r3, #42	; 0x2a
 800601e:	d015      	beq.n	800604c <_vfiprintf_r+0x13c>
 8006020:	9a07      	ldr	r2, [sp, #28]
 8006022:	4654      	mov	r4, sl
 8006024:	2000      	movs	r0, #0
 8006026:	f04f 0c0a 	mov.w	ip, #10
 800602a:	4621      	mov	r1, r4
 800602c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006030:	3b30      	subs	r3, #48	; 0x30
 8006032:	2b09      	cmp	r3, #9
 8006034:	d94e      	bls.n	80060d4 <_vfiprintf_r+0x1c4>
 8006036:	b1b0      	cbz	r0, 8006066 <_vfiprintf_r+0x156>
 8006038:	9207      	str	r2, [sp, #28]
 800603a:	e014      	b.n	8006066 <_vfiprintf_r+0x156>
 800603c:	eba0 0308 	sub.w	r3, r0, r8
 8006040:	fa09 f303 	lsl.w	r3, r9, r3
 8006044:	4313      	orrs	r3, r2
 8006046:	9304      	str	r3, [sp, #16]
 8006048:	46a2      	mov	sl, r4
 800604a:	e7d2      	b.n	8005ff2 <_vfiprintf_r+0xe2>
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	1d19      	adds	r1, r3, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	9103      	str	r1, [sp, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	bfbb      	ittet	lt
 8006058:	425b      	neglt	r3, r3
 800605a:	f042 0202 	orrlt.w	r2, r2, #2
 800605e:	9307      	strge	r3, [sp, #28]
 8006060:	9307      	strlt	r3, [sp, #28]
 8006062:	bfb8      	it	lt
 8006064:	9204      	strlt	r2, [sp, #16]
 8006066:	7823      	ldrb	r3, [r4, #0]
 8006068:	2b2e      	cmp	r3, #46	; 0x2e
 800606a:	d10c      	bne.n	8006086 <_vfiprintf_r+0x176>
 800606c:	7863      	ldrb	r3, [r4, #1]
 800606e:	2b2a      	cmp	r3, #42	; 0x2a
 8006070:	d135      	bne.n	80060de <_vfiprintf_r+0x1ce>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	1d1a      	adds	r2, r3, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	9203      	str	r2, [sp, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	bfb8      	it	lt
 800607e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006082:	3402      	adds	r4, #2
 8006084:	9305      	str	r3, [sp, #20]
 8006086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800616c <_vfiprintf_r+0x25c>
 800608a:	7821      	ldrb	r1, [r4, #0]
 800608c:	2203      	movs	r2, #3
 800608e:	4650      	mov	r0, sl
 8006090:	f7fa f8de 	bl	8000250 <memchr>
 8006094:	b140      	cbz	r0, 80060a8 <_vfiprintf_r+0x198>
 8006096:	2340      	movs	r3, #64	; 0x40
 8006098:	eba0 000a 	sub.w	r0, r0, sl
 800609c:	fa03 f000 	lsl.w	r0, r3, r0
 80060a0:	9b04      	ldr	r3, [sp, #16]
 80060a2:	4303      	orrs	r3, r0
 80060a4:	3401      	adds	r4, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ac:	482c      	ldr	r0, [pc, #176]	; (8006160 <_vfiprintf_r+0x250>)
 80060ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060b2:	2206      	movs	r2, #6
 80060b4:	f7fa f8cc 	bl	8000250 <memchr>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d03f      	beq.n	800613c <_vfiprintf_r+0x22c>
 80060bc:	4b29      	ldr	r3, [pc, #164]	; (8006164 <_vfiprintf_r+0x254>)
 80060be:	bb1b      	cbnz	r3, 8006108 <_vfiprintf_r+0x1f8>
 80060c0:	9b03      	ldr	r3, [sp, #12]
 80060c2:	3307      	adds	r3, #7
 80060c4:	f023 0307 	bic.w	r3, r3, #7
 80060c8:	3308      	adds	r3, #8
 80060ca:	9303      	str	r3, [sp, #12]
 80060cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ce:	443b      	add	r3, r7
 80060d0:	9309      	str	r3, [sp, #36]	; 0x24
 80060d2:	e767      	b.n	8005fa4 <_vfiprintf_r+0x94>
 80060d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80060d8:	460c      	mov	r4, r1
 80060da:	2001      	movs	r0, #1
 80060dc:	e7a5      	b.n	800602a <_vfiprintf_r+0x11a>
 80060de:	2300      	movs	r3, #0
 80060e0:	3401      	adds	r4, #1
 80060e2:	9305      	str	r3, [sp, #20]
 80060e4:	4619      	mov	r1, r3
 80060e6:	f04f 0c0a 	mov.w	ip, #10
 80060ea:	4620      	mov	r0, r4
 80060ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060f0:	3a30      	subs	r2, #48	; 0x30
 80060f2:	2a09      	cmp	r2, #9
 80060f4:	d903      	bls.n	80060fe <_vfiprintf_r+0x1ee>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0c5      	beq.n	8006086 <_vfiprintf_r+0x176>
 80060fa:	9105      	str	r1, [sp, #20]
 80060fc:	e7c3      	b.n	8006086 <_vfiprintf_r+0x176>
 80060fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006102:	4604      	mov	r4, r0
 8006104:	2301      	movs	r3, #1
 8006106:	e7f0      	b.n	80060ea <_vfiprintf_r+0x1da>
 8006108:	ab03      	add	r3, sp, #12
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	462a      	mov	r2, r5
 800610e:	4b16      	ldr	r3, [pc, #88]	; (8006168 <_vfiprintf_r+0x258>)
 8006110:	a904      	add	r1, sp, #16
 8006112:	4630      	mov	r0, r6
 8006114:	f3af 8000 	nop.w
 8006118:	4607      	mov	r7, r0
 800611a:	1c78      	adds	r0, r7, #1
 800611c:	d1d6      	bne.n	80060cc <_vfiprintf_r+0x1bc>
 800611e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006120:	07d9      	lsls	r1, r3, #31
 8006122:	d405      	bmi.n	8006130 <_vfiprintf_r+0x220>
 8006124:	89ab      	ldrh	r3, [r5, #12]
 8006126:	059a      	lsls	r2, r3, #22
 8006128:	d402      	bmi.n	8006130 <_vfiprintf_r+0x220>
 800612a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800612c:	f000 fc45 	bl	80069ba <__retarget_lock_release_recursive>
 8006130:	89ab      	ldrh	r3, [r5, #12]
 8006132:	065b      	lsls	r3, r3, #25
 8006134:	f53f af12 	bmi.w	8005f5c <_vfiprintf_r+0x4c>
 8006138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800613a:	e711      	b.n	8005f60 <_vfiprintf_r+0x50>
 800613c:	ab03      	add	r3, sp, #12
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	462a      	mov	r2, r5
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <_vfiprintf_r+0x258>)
 8006144:	a904      	add	r1, sp, #16
 8006146:	4630      	mov	r0, r6
 8006148:	f000 f880 	bl	800624c <_printf_i>
 800614c:	e7e4      	b.n	8006118 <_vfiprintf_r+0x208>
 800614e:	bf00      	nop
 8006150:	08006e94 	.word	0x08006e94
 8006154:	08006eb4 	.word	0x08006eb4
 8006158:	08006e74 	.word	0x08006e74
 800615c:	08006e40 	.word	0x08006e40
 8006160:	08006e4a 	.word	0x08006e4a
 8006164:	00000000 	.word	0x00000000
 8006168:	08005eeb 	.word	0x08005eeb
 800616c:	08006e46 	.word	0x08006e46

08006170 <_printf_common>:
 8006170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	4616      	mov	r6, r2
 8006176:	4699      	mov	r9, r3
 8006178:	688a      	ldr	r2, [r1, #8]
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006180:	4293      	cmp	r3, r2
 8006182:	bfb8      	it	lt
 8006184:	4613      	movlt	r3, r2
 8006186:	6033      	str	r3, [r6, #0]
 8006188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800618c:	4607      	mov	r7, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b10a      	cbz	r2, 8006196 <_printf_common+0x26>
 8006192:	3301      	adds	r3, #1
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	0699      	lsls	r1, r3, #26
 800619a:	bf42      	ittt	mi
 800619c:	6833      	ldrmi	r3, [r6, #0]
 800619e:	3302      	addmi	r3, #2
 80061a0:	6033      	strmi	r3, [r6, #0]
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	f015 0506 	ands.w	r5, r5, #6
 80061a8:	d106      	bne.n	80061b8 <_printf_common+0x48>
 80061aa:	f104 0a19 	add.w	sl, r4, #25
 80061ae:	68e3      	ldr	r3, [r4, #12]
 80061b0:	6832      	ldr	r2, [r6, #0]
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	dc26      	bgt.n	8006206 <_printf_common+0x96>
 80061b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061bc:	1e13      	subs	r3, r2, #0
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	bf18      	it	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	0692      	lsls	r2, r2, #26
 80061c6:	d42b      	bmi.n	8006220 <_printf_common+0xb0>
 80061c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061cc:	4649      	mov	r1, r9
 80061ce:	4638      	mov	r0, r7
 80061d0:	47c0      	blx	r8
 80061d2:	3001      	adds	r0, #1
 80061d4:	d01e      	beq.n	8006214 <_printf_common+0xa4>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	68e5      	ldr	r5, [r4, #12]
 80061da:	6832      	ldr	r2, [r6, #0]
 80061dc:	f003 0306 	and.w	r3, r3, #6
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	bf08      	it	eq
 80061e4:	1aad      	subeq	r5, r5, r2
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	6922      	ldr	r2, [r4, #16]
 80061ea:	bf0c      	ite	eq
 80061ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061f0:	2500      	movne	r5, #0
 80061f2:	4293      	cmp	r3, r2
 80061f4:	bfc4      	itt	gt
 80061f6:	1a9b      	subgt	r3, r3, r2
 80061f8:	18ed      	addgt	r5, r5, r3
 80061fa:	2600      	movs	r6, #0
 80061fc:	341a      	adds	r4, #26
 80061fe:	42b5      	cmp	r5, r6
 8006200:	d11a      	bne.n	8006238 <_printf_common+0xc8>
 8006202:	2000      	movs	r0, #0
 8006204:	e008      	b.n	8006218 <_printf_common+0xa8>
 8006206:	2301      	movs	r3, #1
 8006208:	4652      	mov	r2, sl
 800620a:	4649      	mov	r1, r9
 800620c:	4638      	mov	r0, r7
 800620e:	47c0      	blx	r8
 8006210:	3001      	adds	r0, #1
 8006212:	d103      	bne.n	800621c <_printf_common+0xac>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621c:	3501      	adds	r5, #1
 800621e:	e7c6      	b.n	80061ae <_printf_common+0x3e>
 8006220:	18e1      	adds	r1, r4, r3
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	2030      	movs	r0, #48	; 0x30
 8006226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800622a:	4422      	add	r2, r4
 800622c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006234:	3302      	adds	r3, #2
 8006236:	e7c7      	b.n	80061c8 <_printf_common+0x58>
 8006238:	2301      	movs	r3, #1
 800623a:	4622      	mov	r2, r4
 800623c:	4649      	mov	r1, r9
 800623e:	4638      	mov	r0, r7
 8006240:	47c0      	blx	r8
 8006242:	3001      	adds	r0, #1
 8006244:	d0e6      	beq.n	8006214 <_printf_common+0xa4>
 8006246:	3601      	adds	r6, #1
 8006248:	e7d9      	b.n	80061fe <_printf_common+0x8e>
	...

0800624c <_printf_i>:
 800624c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006250:	7e0f      	ldrb	r7, [r1, #24]
 8006252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006254:	2f78      	cmp	r7, #120	; 0x78
 8006256:	4691      	mov	r9, r2
 8006258:	4680      	mov	r8, r0
 800625a:	460c      	mov	r4, r1
 800625c:	469a      	mov	sl, r3
 800625e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006262:	d807      	bhi.n	8006274 <_printf_i+0x28>
 8006264:	2f62      	cmp	r7, #98	; 0x62
 8006266:	d80a      	bhi.n	800627e <_printf_i+0x32>
 8006268:	2f00      	cmp	r7, #0
 800626a:	f000 80d8 	beq.w	800641e <_printf_i+0x1d2>
 800626e:	2f58      	cmp	r7, #88	; 0x58
 8006270:	f000 80a3 	beq.w	80063ba <_printf_i+0x16e>
 8006274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800627c:	e03a      	b.n	80062f4 <_printf_i+0xa8>
 800627e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006282:	2b15      	cmp	r3, #21
 8006284:	d8f6      	bhi.n	8006274 <_printf_i+0x28>
 8006286:	a101      	add	r1, pc, #4	; (adr r1, 800628c <_printf_i+0x40>)
 8006288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062f9 	.word	0x080062f9
 8006294:	08006275 	.word	0x08006275
 8006298:	08006275 	.word	0x08006275
 800629c:	08006275 	.word	0x08006275
 80062a0:	08006275 	.word	0x08006275
 80062a4:	080062f9 	.word	0x080062f9
 80062a8:	08006275 	.word	0x08006275
 80062ac:	08006275 	.word	0x08006275
 80062b0:	08006275 	.word	0x08006275
 80062b4:	08006275 	.word	0x08006275
 80062b8:	08006405 	.word	0x08006405
 80062bc:	08006329 	.word	0x08006329
 80062c0:	080063e7 	.word	0x080063e7
 80062c4:	08006275 	.word	0x08006275
 80062c8:	08006275 	.word	0x08006275
 80062cc:	08006427 	.word	0x08006427
 80062d0:	08006275 	.word	0x08006275
 80062d4:	08006329 	.word	0x08006329
 80062d8:	08006275 	.word	0x08006275
 80062dc:	08006275 	.word	0x08006275
 80062e0:	080063ef 	.word	0x080063ef
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	1d1a      	adds	r2, r3, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	602a      	str	r2, [r5, #0]
 80062ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0a3      	b.n	8006440 <_printf_i+0x1f4>
 80062f8:	6820      	ldr	r0, [r4, #0]
 80062fa:	6829      	ldr	r1, [r5, #0]
 80062fc:	0606      	lsls	r6, r0, #24
 80062fe:	f101 0304 	add.w	r3, r1, #4
 8006302:	d50a      	bpl.n	800631a <_printf_i+0xce>
 8006304:	680e      	ldr	r6, [r1, #0]
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	2e00      	cmp	r6, #0
 800630a:	da03      	bge.n	8006314 <_printf_i+0xc8>
 800630c:	232d      	movs	r3, #45	; 0x2d
 800630e:	4276      	negs	r6, r6
 8006310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006314:	485e      	ldr	r0, [pc, #376]	; (8006490 <_printf_i+0x244>)
 8006316:	230a      	movs	r3, #10
 8006318:	e019      	b.n	800634e <_printf_i+0x102>
 800631a:	680e      	ldr	r6, [r1, #0]
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006322:	bf18      	it	ne
 8006324:	b236      	sxthne	r6, r6
 8006326:	e7ef      	b.n	8006308 <_printf_i+0xbc>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	6820      	ldr	r0, [r4, #0]
 800632c:	1d19      	adds	r1, r3, #4
 800632e:	6029      	str	r1, [r5, #0]
 8006330:	0601      	lsls	r1, r0, #24
 8006332:	d501      	bpl.n	8006338 <_printf_i+0xec>
 8006334:	681e      	ldr	r6, [r3, #0]
 8006336:	e002      	b.n	800633e <_printf_i+0xf2>
 8006338:	0646      	lsls	r6, r0, #25
 800633a:	d5fb      	bpl.n	8006334 <_printf_i+0xe8>
 800633c:	881e      	ldrh	r6, [r3, #0]
 800633e:	4854      	ldr	r0, [pc, #336]	; (8006490 <_printf_i+0x244>)
 8006340:	2f6f      	cmp	r7, #111	; 0x6f
 8006342:	bf0c      	ite	eq
 8006344:	2308      	moveq	r3, #8
 8006346:	230a      	movne	r3, #10
 8006348:	2100      	movs	r1, #0
 800634a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800634e:	6865      	ldr	r5, [r4, #4]
 8006350:	60a5      	str	r5, [r4, #8]
 8006352:	2d00      	cmp	r5, #0
 8006354:	bfa2      	ittt	ge
 8006356:	6821      	ldrge	r1, [r4, #0]
 8006358:	f021 0104 	bicge.w	r1, r1, #4
 800635c:	6021      	strge	r1, [r4, #0]
 800635e:	b90e      	cbnz	r6, 8006364 <_printf_i+0x118>
 8006360:	2d00      	cmp	r5, #0
 8006362:	d04d      	beq.n	8006400 <_printf_i+0x1b4>
 8006364:	4615      	mov	r5, r2
 8006366:	fbb6 f1f3 	udiv	r1, r6, r3
 800636a:	fb03 6711 	mls	r7, r3, r1, r6
 800636e:	5dc7      	ldrb	r7, [r0, r7]
 8006370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006374:	4637      	mov	r7, r6
 8006376:	42bb      	cmp	r3, r7
 8006378:	460e      	mov	r6, r1
 800637a:	d9f4      	bls.n	8006366 <_printf_i+0x11a>
 800637c:	2b08      	cmp	r3, #8
 800637e:	d10b      	bne.n	8006398 <_printf_i+0x14c>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	07de      	lsls	r6, r3, #31
 8006384:	d508      	bpl.n	8006398 <_printf_i+0x14c>
 8006386:	6923      	ldr	r3, [r4, #16]
 8006388:	6861      	ldr	r1, [r4, #4]
 800638a:	4299      	cmp	r1, r3
 800638c:	bfde      	ittt	le
 800638e:	2330      	movle	r3, #48	; 0x30
 8006390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006394:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006398:	1b52      	subs	r2, r2, r5
 800639a:	6122      	str	r2, [r4, #16]
 800639c:	f8cd a000 	str.w	sl, [sp]
 80063a0:	464b      	mov	r3, r9
 80063a2:	aa03      	add	r2, sp, #12
 80063a4:	4621      	mov	r1, r4
 80063a6:	4640      	mov	r0, r8
 80063a8:	f7ff fee2 	bl	8006170 <_printf_common>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d14c      	bne.n	800644a <_printf_i+0x1fe>
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	b004      	add	sp, #16
 80063b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ba:	4835      	ldr	r0, [pc, #212]	; (8006490 <_printf_i+0x244>)
 80063bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063c0:	6829      	ldr	r1, [r5, #0]
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80063c8:	6029      	str	r1, [r5, #0]
 80063ca:	061d      	lsls	r5, r3, #24
 80063cc:	d514      	bpl.n	80063f8 <_printf_i+0x1ac>
 80063ce:	07df      	lsls	r7, r3, #31
 80063d0:	bf44      	itt	mi
 80063d2:	f043 0320 	orrmi.w	r3, r3, #32
 80063d6:	6023      	strmi	r3, [r4, #0]
 80063d8:	b91e      	cbnz	r6, 80063e2 <_printf_i+0x196>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	f023 0320 	bic.w	r3, r3, #32
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	2310      	movs	r3, #16
 80063e4:	e7b0      	b.n	8006348 <_printf_i+0xfc>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	f043 0320 	orr.w	r3, r3, #32
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	2378      	movs	r3, #120	; 0x78
 80063f0:	4828      	ldr	r0, [pc, #160]	; (8006494 <_printf_i+0x248>)
 80063f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063f6:	e7e3      	b.n	80063c0 <_printf_i+0x174>
 80063f8:	0659      	lsls	r1, r3, #25
 80063fa:	bf48      	it	mi
 80063fc:	b2b6      	uxthmi	r6, r6
 80063fe:	e7e6      	b.n	80063ce <_printf_i+0x182>
 8006400:	4615      	mov	r5, r2
 8006402:	e7bb      	b.n	800637c <_printf_i+0x130>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	6826      	ldr	r6, [r4, #0]
 8006408:	6961      	ldr	r1, [r4, #20]
 800640a:	1d18      	adds	r0, r3, #4
 800640c:	6028      	str	r0, [r5, #0]
 800640e:	0635      	lsls	r5, r6, #24
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	d501      	bpl.n	8006418 <_printf_i+0x1cc>
 8006414:	6019      	str	r1, [r3, #0]
 8006416:	e002      	b.n	800641e <_printf_i+0x1d2>
 8006418:	0670      	lsls	r0, r6, #25
 800641a:	d5fb      	bpl.n	8006414 <_printf_i+0x1c8>
 800641c:	8019      	strh	r1, [r3, #0]
 800641e:	2300      	movs	r3, #0
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	4615      	mov	r5, r2
 8006424:	e7ba      	b.n	800639c <_printf_i+0x150>
 8006426:	682b      	ldr	r3, [r5, #0]
 8006428:	1d1a      	adds	r2, r3, #4
 800642a:	602a      	str	r2, [r5, #0]
 800642c:	681d      	ldr	r5, [r3, #0]
 800642e:	6862      	ldr	r2, [r4, #4]
 8006430:	2100      	movs	r1, #0
 8006432:	4628      	mov	r0, r5
 8006434:	f7f9 ff0c 	bl	8000250 <memchr>
 8006438:	b108      	cbz	r0, 800643e <_printf_i+0x1f2>
 800643a:	1b40      	subs	r0, r0, r5
 800643c:	6060      	str	r0, [r4, #4]
 800643e:	6863      	ldr	r3, [r4, #4]
 8006440:	6123      	str	r3, [r4, #16]
 8006442:	2300      	movs	r3, #0
 8006444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006448:	e7a8      	b.n	800639c <_printf_i+0x150>
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	462a      	mov	r2, r5
 800644e:	4649      	mov	r1, r9
 8006450:	4640      	mov	r0, r8
 8006452:	47d0      	blx	sl
 8006454:	3001      	adds	r0, #1
 8006456:	d0ab      	beq.n	80063b0 <_printf_i+0x164>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	079b      	lsls	r3, r3, #30
 800645c:	d413      	bmi.n	8006486 <_printf_i+0x23a>
 800645e:	68e0      	ldr	r0, [r4, #12]
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	4298      	cmp	r0, r3
 8006464:	bfb8      	it	lt
 8006466:	4618      	movlt	r0, r3
 8006468:	e7a4      	b.n	80063b4 <_printf_i+0x168>
 800646a:	2301      	movs	r3, #1
 800646c:	4632      	mov	r2, r6
 800646e:	4649      	mov	r1, r9
 8006470:	4640      	mov	r0, r8
 8006472:	47d0      	blx	sl
 8006474:	3001      	adds	r0, #1
 8006476:	d09b      	beq.n	80063b0 <_printf_i+0x164>
 8006478:	3501      	adds	r5, #1
 800647a:	68e3      	ldr	r3, [r4, #12]
 800647c:	9903      	ldr	r1, [sp, #12]
 800647e:	1a5b      	subs	r3, r3, r1
 8006480:	42ab      	cmp	r3, r5
 8006482:	dcf2      	bgt.n	800646a <_printf_i+0x21e>
 8006484:	e7eb      	b.n	800645e <_printf_i+0x212>
 8006486:	2500      	movs	r5, #0
 8006488:	f104 0619 	add.w	r6, r4, #25
 800648c:	e7f5      	b.n	800647a <_printf_i+0x22e>
 800648e:	bf00      	nop
 8006490:	08006e51 	.word	0x08006e51
 8006494:	08006e62 	.word	0x08006e62

08006498 <_sbrk_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d06      	ldr	r5, [pc, #24]	; (80064b4 <_sbrk_r+0x1c>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	f7fa fbc4 	bl	8000c30 <_sbrk>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_sbrk_r+0x1a>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_sbrk_r+0x1a>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	2000025c 	.word	0x2000025c

080064b8 <__swbuf_r>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	460e      	mov	r6, r1
 80064bc:	4614      	mov	r4, r2
 80064be:	4605      	mov	r5, r0
 80064c0:	b118      	cbz	r0, 80064ca <__swbuf_r+0x12>
 80064c2:	6983      	ldr	r3, [r0, #24]
 80064c4:	b90b      	cbnz	r3, 80064ca <__swbuf_r+0x12>
 80064c6:	f000 f9d9 	bl	800687c <__sinit>
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <__swbuf_r+0x98>)
 80064cc:	429c      	cmp	r4, r3
 80064ce:	d12b      	bne.n	8006528 <__swbuf_r+0x70>
 80064d0:	686c      	ldr	r4, [r5, #4]
 80064d2:	69a3      	ldr	r3, [r4, #24]
 80064d4:	60a3      	str	r3, [r4, #8]
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	071a      	lsls	r2, r3, #28
 80064da:	d52f      	bpl.n	800653c <__swbuf_r+0x84>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	b36b      	cbz	r3, 800653c <__swbuf_r+0x84>
 80064e0:	6923      	ldr	r3, [r4, #16]
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	1ac0      	subs	r0, r0, r3
 80064e6:	6963      	ldr	r3, [r4, #20]
 80064e8:	b2f6      	uxtb	r6, r6
 80064ea:	4283      	cmp	r3, r0
 80064ec:	4637      	mov	r7, r6
 80064ee:	dc04      	bgt.n	80064fa <__swbuf_r+0x42>
 80064f0:	4621      	mov	r1, r4
 80064f2:	4628      	mov	r0, r5
 80064f4:	f000 f92e 	bl	8006754 <_fflush_r>
 80064f8:	bb30      	cbnz	r0, 8006548 <__swbuf_r+0x90>
 80064fa:	68a3      	ldr	r3, [r4, #8]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	60a3      	str	r3, [r4, #8]
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	6022      	str	r2, [r4, #0]
 8006506:	701e      	strb	r6, [r3, #0]
 8006508:	6963      	ldr	r3, [r4, #20]
 800650a:	3001      	adds	r0, #1
 800650c:	4283      	cmp	r3, r0
 800650e:	d004      	beq.n	800651a <__swbuf_r+0x62>
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	07db      	lsls	r3, r3, #31
 8006514:	d506      	bpl.n	8006524 <__swbuf_r+0x6c>
 8006516:	2e0a      	cmp	r6, #10
 8006518:	d104      	bne.n	8006524 <__swbuf_r+0x6c>
 800651a:	4621      	mov	r1, r4
 800651c:	4628      	mov	r0, r5
 800651e:	f000 f919 	bl	8006754 <_fflush_r>
 8006522:	b988      	cbnz	r0, 8006548 <__swbuf_r+0x90>
 8006524:	4638      	mov	r0, r7
 8006526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <__swbuf_r+0x9c>)
 800652a:	429c      	cmp	r4, r3
 800652c:	d101      	bne.n	8006532 <__swbuf_r+0x7a>
 800652e:	68ac      	ldr	r4, [r5, #8]
 8006530:	e7cf      	b.n	80064d2 <__swbuf_r+0x1a>
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <__swbuf_r+0xa0>)
 8006534:	429c      	cmp	r4, r3
 8006536:	bf08      	it	eq
 8006538:	68ec      	ldreq	r4, [r5, #12]
 800653a:	e7ca      	b.n	80064d2 <__swbuf_r+0x1a>
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f80c 	bl	800655c <__swsetup_r>
 8006544:	2800      	cmp	r0, #0
 8006546:	d0cb      	beq.n	80064e0 <__swbuf_r+0x28>
 8006548:	f04f 37ff 	mov.w	r7, #4294967295
 800654c:	e7ea      	b.n	8006524 <__swbuf_r+0x6c>
 800654e:	bf00      	nop
 8006550:	08006e94 	.word	0x08006e94
 8006554:	08006eb4 	.word	0x08006eb4
 8006558:	08006e74 	.word	0x08006e74

0800655c <__swsetup_r>:
 800655c:	4b32      	ldr	r3, [pc, #200]	; (8006628 <__swsetup_r+0xcc>)
 800655e:	b570      	push	{r4, r5, r6, lr}
 8006560:	681d      	ldr	r5, [r3, #0]
 8006562:	4606      	mov	r6, r0
 8006564:	460c      	mov	r4, r1
 8006566:	b125      	cbz	r5, 8006572 <__swsetup_r+0x16>
 8006568:	69ab      	ldr	r3, [r5, #24]
 800656a:	b913      	cbnz	r3, 8006572 <__swsetup_r+0x16>
 800656c:	4628      	mov	r0, r5
 800656e:	f000 f985 	bl	800687c <__sinit>
 8006572:	4b2e      	ldr	r3, [pc, #184]	; (800662c <__swsetup_r+0xd0>)
 8006574:	429c      	cmp	r4, r3
 8006576:	d10f      	bne.n	8006598 <__swsetup_r+0x3c>
 8006578:	686c      	ldr	r4, [r5, #4]
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006580:	0719      	lsls	r1, r3, #28
 8006582:	d42c      	bmi.n	80065de <__swsetup_r+0x82>
 8006584:	06dd      	lsls	r5, r3, #27
 8006586:	d411      	bmi.n	80065ac <__swsetup_r+0x50>
 8006588:	2309      	movs	r3, #9
 800658a:	6033      	str	r3, [r6, #0]
 800658c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	f04f 30ff 	mov.w	r0, #4294967295
 8006596:	e03e      	b.n	8006616 <__swsetup_r+0xba>
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <__swsetup_r+0xd4>)
 800659a:	429c      	cmp	r4, r3
 800659c:	d101      	bne.n	80065a2 <__swsetup_r+0x46>
 800659e:	68ac      	ldr	r4, [r5, #8]
 80065a0:	e7eb      	b.n	800657a <__swsetup_r+0x1e>
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <__swsetup_r+0xd8>)
 80065a4:	429c      	cmp	r4, r3
 80065a6:	bf08      	it	eq
 80065a8:	68ec      	ldreq	r4, [r5, #12]
 80065aa:	e7e6      	b.n	800657a <__swsetup_r+0x1e>
 80065ac:	0758      	lsls	r0, r3, #29
 80065ae:	d512      	bpl.n	80065d6 <__swsetup_r+0x7a>
 80065b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065b2:	b141      	cbz	r1, 80065c6 <__swsetup_r+0x6a>
 80065b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065b8:	4299      	cmp	r1, r3
 80065ba:	d002      	beq.n	80065c2 <__swsetup_r+0x66>
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff fb9d 	bl	8005cfc <_free_r>
 80065c2:	2300      	movs	r3, #0
 80065c4:	6363      	str	r3, [r4, #52]	; 0x34
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	2300      	movs	r3, #0
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f043 0308 	orr.w	r3, r3, #8
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	b94b      	cbnz	r3, 80065f6 <__swsetup_r+0x9a>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d003      	beq.n	80065f6 <__swsetup_r+0x9a>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 fa09 	bl	8006a08 <__smakebuf_r>
 80065f6:	89a0      	ldrh	r0, [r4, #12]
 80065f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065fc:	f010 0301 	ands.w	r3, r0, #1
 8006600:	d00a      	beq.n	8006618 <__swsetup_r+0xbc>
 8006602:	2300      	movs	r3, #0
 8006604:	60a3      	str	r3, [r4, #8]
 8006606:	6963      	ldr	r3, [r4, #20]
 8006608:	425b      	negs	r3, r3
 800660a:	61a3      	str	r3, [r4, #24]
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	b943      	cbnz	r3, 8006622 <__swsetup_r+0xc6>
 8006610:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006614:	d1ba      	bne.n	800658c <__swsetup_r+0x30>
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	0781      	lsls	r1, r0, #30
 800661a:	bf58      	it	pl
 800661c:	6963      	ldrpl	r3, [r4, #20]
 800661e:	60a3      	str	r3, [r4, #8]
 8006620:	e7f4      	b.n	800660c <__swsetup_r+0xb0>
 8006622:	2000      	movs	r0, #0
 8006624:	e7f7      	b.n	8006616 <__swsetup_r+0xba>
 8006626:	bf00      	nop
 8006628:	200000a4 	.word	0x200000a4
 800662c:	08006e94 	.word	0x08006e94
 8006630:	08006eb4 	.word	0x08006eb4
 8006634:	08006e74 	.word	0x08006e74

08006638 <abort>:
 8006638:	b508      	push	{r3, lr}
 800663a:	2006      	movs	r0, #6
 800663c:	f000 fa58 	bl	8006af0 <raise>
 8006640:	2001      	movs	r0, #1
 8006642:	f7fa fa7d 	bl	8000b40 <_exit>
	...

08006648 <__sflush_r>:
 8006648:	898a      	ldrh	r2, [r1, #12]
 800664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	4605      	mov	r5, r0
 8006650:	0710      	lsls	r0, r2, #28
 8006652:	460c      	mov	r4, r1
 8006654:	d458      	bmi.n	8006708 <__sflush_r+0xc0>
 8006656:	684b      	ldr	r3, [r1, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	dc05      	bgt.n	8006668 <__sflush_r+0x20>
 800665c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	dc02      	bgt.n	8006668 <__sflush_r+0x20>
 8006662:	2000      	movs	r0, #0
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800666a:	2e00      	cmp	r6, #0
 800666c:	d0f9      	beq.n	8006662 <__sflush_r+0x1a>
 800666e:	2300      	movs	r3, #0
 8006670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006674:	682f      	ldr	r7, [r5, #0]
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	d032      	beq.n	80066e0 <__sflush_r+0x98>
 800667a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	075a      	lsls	r2, r3, #29
 8006680:	d505      	bpl.n	800668e <__sflush_r+0x46>
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	1ac0      	subs	r0, r0, r3
 8006686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006688:	b10b      	cbz	r3, 800668e <__sflush_r+0x46>
 800668a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800668c:	1ac0      	subs	r0, r0, r3
 800668e:	2300      	movs	r3, #0
 8006690:	4602      	mov	r2, r0
 8006692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006694:	6a21      	ldr	r1, [r4, #32]
 8006696:	4628      	mov	r0, r5
 8006698:	47b0      	blx	r6
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	d106      	bne.n	80066ae <__sflush_r+0x66>
 80066a0:	6829      	ldr	r1, [r5, #0]
 80066a2:	291d      	cmp	r1, #29
 80066a4:	d82c      	bhi.n	8006700 <__sflush_r+0xb8>
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <__sflush_r+0x108>)
 80066a8:	40ca      	lsrs	r2, r1
 80066aa:	07d6      	lsls	r6, r2, #31
 80066ac:	d528      	bpl.n	8006700 <__sflush_r+0xb8>
 80066ae:	2200      	movs	r2, #0
 80066b0:	6062      	str	r2, [r4, #4]
 80066b2:	04d9      	lsls	r1, r3, #19
 80066b4:	6922      	ldr	r2, [r4, #16]
 80066b6:	6022      	str	r2, [r4, #0]
 80066b8:	d504      	bpl.n	80066c4 <__sflush_r+0x7c>
 80066ba:	1c42      	adds	r2, r0, #1
 80066bc:	d101      	bne.n	80066c2 <__sflush_r+0x7a>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b903      	cbnz	r3, 80066c4 <__sflush_r+0x7c>
 80066c2:	6560      	str	r0, [r4, #84]	; 0x54
 80066c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066c6:	602f      	str	r7, [r5, #0]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d0ca      	beq.n	8006662 <__sflush_r+0x1a>
 80066cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066d0:	4299      	cmp	r1, r3
 80066d2:	d002      	beq.n	80066da <__sflush_r+0x92>
 80066d4:	4628      	mov	r0, r5
 80066d6:	f7ff fb11 	bl	8005cfc <_free_r>
 80066da:	2000      	movs	r0, #0
 80066dc:	6360      	str	r0, [r4, #52]	; 0x34
 80066de:	e7c1      	b.n	8006664 <__sflush_r+0x1c>
 80066e0:	6a21      	ldr	r1, [r4, #32]
 80066e2:	2301      	movs	r3, #1
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b0      	blx	r6
 80066e8:	1c41      	adds	r1, r0, #1
 80066ea:	d1c7      	bne.n	800667c <__sflush_r+0x34>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c4      	beq.n	800667c <__sflush_r+0x34>
 80066f2:	2b1d      	cmp	r3, #29
 80066f4:	d001      	beq.n	80066fa <__sflush_r+0xb2>
 80066f6:	2b16      	cmp	r3, #22
 80066f8:	d101      	bne.n	80066fe <__sflush_r+0xb6>
 80066fa:	602f      	str	r7, [r5, #0]
 80066fc:	e7b1      	b.n	8006662 <__sflush_r+0x1a>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	e7ad      	b.n	8006664 <__sflush_r+0x1c>
 8006708:	690f      	ldr	r7, [r1, #16]
 800670a:	2f00      	cmp	r7, #0
 800670c:	d0a9      	beq.n	8006662 <__sflush_r+0x1a>
 800670e:	0793      	lsls	r3, r2, #30
 8006710:	680e      	ldr	r6, [r1, #0]
 8006712:	bf08      	it	eq
 8006714:	694b      	ldreq	r3, [r1, #20]
 8006716:	600f      	str	r7, [r1, #0]
 8006718:	bf18      	it	ne
 800671a:	2300      	movne	r3, #0
 800671c:	eba6 0807 	sub.w	r8, r6, r7
 8006720:	608b      	str	r3, [r1, #8]
 8006722:	f1b8 0f00 	cmp.w	r8, #0
 8006726:	dd9c      	ble.n	8006662 <__sflush_r+0x1a>
 8006728:	6a21      	ldr	r1, [r4, #32]
 800672a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800672c:	4643      	mov	r3, r8
 800672e:	463a      	mov	r2, r7
 8006730:	4628      	mov	r0, r5
 8006732:	47b0      	blx	r6
 8006734:	2800      	cmp	r0, #0
 8006736:	dc06      	bgt.n	8006746 <__sflush_r+0xfe>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	e78e      	b.n	8006664 <__sflush_r+0x1c>
 8006746:	4407      	add	r7, r0
 8006748:	eba8 0800 	sub.w	r8, r8, r0
 800674c:	e7e9      	b.n	8006722 <__sflush_r+0xda>
 800674e:	bf00      	nop
 8006750:	20400001 	.word	0x20400001

08006754 <_fflush_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	4605      	mov	r5, r0
 800675a:	460c      	mov	r4, r1
 800675c:	b913      	cbnz	r3, 8006764 <_fflush_r+0x10>
 800675e:	2500      	movs	r5, #0
 8006760:	4628      	mov	r0, r5
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	b118      	cbz	r0, 800676e <_fflush_r+0x1a>
 8006766:	6983      	ldr	r3, [r0, #24]
 8006768:	b90b      	cbnz	r3, 800676e <_fflush_r+0x1a>
 800676a:	f000 f887 	bl	800687c <__sinit>
 800676e:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <_fflush_r+0x6c>)
 8006770:	429c      	cmp	r4, r3
 8006772:	d11b      	bne.n	80067ac <_fflush_r+0x58>
 8006774:	686c      	ldr	r4, [r5, #4]
 8006776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0ef      	beq.n	800675e <_fflush_r+0xa>
 800677e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006780:	07d0      	lsls	r0, r2, #31
 8006782:	d404      	bmi.n	800678e <_fflush_r+0x3a>
 8006784:	0599      	lsls	r1, r3, #22
 8006786:	d402      	bmi.n	800678e <_fflush_r+0x3a>
 8006788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678a:	f000 f915 	bl	80069b8 <__retarget_lock_acquire_recursive>
 800678e:	4628      	mov	r0, r5
 8006790:	4621      	mov	r1, r4
 8006792:	f7ff ff59 	bl	8006648 <__sflush_r>
 8006796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006798:	07da      	lsls	r2, r3, #31
 800679a:	4605      	mov	r5, r0
 800679c:	d4e0      	bmi.n	8006760 <_fflush_r+0xc>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	059b      	lsls	r3, r3, #22
 80067a2:	d4dd      	bmi.n	8006760 <_fflush_r+0xc>
 80067a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a6:	f000 f908 	bl	80069ba <__retarget_lock_release_recursive>
 80067aa:	e7d9      	b.n	8006760 <_fflush_r+0xc>
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <_fflush_r+0x70>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d101      	bne.n	80067b6 <_fflush_r+0x62>
 80067b2:	68ac      	ldr	r4, [r5, #8]
 80067b4:	e7df      	b.n	8006776 <_fflush_r+0x22>
 80067b6:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <_fflush_r+0x74>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	bf08      	it	eq
 80067bc:	68ec      	ldreq	r4, [r5, #12]
 80067be:	e7da      	b.n	8006776 <_fflush_r+0x22>
 80067c0:	08006e94 	.word	0x08006e94
 80067c4:	08006eb4 	.word	0x08006eb4
 80067c8:	08006e74 	.word	0x08006e74

080067cc <std>:
 80067cc:	2300      	movs	r3, #0
 80067ce:	b510      	push	{r4, lr}
 80067d0:	4604      	mov	r4, r0
 80067d2:	e9c0 3300 	strd	r3, r3, [r0]
 80067d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067da:	6083      	str	r3, [r0, #8]
 80067dc:	8181      	strh	r1, [r0, #12]
 80067de:	6643      	str	r3, [r0, #100]	; 0x64
 80067e0:	81c2      	strh	r2, [r0, #14]
 80067e2:	6183      	str	r3, [r0, #24]
 80067e4:	4619      	mov	r1, r3
 80067e6:	2208      	movs	r2, #8
 80067e8:	305c      	adds	r0, #92	; 0x5c
 80067ea:	f7ff f9eb 	bl	8005bc4 <memset>
 80067ee:	4b05      	ldr	r3, [pc, #20]	; (8006804 <std+0x38>)
 80067f0:	6263      	str	r3, [r4, #36]	; 0x24
 80067f2:	4b05      	ldr	r3, [pc, #20]	; (8006808 <std+0x3c>)
 80067f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80067f6:	4b05      	ldr	r3, [pc, #20]	; (800680c <std+0x40>)
 80067f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <std+0x44>)
 80067fc:	6224      	str	r4, [r4, #32]
 80067fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006800:	bd10      	pop	{r4, pc}
 8006802:	bf00      	nop
 8006804:	08006b29 	.word	0x08006b29
 8006808:	08006b4b 	.word	0x08006b4b
 800680c:	08006b83 	.word	0x08006b83
 8006810:	08006ba7 	.word	0x08006ba7

08006814 <_cleanup_r>:
 8006814:	4901      	ldr	r1, [pc, #4]	; (800681c <_cleanup_r+0x8>)
 8006816:	f000 b8af 	b.w	8006978 <_fwalk_reent>
 800681a:	bf00      	nop
 800681c:	08006755 	.word	0x08006755

08006820 <__sfmoreglue>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	2268      	movs	r2, #104	; 0x68
 8006824:	1e4d      	subs	r5, r1, #1
 8006826:	4355      	muls	r5, r2
 8006828:	460e      	mov	r6, r1
 800682a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800682e:	f7ff fad1 	bl	8005dd4 <_malloc_r>
 8006832:	4604      	mov	r4, r0
 8006834:	b140      	cbz	r0, 8006848 <__sfmoreglue+0x28>
 8006836:	2100      	movs	r1, #0
 8006838:	e9c0 1600 	strd	r1, r6, [r0]
 800683c:	300c      	adds	r0, #12
 800683e:	60a0      	str	r0, [r4, #8]
 8006840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006844:	f7ff f9be 	bl	8005bc4 <memset>
 8006848:	4620      	mov	r0, r4
 800684a:	bd70      	pop	{r4, r5, r6, pc}

0800684c <__sfp_lock_acquire>:
 800684c:	4801      	ldr	r0, [pc, #4]	; (8006854 <__sfp_lock_acquire+0x8>)
 800684e:	f000 b8b3 	b.w	80069b8 <__retarget_lock_acquire_recursive>
 8006852:	bf00      	nop
 8006854:	20000259 	.word	0x20000259

08006858 <__sfp_lock_release>:
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <__sfp_lock_release+0x8>)
 800685a:	f000 b8ae 	b.w	80069ba <__retarget_lock_release_recursive>
 800685e:	bf00      	nop
 8006860:	20000259 	.word	0x20000259

08006864 <__sinit_lock_acquire>:
 8006864:	4801      	ldr	r0, [pc, #4]	; (800686c <__sinit_lock_acquire+0x8>)
 8006866:	f000 b8a7 	b.w	80069b8 <__retarget_lock_acquire_recursive>
 800686a:	bf00      	nop
 800686c:	2000025a 	.word	0x2000025a

08006870 <__sinit_lock_release>:
 8006870:	4801      	ldr	r0, [pc, #4]	; (8006878 <__sinit_lock_release+0x8>)
 8006872:	f000 b8a2 	b.w	80069ba <__retarget_lock_release_recursive>
 8006876:	bf00      	nop
 8006878:	2000025a 	.word	0x2000025a

0800687c <__sinit>:
 800687c:	b510      	push	{r4, lr}
 800687e:	4604      	mov	r4, r0
 8006880:	f7ff fff0 	bl	8006864 <__sinit_lock_acquire>
 8006884:	69a3      	ldr	r3, [r4, #24]
 8006886:	b11b      	cbz	r3, 8006890 <__sinit+0x14>
 8006888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800688c:	f7ff bff0 	b.w	8006870 <__sinit_lock_release>
 8006890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006894:	6523      	str	r3, [r4, #80]	; 0x50
 8006896:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <__sinit+0x68>)
 8006898:	4a13      	ldr	r2, [pc, #76]	; (80068e8 <__sinit+0x6c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	62a2      	str	r2, [r4, #40]	; 0x28
 800689e:	42a3      	cmp	r3, r4
 80068a0:	bf04      	itt	eq
 80068a2:	2301      	moveq	r3, #1
 80068a4:	61a3      	streq	r3, [r4, #24]
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 f820 	bl	80068ec <__sfp>
 80068ac:	6060      	str	r0, [r4, #4]
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 f81c 	bl	80068ec <__sfp>
 80068b4:	60a0      	str	r0, [r4, #8]
 80068b6:	4620      	mov	r0, r4
 80068b8:	f000 f818 	bl	80068ec <__sfp>
 80068bc:	2200      	movs	r2, #0
 80068be:	60e0      	str	r0, [r4, #12]
 80068c0:	2104      	movs	r1, #4
 80068c2:	6860      	ldr	r0, [r4, #4]
 80068c4:	f7ff ff82 	bl	80067cc <std>
 80068c8:	68a0      	ldr	r0, [r4, #8]
 80068ca:	2201      	movs	r2, #1
 80068cc:	2109      	movs	r1, #9
 80068ce:	f7ff ff7d 	bl	80067cc <std>
 80068d2:	68e0      	ldr	r0, [r4, #12]
 80068d4:	2202      	movs	r2, #2
 80068d6:	2112      	movs	r1, #18
 80068d8:	f7ff ff78 	bl	80067cc <std>
 80068dc:	2301      	movs	r3, #1
 80068de:	61a3      	str	r3, [r4, #24]
 80068e0:	e7d2      	b.n	8006888 <__sinit+0xc>
 80068e2:	bf00      	nop
 80068e4:	08006d8c 	.word	0x08006d8c
 80068e8:	08006815 	.word	0x08006815

080068ec <__sfp>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	4607      	mov	r7, r0
 80068f0:	f7ff ffac 	bl	800684c <__sfp_lock_acquire>
 80068f4:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <__sfp+0x84>)
 80068f6:	681e      	ldr	r6, [r3, #0]
 80068f8:	69b3      	ldr	r3, [r6, #24]
 80068fa:	b913      	cbnz	r3, 8006902 <__sfp+0x16>
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff ffbd 	bl	800687c <__sinit>
 8006902:	3648      	adds	r6, #72	; 0x48
 8006904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006908:	3b01      	subs	r3, #1
 800690a:	d503      	bpl.n	8006914 <__sfp+0x28>
 800690c:	6833      	ldr	r3, [r6, #0]
 800690e:	b30b      	cbz	r3, 8006954 <__sfp+0x68>
 8006910:	6836      	ldr	r6, [r6, #0]
 8006912:	e7f7      	b.n	8006904 <__sfp+0x18>
 8006914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006918:	b9d5      	cbnz	r5, 8006950 <__sfp+0x64>
 800691a:	4b16      	ldr	r3, [pc, #88]	; (8006974 <__sfp+0x88>)
 800691c:	60e3      	str	r3, [r4, #12]
 800691e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006922:	6665      	str	r5, [r4, #100]	; 0x64
 8006924:	f000 f847 	bl	80069b6 <__retarget_lock_init_recursive>
 8006928:	f7ff ff96 	bl	8006858 <__sfp_lock_release>
 800692c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006930:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006934:	6025      	str	r5, [r4, #0]
 8006936:	61a5      	str	r5, [r4, #24]
 8006938:	2208      	movs	r2, #8
 800693a:	4629      	mov	r1, r5
 800693c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006940:	f7ff f940 	bl	8005bc4 <memset>
 8006944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800694c:	4620      	mov	r0, r4
 800694e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006950:	3468      	adds	r4, #104	; 0x68
 8006952:	e7d9      	b.n	8006908 <__sfp+0x1c>
 8006954:	2104      	movs	r1, #4
 8006956:	4638      	mov	r0, r7
 8006958:	f7ff ff62 	bl	8006820 <__sfmoreglue>
 800695c:	4604      	mov	r4, r0
 800695e:	6030      	str	r0, [r6, #0]
 8006960:	2800      	cmp	r0, #0
 8006962:	d1d5      	bne.n	8006910 <__sfp+0x24>
 8006964:	f7ff ff78 	bl	8006858 <__sfp_lock_release>
 8006968:	230c      	movs	r3, #12
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	e7ee      	b.n	800694c <__sfp+0x60>
 800696e:	bf00      	nop
 8006970:	08006d8c 	.word	0x08006d8c
 8006974:	ffff0001 	.word	0xffff0001

08006978 <_fwalk_reent>:
 8006978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697c:	4606      	mov	r6, r0
 800697e:	4688      	mov	r8, r1
 8006980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006984:	2700      	movs	r7, #0
 8006986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800698a:	f1b9 0901 	subs.w	r9, r9, #1
 800698e:	d505      	bpl.n	800699c <_fwalk_reent+0x24>
 8006990:	6824      	ldr	r4, [r4, #0]
 8006992:	2c00      	cmp	r4, #0
 8006994:	d1f7      	bne.n	8006986 <_fwalk_reent+0xe>
 8006996:	4638      	mov	r0, r7
 8006998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699c:	89ab      	ldrh	r3, [r5, #12]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d907      	bls.n	80069b2 <_fwalk_reent+0x3a>
 80069a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069a6:	3301      	adds	r3, #1
 80069a8:	d003      	beq.n	80069b2 <_fwalk_reent+0x3a>
 80069aa:	4629      	mov	r1, r5
 80069ac:	4630      	mov	r0, r6
 80069ae:	47c0      	blx	r8
 80069b0:	4307      	orrs	r7, r0
 80069b2:	3568      	adds	r5, #104	; 0x68
 80069b4:	e7e9      	b.n	800698a <_fwalk_reent+0x12>

080069b6 <__retarget_lock_init_recursive>:
 80069b6:	4770      	bx	lr

080069b8 <__retarget_lock_acquire_recursive>:
 80069b8:	4770      	bx	lr

080069ba <__retarget_lock_release_recursive>:
 80069ba:	4770      	bx	lr

080069bc <__swhatbuf_r>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	460e      	mov	r6, r1
 80069c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c4:	2900      	cmp	r1, #0
 80069c6:	b096      	sub	sp, #88	; 0x58
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	da08      	bge.n	80069e0 <__swhatbuf_r+0x24>
 80069ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	602a      	str	r2, [r5, #0]
 80069d6:	061a      	lsls	r2, r3, #24
 80069d8:	d410      	bmi.n	80069fc <__swhatbuf_r+0x40>
 80069da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069de:	e00e      	b.n	80069fe <__swhatbuf_r+0x42>
 80069e0:	466a      	mov	r2, sp
 80069e2:	f000 f907 	bl	8006bf4 <_fstat_r>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	dbf1      	blt.n	80069ce <__swhatbuf_r+0x12>
 80069ea:	9a01      	ldr	r2, [sp, #4]
 80069ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069f4:	425a      	negs	r2, r3
 80069f6:	415a      	adcs	r2, r3
 80069f8:	602a      	str	r2, [r5, #0]
 80069fa:	e7ee      	b.n	80069da <__swhatbuf_r+0x1e>
 80069fc:	2340      	movs	r3, #64	; 0x40
 80069fe:	2000      	movs	r0, #0
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	b016      	add	sp, #88	; 0x58
 8006a04:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a08 <__smakebuf_r>:
 8006a08:	898b      	ldrh	r3, [r1, #12]
 8006a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a0c:	079d      	lsls	r5, r3, #30
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460c      	mov	r4, r1
 8006a12:	d507      	bpl.n	8006a24 <__smakebuf_r+0x1c>
 8006a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	6163      	str	r3, [r4, #20]
 8006a20:	b002      	add	sp, #8
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	ab01      	add	r3, sp, #4
 8006a26:	466a      	mov	r2, sp
 8006a28:	f7ff ffc8 	bl	80069bc <__swhatbuf_r>
 8006a2c:	9900      	ldr	r1, [sp, #0]
 8006a2e:	4605      	mov	r5, r0
 8006a30:	4630      	mov	r0, r6
 8006a32:	f7ff f9cf 	bl	8005dd4 <_malloc_r>
 8006a36:	b948      	cbnz	r0, 8006a4c <__smakebuf_r+0x44>
 8006a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3c:	059a      	lsls	r2, r3, #22
 8006a3e:	d4ef      	bmi.n	8006a20 <__smakebuf_r+0x18>
 8006a40:	f023 0303 	bic.w	r3, r3, #3
 8006a44:	f043 0302 	orr.w	r3, r3, #2
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	e7e3      	b.n	8006a14 <__smakebuf_r+0xc>
 8006a4c:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <__smakebuf_r+0x7c>)
 8006a4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	6020      	str	r0, [r4, #0]
 8006a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	9b00      	ldr	r3, [sp, #0]
 8006a5c:	6163      	str	r3, [r4, #20]
 8006a5e:	9b01      	ldr	r3, [sp, #4]
 8006a60:	6120      	str	r0, [r4, #16]
 8006a62:	b15b      	cbz	r3, 8006a7c <__smakebuf_r+0x74>
 8006a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f000 f8d5 	bl	8006c18 <_isatty_r>
 8006a6e:	b128      	cbz	r0, 8006a7c <__smakebuf_r+0x74>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	89a0      	ldrh	r0, [r4, #12]
 8006a7e:	4305      	orrs	r5, r0
 8006a80:	81a5      	strh	r5, [r4, #12]
 8006a82:	e7cd      	b.n	8006a20 <__smakebuf_r+0x18>
 8006a84:	08006815 	.word	0x08006815

08006a88 <__malloc_lock>:
 8006a88:	4801      	ldr	r0, [pc, #4]	; (8006a90 <__malloc_lock+0x8>)
 8006a8a:	f7ff bf95 	b.w	80069b8 <__retarget_lock_acquire_recursive>
 8006a8e:	bf00      	nop
 8006a90:	20000258 	.word	0x20000258

08006a94 <__malloc_unlock>:
 8006a94:	4801      	ldr	r0, [pc, #4]	; (8006a9c <__malloc_unlock+0x8>)
 8006a96:	f7ff bf90 	b.w	80069ba <__retarget_lock_release_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	20000258 	.word	0x20000258

08006aa0 <_raise_r>:
 8006aa0:	291f      	cmp	r1, #31
 8006aa2:	b538      	push	{r3, r4, r5, lr}
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	d904      	bls.n	8006ab4 <_raise_r+0x14>
 8006aaa:	2316      	movs	r3, #22
 8006aac:	6003      	str	r3, [r0, #0]
 8006aae:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ab6:	b112      	cbz	r2, 8006abe <_raise_r+0x1e>
 8006ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006abc:	b94b      	cbnz	r3, 8006ad2 <_raise_r+0x32>
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 f830 	bl	8006b24 <_getpid_r>
 8006ac4:	462a      	mov	r2, r5
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	4620      	mov	r0, r4
 8006aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ace:	f000 b817 	b.w	8006b00 <_kill_r>
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d00a      	beq.n	8006aec <_raise_r+0x4c>
 8006ad6:	1c59      	adds	r1, r3, #1
 8006ad8:	d103      	bne.n	8006ae2 <_raise_r+0x42>
 8006ada:	2316      	movs	r3, #22
 8006adc:	6003      	str	r3, [r0, #0]
 8006ade:	2001      	movs	r0, #1
 8006ae0:	e7e7      	b.n	8006ab2 <_raise_r+0x12>
 8006ae2:	2400      	movs	r4, #0
 8006ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ae8:	4628      	mov	r0, r5
 8006aea:	4798      	blx	r3
 8006aec:	2000      	movs	r0, #0
 8006aee:	e7e0      	b.n	8006ab2 <_raise_r+0x12>

08006af0 <raise>:
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <raise+0xc>)
 8006af2:	4601      	mov	r1, r0
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	f7ff bfd3 	b.w	8006aa0 <_raise_r>
 8006afa:	bf00      	nop
 8006afc:	200000a4 	.word	0x200000a4

08006b00 <_kill_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d07      	ldr	r5, [pc, #28]	; (8006b20 <_kill_r+0x20>)
 8006b04:	2300      	movs	r3, #0
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	602b      	str	r3, [r5, #0]
 8006b0e:	f7fa f807 	bl	8000b20 <_kill>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d102      	bne.n	8006b1c <_kill_r+0x1c>
 8006b16:	682b      	ldr	r3, [r5, #0]
 8006b18:	b103      	cbz	r3, 8006b1c <_kill_r+0x1c>
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	bd38      	pop	{r3, r4, r5, pc}
 8006b1e:	bf00      	nop
 8006b20:	2000025c 	.word	0x2000025c

08006b24 <_getpid_r>:
 8006b24:	f7f9 bff4 	b.w	8000b10 <_getpid>

08006b28 <__sread>:
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b30:	f000 f894 	bl	8006c5c <_read_r>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	bfab      	itete	ge
 8006b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b3c:	181b      	addge	r3, r3, r0
 8006b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b42:	bfac      	ite	ge
 8006b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b46:	81a3      	strhlt	r3, [r4, #12]
 8006b48:	bd10      	pop	{r4, pc}

08006b4a <__swrite>:
 8006b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4e:	461f      	mov	r7, r3
 8006b50:	898b      	ldrh	r3, [r1, #12]
 8006b52:	05db      	lsls	r3, r3, #23
 8006b54:	4605      	mov	r5, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	4616      	mov	r6, r2
 8006b5a:	d505      	bpl.n	8006b68 <__swrite+0x1e>
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	2302      	movs	r3, #2
 8006b62:	2200      	movs	r2, #0
 8006b64:	f000 f868 	bl	8006c38 <_lseek_r>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b72:	81a3      	strh	r3, [r4, #12]
 8006b74:	4632      	mov	r2, r6
 8006b76:	463b      	mov	r3, r7
 8006b78:	4628      	mov	r0, r5
 8006b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7e:	f000 b817 	b.w	8006bb0 <_write_r>

08006b82 <__sseek>:
 8006b82:	b510      	push	{r4, lr}
 8006b84:	460c      	mov	r4, r1
 8006b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8a:	f000 f855 	bl	8006c38 <_lseek_r>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	bf15      	itete	ne
 8006b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b9e:	81a3      	strheq	r3, [r4, #12]
 8006ba0:	bf18      	it	ne
 8006ba2:	81a3      	strhne	r3, [r4, #12]
 8006ba4:	bd10      	pop	{r4, pc}

08006ba6 <__sclose>:
 8006ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006baa:	f000 b813 	b.w	8006bd4 <_close_r>
	...

08006bb0 <_write_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	; (8006bd0 <_write_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7f9 ffe5 	bl	8000b8e <_write>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_write_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_write_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	2000025c 	.word	0x2000025c

08006bd4 <_close_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d06      	ldr	r5, [pc, #24]	; (8006bf0 <_close_r+0x1c>)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4604      	mov	r4, r0
 8006bdc:	4608      	mov	r0, r1
 8006bde:	602b      	str	r3, [r5, #0]
 8006be0:	f7f9 fff1 	bl	8000bc6 <_close>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_close_r+0x1a>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_close_r+0x1a>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	2000025c 	.word	0x2000025c

08006bf4 <_fstat_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	4d07      	ldr	r5, [pc, #28]	; (8006c14 <_fstat_r+0x20>)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	f7f9 ffec 	bl	8000bde <_fstat>
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	d102      	bne.n	8006c10 <_fstat_r+0x1c>
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	b103      	cbz	r3, 8006c10 <_fstat_r+0x1c>
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	bd38      	pop	{r3, r4, r5, pc}
 8006c12:	bf00      	nop
 8006c14:	2000025c 	.word	0x2000025c

08006c18 <_isatty_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4d06      	ldr	r5, [pc, #24]	; (8006c34 <_isatty_r+0x1c>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7f9 ffeb 	bl	8000bfe <_isatty>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_isatty_r+0x1a>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_isatty_r+0x1a>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	2000025c 	.word	0x2000025c

08006c38 <_lseek_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d07      	ldr	r5, [pc, #28]	; (8006c58 <_lseek_r+0x20>)
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	4608      	mov	r0, r1
 8006c40:	4611      	mov	r1, r2
 8006c42:	2200      	movs	r2, #0
 8006c44:	602a      	str	r2, [r5, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f7f9 ffe4 	bl	8000c14 <_lseek>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_lseek_r+0x1e>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_lseek_r+0x1e>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	2000025c 	.word	0x2000025c

08006c5c <_read_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d07      	ldr	r5, [pc, #28]	; (8006c7c <_read_r+0x20>)
 8006c60:	4604      	mov	r4, r0
 8006c62:	4608      	mov	r0, r1
 8006c64:	4611      	mov	r1, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7f9 ff72 	bl	8000b54 <_read>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_read_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_read_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	2000025c 	.word	0x2000025c

08006c80 <_init>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr

08006c8c <_fini>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr

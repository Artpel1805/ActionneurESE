
ActionneurESE_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a584  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa84  0800aa84  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa8c  0800aa8c  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa90  0800aa90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800aa94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000234  0800acc8  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800acc8  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c39d  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d3  00000000  00000000  0003c601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00041310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a340  00000000  00000000  000427d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b059  00000000  00000000  0006cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113fca  00000000  00000000  00087b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019bb33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b1c  00000000  00000000  0019bb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000234 	.word	0x20000234
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a74c 	.word	0x0800a74c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000238 	.word	0x20000238
 800021c:	0800a74c 	.word	0x0800a74c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2220      	movs	r2, #32
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f008 f9cd 	bl	8009198 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e48:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e6e:	f001 fb5d 	bl	800252c <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000e78:	f000 fc20 	bl	80016bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e88:	f002 fb56 	bl	8003538 <HAL_ADCEx_MultiModeConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000e92:	f000 fc13 	bl	80016bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_ADC1_Init+0xf0>)
 8000e98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea2:	237f      	movs	r3, #127	; 0x7f
 8000ea4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000eb4:	f001 fde4 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ebe:	f000 fbfd 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	; 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000250 	.word	0x20000250
 8000ed0:	04300002 	.word	0x04300002

08000ed4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b09e      	sub	sp, #120	; 0x78
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2254      	movs	r2, #84	; 0x54
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f008 f94f 	bl	8009198 <memset>
  if(adcHandle->Instance==ADC1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f02:	d15f      	bne.n	8000fc4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f0e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 ffff 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f20:	f000 fbcc 	bl	80016bc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f54:	2301      	movs	r3, #1
 8000f56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f64:	4619      	mov	r1, r3
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f003 f82f 	bl	8003fcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_ADC_MspInit+0x100>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f76:	2205      	movs	r2, #5
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000faa:	f002 fcdd 	bl	8003968 <HAL_DMA_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000fb4:	f000 fb82 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3778      	adds	r7, #120	; 0x78
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	200002bc 	.word	0x200002bc
 8000fd4:	40020008 	.word	0x40020008

08000fd8 <get_ccr_value>:
 * @param[in] dutyCycle Le rapport cyclique donné
 *
 * @return La valeur du CCR
 */

int get_ccr_value(int dutyCycle){
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	if(dutyCycle > 100){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	dd02      	ble.n	8000fec <get_ccr_value+0x14>
		return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fea:	e012      	b.n	8001012 <get_ccr_value+0x3a>
	}
	if(dutyCycle<0){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da02      	bge.n	8000ff8 <get_ccr_value+0x20>
		return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff6:	e00c      	b.n	8001012 <get_ccr_value+0x3a>
	}
	int arr = TIM1 -> ARR;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <get_ccr_value+0x48>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	60fb      	str	r3, [r7, #12]
	return (dutyCycle * arr) / 100;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <get_ccr_value+0x4c>)
 8001008:	fb82 1203 	smull	r1, r2, r2, r3
 800100c:	1152      	asrs	r2, r2, #5
 800100e:	17db      	asrs	r3, r3, #31
 8001010:	1ad3      	subs	r3, r2, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40012c00 	.word	0x40012c00
 8001024:	51eb851f 	.word	0x51eb851f

08001028 <change_ccr>:
 *
 * @param[in] dutyCycle Le rapport cyclique donné
 *
 * @return
 */
void change_ccr(int dutyCycle){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	int goalCCR1 = get_ccr_value(dutyCycle);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffd1 	bl	8000fd8 <get_ccr_value>
 8001036:	60f8      	str	r0, [r7, #12]
	if(goalCCR1 == -1){
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800103e:	d02d      	beq.n	800109c <change_ccr+0x74>
		return;
	}
	if( goalCCR1 > TIM1 -> CCR1){
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <change_ccr+0x7c>)
 8001042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d211      	bcs.n	800106e <change_ccr+0x46>
		while(TIM1 -> CCR1 != goalCCR1){
 800104a:	e00a      	b.n	8001062 <change_ccr+0x3a>
			TIM1 -> CCR1 ++;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <change_ccr+0x7c>)
 800104e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001050:	3201      	adds	r2, #1
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1 -> CCR2 --;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <change_ccr+0x7c>)
 8001056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001058:	3a01      	subs	r2, #1
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 800105c:	2032      	movs	r0, #50	; 0x32
 800105e:	f001 f821 	bl	80020a4 <HAL_Delay>
		while(TIM1 -> CCR1 != goalCCR1){
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <change_ccr+0x7c>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d1ef      	bne.n	800104c <change_ccr+0x24>
		}
		return;
 800106c:	e017      	b.n	800109e <change_ccr+0x76>
	}
	if( goalCCR1 < TIM1 -> CCR1){
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <change_ccr+0x7c>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d912      	bls.n	800109e <change_ccr+0x76>
		while(TIM1 -> CCR1 != goalCCR1){
 8001078:	e00a      	b.n	8001090 <change_ccr+0x68>
			TIM1 -> CCR1 --;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <change_ccr+0x7c>)
 800107c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107e:	3a01      	subs	r2, #1
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1 -> CCR2 ++;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <change_ccr+0x7c>)
 8001084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001086:	3201      	adds	r2, #1
 8001088:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 800108a:	2032      	movs	r0, #50	; 0x32
 800108c:	f001 f80a 	bl	80020a4 <HAL_Delay>
		while(TIM1 -> CCR1 != goalCCR1){
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <change_ccr+0x7c>)
 8001092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	429a      	cmp	r2, r3
 8001098:	d1ef      	bne.n	800107a <change_ccr+0x52>
		}
		return;
 800109a:	e000      	b.n	800109e <change_ccr+0x76>
		return;
 800109c:	bf00      	nop
	}
}
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40012c00 	.word	0x40012c00

080010a8 <get_mean_current>:
 * @brief Calcul le courant
 *
 * @return
 */

int get_mean_current(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	int current = 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
	int i;
	for(i=0; i<ADC_BUF_SIZE; i++){
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	e00a      	b.n	80010ce <get_mean_current+0x26>
		current = current + (int)ADC_Buffer[i];
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <get_mean_current+0x98>)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	607b      	str	r3, [r7, #4]
	for(i=0; i<ADC_BUF_SIZE; i++){
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	ddf1      	ble.n	80010b8 <get_mean_current+0x10>
	}
	current = current / ADC_BUF_SIZE;
	current = ((current * 3.3 / 4096) - 2.5 ) * 12; // Convert ADC to Ampere value
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff fa5d 	bl	8000594 <__aeabi_i2d>
 80010da:	a317      	add	r3, pc, #92	; (adr r3, 8001138 <get_mean_current+0x90>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fac2 	bl	8000668 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <get_mean_current+0x9c>)
 80010f2:	f7ff fbe3 	bl	80008bc <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <get_mean_current+0xa0>)
 8001104:	f7ff f8f8 	bl	80002f8 <__aeabi_dsub>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <get_mean_current+0xa4>)
 8001116:	f7ff faa7 	bl	8000668 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fcb3 	bl	8000a8c <__aeabi_d2iz>
 8001126:	4603      	mov	r3, r0
 8001128:	607b      	str	r3, [r7, #4]
	return current;
 800112a:	687b      	ldr	r3, [r7, #4]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	f3af 8000 	nop.w
 8001138:	66666666 	.word	0x66666666
 800113c:	400a6666 	.word	0x400a6666
 8001140:	20000364 	.word	0x20000364
 8001144:	40b00000 	.word	0x40b00000
 8001148:	40040000 	.word	0x40040000
 800114c:	40280000 	.word	0x40280000

08001150 <fetch_speed>:
 * @brief Recupere la valeur de la vitesse du moteur
 *
 * @return
 */

void fetch_speed(void){
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	vitesse = htim2.Instance->CNT*10/1180;
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <fetch_speed+0x34>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	461a      	mov	r2, r3
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <fetch_speed+0x38>)
 8001166:	fba3 2302 	umull	r2, r3, r3, r2
 800116a:	0a9b      	lsrs	r3, r3, #10
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <fetch_speed+0x3c>)
 8001170:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT=0;
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <fetch_speed+0x34>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	200003bc 	.word	0x200003bc
 8001188:	de27eb2d 	.word	0xde27eb2d
 800118c:	20000368 	.word	0x20000368

08001190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_DMA_Init+0x50>)
 8001198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <MX_DMA_Init+0x50>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6493      	str	r3, [r2, #72]	; 0x48
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_DMA_Init+0x50>)
 80011a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_DMA_Init+0x50>)
 80011b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <MX_DMA_Init+0x50>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6493      	str	r3, [r2, #72]	; 0x48
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_DMA_Init+0x50>)
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	200b      	movs	r0, #11
 80011cc:	f002 fb97 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011d0:	200b      	movs	r0, #11
 80011d2:	f002 fbae 	bl	8003932 <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <MX_GPIO_Init+0xe4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <MX_GPIO_Init+0xe4>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <MX_GPIO_Init+0xe4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <MX_GPIO_Init+0xe4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <MX_GPIO_Init+0xe4>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <MX_GPIO_Init+0xe4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_GPIO_Init+0xe4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <MX_GPIO_Init+0xe4>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_GPIO_Init+0xe4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2108      	movs	r1, #8
 8001246:	4821      	ldr	r0, [pc, #132]	; (80012cc <MX_GPIO_Init+0xe8>)
 8001248:	f003 f842 	bl	80042d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2120      	movs	r1, #32
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f003 f83c 	bl	80042d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <MX_GPIO_Init+0xe8>)
 8001270:	f002 feac 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8001274:	2308      	movs	r3, #8
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_GPIO_Init+0xe8>)
 800128c:	f002 fe9e 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001290:	2320      	movs	r3, #32
 8001292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f002 fe8f 	bl	8003fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	2028      	movs	r0, #40	; 0x28
 80012b4:	f002 fb23 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	f002 fb3a 	bl	8003932 <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000800 	.word	0x48000800

080012d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b09e      	sub	sp, #120	; 0x78
 80012d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	66bb      	str	r3, [r7, #104]	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012de:	f000 fe70 	bl	8001fc2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012e2:	f000 f971 	bl	80015c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012e6:	f7ff ff7d 	bl	80011e4 <MX_GPIO_Init>
	MX_DMA_Init();
 80012ea:	f7ff ff51 	bl	8001190 <MX_DMA_Init>
	MX_TIM1_Init();
 80012ee:	f000 fb85 	bl	80019fc <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80012f2:	f000 fd91 	bl	8001e18 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80012f6:	f7ff fd73 	bl	8000de0 <MX_ADC1_Init>
	MX_TIM2_Init();
 80012fa:	f000 fc25 	bl	8001b48 <MX_TIM2_Init>
	MX_TIM8_Init();
 80012fe:	f000 fc77 	bl	8001bf0 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */
	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, ADC_BUF_SIZE))
 8001302:	2201      	movs	r2, #1
 8001304:	4996      	ldr	r1, [pc, #600]	; (8001560 <main+0x290>)
 8001306:	4897      	ldr	r0, [pc, #604]	; (8001564 <main+0x294>)
 8001308:	f001 fad2 	bl	80028b0 <HAL_ADC_Start_DMA>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <main+0x50>
		HAL_UART_Transmit(&huart2, ADCError, sizeof(ADCError), HAL_MAX_DELAY);
 8001312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001316:	220f      	movs	r2, #15
 8001318:	4993      	ldr	r1, [pc, #588]	; (8001568 <main+0x298>)
 800131a:	4894      	ldr	r0, [pc, #592]	; (800156c <main+0x29c>)
 800131c:	f005 fee8 	bl	80070f0 <HAL_UART_Transmit>

	memset(argv,0,MAX_ARGS*sizeof(char*));
 8001320:	463b      	mov	r3, r7
 8001322:	2224      	movs	r2, #36	; 0x24
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 ff36 	bl	8009198 <memset>
	memset(cmdBuffer,0,CMD_BUFFER_SIZE*sizeof(char));
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f007 ff2f 	bl	8009198 <memset>
 800133a:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <main+0x2a0>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,0,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,0,UART_TX_BUFFER_SIZE*sizeof(char));
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	2100      	movs	r1, #0
 8001344:	488b      	ldr	r0, [pc, #556]	; (8001574 <main+0x2a4>)
 8001346:	f007 ff27 	bl	8009198 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800134a:	2201      	movs	r2, #1
 800134c:	4988      	ldr	r1, [pc, #544]	; (8001570 <main+0x2a0>)
 800134e:	4887      	ldr	r0, [pc, #540]	; (800156c <main+0x29c>)
 8001350:	f005 ff64 	bl	800721c <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8001354:	200a      	movs	r0, #10
 8001356:	f000 fea5 	bl	80020a4 <HAL_Delay>

	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135e:	2266      	movs	r2, #102	; 0x66
 8001360:	4985      	ldr	r1, [pc, #532]	; (8001578 <main+0x2a8>)
 8001362:	4882      	ldr	r0, [pc, #520]	; (800156c <main+0x29c>)
 8001364:	f005 fec4 	bl	80070f0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136c:	2218      	movs	r2, #24
 800136e:	4983      	ldr	r1, [pc, #524]	; (800157c <main+0x2ac>)
 8001370:	487e      	ldr	r0, [pc, #504]	; (800156c <main+0x29c>)
 8001372:	f005 febd 	bl	80070f0 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8001376:	4b82      	ldr	r3, [pc, #520]	; (8001580 <main+0x2b0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d056      	beq.n	800142c <main+0x15c>
			switch(uartRxBuffer[0]){
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <main+0x2a0>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b0d      	cmp	r3, #13
 8001384:	d002      	beq.n	800138c <main+0xbc>
 8001386:	2b7f      	cmp	r3, #127	; 0x7f
 8001388:	d02d      	beq.n	80013e6 <main+0x116>
 800138a:	e03c      	b.n	8001406 <main+0x136>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800138c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001390:	2203      	movs	r2, #3
 8001392:	497c      	ldr	r1, [pc, #496]	; (8001584 <main+0x2b4>)
 8001394:	4875      	ldr	r0, [pc, #468]	; (800156c <main+0x29c>)
 8001396:	f005 feab 	bl	80070f0 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 800139a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800139e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013a0:	4413      	add	r3, r2
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, "=");//
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4976      	ldr	r1, [pc, #472]	; (8001588 <main+0x2b8>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f007 ff2d 	bl	8009210 <strtok>
 80013b6:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80013b8:	e00d      	b.n	80013d6 <main+0x106>
					argv[argc++] = token;
 80013ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	673a      	str	r2, [r7, #112]	; 0x70
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	3378      	adds	r3, #120	; 0x78
 80013c4:	443b      	add	r3, r7
 80013c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013c8:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80013cc:	496f      	ldr	r1, [pc, #444]	; (800158c <main+0x2bc>)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f007 ff1e 	bl	8009210 <strtok>
 80013d4:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80013d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ee      	bne.n	80013ba <main+0xea>
				}
				idx_cmd = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80013e4:	e01f      	b.n	8001426 <main+0x156>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80013e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	677a      	str	r2, [r7, #116]	; 0x74
 80013ec:	3378      	adds	r3, #120	; 0x78
 80013ee:	443b      	add	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fa:	2201      	movs	r2, #1
 80013fc:	495c      	ldr	r1, [pc, #368]	; (8001570 <main+0x2a0>)
 80013fe:	485b      	ldr	r0, [pc, #364]	; (800156c <main+0x29c>)
 8001400:	f005 fe76 	bl	80070f0 <HAL_UART_Transmit>
				break;
 8001404:	e00f      	b.n	8001426 <main+0x156>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	677a      	str	r2, [r7, #116]	; 0x74
 800140c:	4a58      	ldr	r2, [pc, #352]	; (8001570 <main+0x2a0>)
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	3378      	adds	r3, #120	; 0x78
 8001412:	443b      	add	r3, r7
 8001414:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141c:	2201      	movs	r2, #1
 800141e:	4954      	ldr	r1, [pc, #336]	; (8001570 <main+0x2a0>)
 8001420:	4852      	ldr	r0, [pc, #328]	; (800156c <main+0x29c>)
 8001422:	f005 fe65 	bl	80070f0 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <main+0x2b0>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 800142c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0a1      	beq.n	8001376 <main+0xa6>

			if(strcmp(argv[0],"speed")==0){
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	4956      	ldr	r1, [pc, #344]	; (8001590 <main+0x2c0>)
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe fef2 	bl	8000220 <strcmp>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d117      	bne.n	8001472 <main+0x1a2>
				if(strlen(argv[1])==2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe fef5 	bl	8000234 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	2b02      	cmp	r3, #2
 800144e:	d108      	bne.n	8001462 <main+0x192>
				{
					change_ccr(atoi(argv[1]));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f007 fe72 	bl	800913c <atoi>
 8001458:	4603      	mov	r3, r0
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fde4 	bl	8001028 <change_ccr>
 8001460:	e073      	b.n	800154a <main+0x27a>
				}
				else {
					HAL_UART_Transmit(&huart2, vitesseNotFound, sizeof(vitesseNotFound), HAL_MAX_DELAY);                      }
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001466:	2217      	movs	r2, #23
 8001468:	494a      	ldr	r1, [pc, #296]	; (8001594 <main+0x2c4>)
 800146a:	4840      	ldr	r0, [pc, #256]	; (800156c <main+0x29c>)
 800146c:	f005 fe40 	bl	80070f0 <HAL_UART_Transmit>
 8001470:	e06b      	b.n	800154a <main+0x27a>

			}
			else if(strcmp(argv[0],"start")==0)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	4948      	ldr	r1, [pc, #288]	; (8001598 <main+0x2c8>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe fed2 	bl	8000220 <strcmp>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <main+0x1c6>
			{
				start_module();
 8001482:	f000 f921 	bl	80016c8 <start_module>
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8001486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148a:	220d      	movs	r2, #13
 800148c:	4943      	ldr	r1, [pc, #268]	; (800159c <main+0x2cc>)
 800148e:	4837      	ldr	r0, [pc, #220]	; (800156c <main+0x29c>)
 8001490:	f005 fe2e 	bl	80070f0 <HAL_UART_Transmit>
 8001494:	e059      	b.n	800154a <main+0x27a>

			}
			else if(strcmp(argv[0],"stop")==0)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	4941      	ldr	r1, [pc, #260]	; (80015a0 <main+0x2d0>)
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe fec0 	bl	8000220 <strcmp>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <main+0x1ea>
			{
				stop_module();
 80014a6:	f000 f935 	bl	8001714 <stop_module>
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ae:	220e      	movs	r2, #14
 80014b0:	493c      	ldr	r1, [pc, #240]	; (80015a4 <main+0x2d4>)
 80014b2:	482e      	ldr	r0, [pc, #184]	; (800156c <main+0x29c>)
 80014b4:	f005 fe1c 	bl	80070f0 <HAL_UART_Transmit>
 80014b8:	e047      	b.n	800154a <main+0x27a>
			}
			else if(strcmp(argv[0],"current")==0)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	493a      	ldr	r1, [pc, #232]	; (80015a8 <main+0x2d8>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe feae 	bl	8000220 <strcmp>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d110      	bne.n	80014ec <main+0x21c>
			{
				int current = get_mean_current();
 80014ca:	f7ff fded 	bl	80010a8 <get_mean_current>
 80014ce:	6678      	str	r0, [r7, #100]	; 0x64
				snprintf((char*)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nCurrent = %d \r\n", current);
 80014d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014d2:	4a36      	ldr	r2, [pc, #216]	; (80015ac <main+0x2dc>)
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	4827      	ldr	r0, [pc, #156]	; (8001574 <main+0x2a4>)
 80014d8:	f007 fe66 	bl	80091a8 <sniprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	4924      	ldr	r1, [pc, #144]	; (8001574 <main+0x2a4>)
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <main+0x29c>)
 80014e6:	f005 fe03 	bl	80070f0 <HAL_UART_Transmit>
 80014ea:	e02e      	b.n	800154a <main+0x27a>
			}
			else if(strcmp(argv[0],"help")==0){
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4930      	ldr	r1, [pc, #192]	; (80015b0 <main+0x2e0>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe95 	bl	8000220 <strcmp>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d108      	bne.n	800150e <main+0x23e>
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001500:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8001504:	492b      	ldr	r1, [pc, #172]	; (80015b4 <main+0x2e4>)
 8001506:	4819      	ldr	r0, [pc, #100]	; (800156c <main+0x29c>)
 8001508:	f005 fdf2 	bl	80070f0 <HAL_UART_Transmit>
 800150c:	e01d      	b.n	800154a <main+0x27a>
			}
			else if(strcmp(argv[0],"vitesse")==0)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	4929      	ldr	r1, [pc, #164]	; (80015b8 <main+0x2e8>)
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fe84 	bl	8000220 <strcmp>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10e      	bne.n	800153c <main+0x26c>
			{
				snprintf((char*)uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\n Vitesse = %d \r\n", vitesse);
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <main+0x2ec>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <main+0x2f0>)
 8001524:	2140      	movs	r1, #64	; 0x40
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <main+0x2a4>)
 8001528:	f007 fe3e 	bl	80091a8 <sniprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 800152c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	4910      	ldr	r1, [pc, #64]	; (8001574 <main+0x2a4>)
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <main+0x29c>)
 8001536:	f005 fddb 	bl	80070f0 <HAL_UART_Transmit>
 800153a:	e006      	b.n	800154a <main+0x27a>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800153c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001540:	2214      	movs	r2, #20
 8001542:	4920      	ldr	r1, [pc, #128]	; (80015c4 <main+0x2f4>)
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <main+0x29c>)
 8001546:	f005 fdd3 	bl	80070f0 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800154a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154e:	2218      	movs	r2, #24
 8001550:	490a      	ldr	r1, [pc, #40]	; (800157c <main+0x2ac>)
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <main+0x29c>)
 8001554:	f005 fdcc 	bl	80070f0 <HAL_UART_Transmit>
			newCmdReady = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 800155c:	e70b      	b.n	8001376 <main+0xa6>
 800155e:	bf00      	nop
 8001560:	20000364 	.word	0x20000364
 8001564:	20000250 	.word	0x20000250
 8001568:	200001b4 	.word	0x200001b4
 800156c:	20000454 	.word	0x20000454
 8001570:	20000320 	.word	0x20000320
 8001574:	20000324 	.word	0x20000324
 8001578:	20000018 	.word	0x20000018
 800157c:	20000000 	.word	0x20000000
 8001580:	2000031c 	.word	0x2000031c
 8001584:	2000019c 	.word	0x2000019c
 8001588:	0800a764 	.word	0x0800a764
 800158c:	0800a768 	.word	0x0800a768
 8001590:	0800a76c 	.word	0x0800a76c
 8001594:	0800a7e4 	.word	0x0800a7e4
 8001598:	0800a774 	.word	0x0800a774
 800159c:	0800a7c4 	.word	0x0800a7c4
 80015a0:	0800a77c 	.word	0x0800a77c
 80015a4:	0800a7d4 	.word	0x0800a7d4
 80015a8:	0800a784 	.word	0x0800a784
 80015ac:	0800a78c 	.word	0x0800a78c
 80015b0:	0800a7a0 	.word	0x0800a7a0
 80015b4:	20000080 	.word	0x20000080
 80015b8:	0800a7a8 	.word	0x0800a7a8
 80015bc:	20000368 	.word	0x20000368
 80015c0:	0800a7b0 	.word	0x0800a7b0
 80015c4:	200001a0 	.word	0x200001a0

080015c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	2238      	movs	r2, #56	; 0x38
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 fdde 	bl	8009198 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f002 feac 	bl	8004348 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fa:	2302      	movs	r3, #2
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fe:	2303      	movs	r3, #3
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001602:	2306      	movs	r3, #6
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001606:	2355      	movs	r3, #85	; 0x55
 8001608:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160a:	2302      	movs	r3, #2
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800160e:	2302      	movs	r3, #2
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001612:	2302      	movs	r3, #2
 8001614:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4618      	mov	r0, r3
 800161c:	f002 ff48 	bl	80044b0 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8001626:	f000 f849 	bl	80016bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	2303      	movs	r3, #3
 8001630:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2104      	movs	r1, #4
 8001642:	4618      	mov	r0, r3
 8001644:	f003 fa4c 	bl	8004ae0 <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 800164e:	f000 f835 	bl	80016bc <Error_Handler>
	}
}
 8001652:	bf00      	nop
 8001654:	3750      	adds	r7, #80	; 0x50
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_UART_RxCpltCallback+0x20>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800166a:	2201      	movs	r2, #1
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <HAL_UART_RxCpltCallback+0x24>)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_UART_RxCpltCallback+0x28>)
 8001670:	f005 fdd4 	bl	800721c <HAL_UART_Receive_IT>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000031c 	.word	0x2000031c
 8001680:	20000320 	.word	0x20000320
 8001684:	20000454 	.word	0x20000454

08001688 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	if(htim == &htim8)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_TIM_PeriodElapsedCallback+0x14>
		fetch_speed();
 80016ac:	f7ff fd50 	bl	8001150 <fetch_speed>

}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000408 	.word	0x20000408

080016bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <start_module>:

/**
 * @brief Allume le moteur
 */

void start_module(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2108      	movs	r1, #8
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <start_module+0x44>)
 80016d2:	f002 fdfd 	bl	80042d0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80016d6:	2002      	movs	r0, #2
 80016d8:	f000 fce4 	bl	80020a4 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2108      	movs	r1, #8
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <start_module+0x44>)
 80016e2:	f002 fdf5 	bl	80042d0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016e6:	2100      	movs	r1, #0
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <start_module+0x48>)
 80016ea:	f003 ff11 	bl	8005510 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016ee:	2100      	movs	r1, #0
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <start_module+0x48>)
 80016f2:	f005 f9c7 	bl	8006a84 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016f6:	2104      	movs	r1, #4
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <start_module+0x48>)
 80016fa:	f003 ff09 	bl	8005510 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80016fe:	2104      	movs	r1, #4
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <start_module+0x48>)
 8001702:	f005 f9bf 	bl	8006a84 <HAL_TIMEx_PWMN_Start>

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	48000800 	.word	0x48000800
 8001710:	20000370 	.word	0x20000370

08001714 <stop_module>:


/**
 * @brief Eteint le moteur
 */
void stop_module(){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001718:	2100      	movs	r1, #0
 800171a:	4808      	ldr	r0, [pc, #32]	; (800173c <stop_module+0x28>)
 800171c:	f004 f80a 	bl	8005734 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001720:	2100      	movs	r1, #0
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <stop_module+0x28>)
 8001724:	f005 fa70 	bl	8006c08 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001728:	2104      	movs	r1, #4
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <stop_module+0x28>)
 800172c:	f004 f802 	bl	8005734 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001730:	2104      	movs	r1, #4
 8001732:	4802      	ldr	r0, [pc, #8]	; (800173c <stop_module+0x28>)
 8001734:	f005 fa68 	bl	8006c08 <HAL_TIMEx_PWMN_Stop>

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000370 	.word	0x20000370

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_MspInit+0x54>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_MspInit+0x54>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6613      	str	r3, [r2, #96]	; 0x60
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_MspInit+0x54>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_MspInit+0x54>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <HAL_MspInit+0x54>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6593      	str	r3, [r2, #88]	; 0x58
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_MspInit+0x54>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2005      	movs	r0, #5
 800177c:	f002 f8bf 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001780:	2005      	movs	r0, #5
 8001782:	f002 f8d6 	bl	8003932 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001786:	f002 fe83 	bl	8004490 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 fc40 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA1_Channel1_IRQHandler+0x10>)
 8001802:	f002 fa94 	bl	8003d2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002bc 	.word	0x200002bc

08001810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART2_IRQHandler+0x10>)
 8001816:	f005 fd57 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000454 	.word	0x20000454

08001824 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	start_module(); // Don't forget to put a lower priority as SySTick
 8001828:	f7ff ff4e 	bl	80016c8 <start_module>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800182c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001830:	f002 fd66 	bl	8004300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <TIM8_UP_IRQHandler+0x10>)
 800183e:	f004 f8bb 	bl	80059b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000408 	.word	0x20000408

0800184c <_getpid>:
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
 8001850:	2301      	movs	r3, #1
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_kill>:
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	f007 fc6d 	bl	8009144 <__errno>
 800186a:	4603      	mov	r3, r0
 800186c:	2216      	movs	r2, #22
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_exit>:
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffe7 	bl	800185c <_kill>
 800188e:	e7fe      	b.n	800188e <_exit+0x12>

08001890 <_read>:
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f3af 8000 	nop.w
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_fstat>:
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	2300      	movs	r3, #0
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_isatty>:
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	2301      	movs	r3, #1
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_lseek>:
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	2300      	movs	r3, #0
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_sbrk>:
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
 800199c:	f007 fbd2 	bl	8009144 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20020000 	.word	0x20020000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	2000036c 	.word	0x2000036c
 80019d4:	200004f8 	.word	0x200004f8

080019d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b098      	sub	sp, #96	; 0x60
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2234      	movs	r2, #52	; 0x34
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f007 fbb5 	bl	8009198 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a2e:	4b44      	ldr	r3, [pc, #272]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a30:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <MX_TIM1_Init+0x148>)
 8001a32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a36:	2209      	movs	r2, #9
 8001a38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001a40:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a42:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001a46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a54:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a5a:	4839      	ldr	r0, [pc, #228]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a5c:	f003 fd01 	bl	8005462 <HAL_TIM_PWM_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a66:	f7ff fe29 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4830      	ldr	r0, [pc, #192]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001a7e:	f005 f921 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a88:	f7ff fe18 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8c:	2360      	movs	r3, #96	; 0x60
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 614;
 8001a90:	f240 2366 	movw	r3, #614	; 0x266
 8001a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a96:	2300      	movs	r3, #0
 8001a98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4823      	ldr	r0, [pc, #140]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001ab4:	f004 f900 	bl	8005cb8 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001abe:	f7ff fdfd 	bl	80016bc <Error_Handler>
  }
  sConfigOC.Pulse = 410;
 8001ac2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001acc:	2204      	movs	r2, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481b      	ldr	r0, [pc, #108]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001ad2:	f004 f8f1 	bl	8005cb8 <HAL_TIM_PWM_ConfigChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001adc:	f7ff fdee 	bl	80016bc <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001ae0:	4817      	ldr	r0, [pc, #92]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001ae2:	f005 fa37 	bl	8006f54 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8001af2:	23d2      	movs	r3, #210	; 0xd2
 8001af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b16:	2300      	movs	r3, #0
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	4619      	mov	r1, r3
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001b24:	f005 f964 	bl	8006df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001b2e:	f7ff fdc5 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b32:	4803      	ldr	r0, [pc, #12]	; (8001b40 <MX_TIM1_Init+0x144>)
 8001b34:	f000 f938 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 8001b38:	bf00      	nop
 8001b3a:	3760      	adds	r7, #96	; 0x60
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000370 	.word	0x20000370
 8001b44:	40012c00 	.word	0x40012c00

08001b48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2224      	movs	r2, #36	; 0x24
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 fb1e 	bl	8009198 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_TIM2_Init+0xa4>)
 8001b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_TIM2_Init+0xa4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_TIM2_Init+0xa4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_TIM2_Init+0xa4>)
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_TIM2_Init+0xa4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <MX_TIM2_Init+0xa4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b96:	2301      	movs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <MX_TIM2_Init+0xa4>)
 8001bba:	f003 fe57 	bl	800586c <HAL_TIM_Encoder_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001bc4:	f7ff fd7a 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_TIM2_Init+0xa4>)
 8001bd6:	f005 f875 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001be0:	f7ff fd6c 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3730      	adds	r7, #48	; 0x30
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200003bc 	.word	0x200003bc

08001bf0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c10:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <MX_TIM8_Init+0xa4>)
 8001c12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 100;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c16:	2264      	movs	r2, #100	; 0x64
 8001c18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1700;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c22:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001c26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c3a:	4815      	ldr	r0, [pc, #84]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c3c:	f003 fbba 	bl	80053b4 <HAL_TIM_Base_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001c46:	f7ff fd39 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	480e      	ldr	r0, [pc, #56]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c58:	f004 f942 	bl	8005ee0 <HAL_TIM_ConfigClockSource>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001c62:	f7ff fd2b 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <MX_TIM8_Init+0xa0>)
 8001c78:	f005 f824 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001c82:	f7ff fd1b 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000408 	.word	0x20000408
 8001c94:	40013400 	.word	0x40013400

08001c98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <HAL_TIM_PWM_MspInit+0x38>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40012c00 	.word	0x40012c00
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf8:	d129      	bne.n	8001d4e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_TIM_Encoder_MspInit+0x80>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001d2a:	f248 0302 	movw	r3, #32770	; 0x8002
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f002 f93f 	bl	8003fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_TIM_Base_MspInit+0x44>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d113      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_TIM_Base_MspInit+0x48>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_TIM_Base_MspInit+0x48>)
 8001d74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d78:	6613      	str	r3, [r2, #96]	; 0x60
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_TIM_Base_MspInit+0x48>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	202c      	movs	r0, #44	; 0x2c
 8001d8c:	f001 fdb7 	bl	80038fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001d90:	202c      	movs	r0, #44	; 0x2c
 8001d92:	f001 fdce 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40013400 	.word	0x40013400
 8001da4:	40021000 	.word	0x40021000

08001da8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_TIM_MspPostInit+0x68>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d11d      	bne.n	8001e06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_TIM_MspPostInit+0x6c>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_TIM_MspPostInit+0x6c>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_TIM_MspPostInit+0x6c>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001de2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001de6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001df4:	2306      	movs	r3, #6
 8001df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e02:	f002 f8e3 	bl	8003fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40021000 	.word	0x40021000

08001e18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e1e:	4a23      	ldr	r2, [pc, #140]	; (8001eac <MX_USART2_UART_Init+0x94>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e60:	4811      	ldr	r0, [pc, #68]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e62:	f005 f8f5 	bl	8007050 <HAL_UART_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e6c:	f7ff fc26 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e74:	f007 f897 	bl	8008fa6 <HAL_UARTEx_SetTxFifoThreshold>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e7e:	f7ff fc1d 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e82:	2100      	movs	r1, #0
 8001e84:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e86:	f007 f8cc 	bl	8009022 <HAL_UARTEx_SetRxFifoThreshold>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e90:	f7ff fc14 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <MX_USART2_UART_Init+0x90>)
 8001e96:	f007 f84d 	bl	8008f34 <HAL_UARTEx_DisableFifoMode>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ea0:	f7ff fc0c 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000454 	.word	0x20000454
 8001eac:	40004400 	.word	0x40004400

08001eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b09e      	sub	sp, #120	; 0x78
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	2254      	movs	r2, #84	; 0x54
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f007 f961 	bl	8009198 <memset>
  if(uartHandle->Instance==USART2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_UART_MspInit+0xb8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d13e      	bne.n	8001f5e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 f813 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef8:	f7ff fbe0 	bl	80016bc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_UART_MspInit+0xbc>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <HAL_UART_MspInit+0xbc>)
 8001f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_UART_MspInit+0xbc>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_UART_MspInit+0xbc>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_UART_MspInit+0xbc>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_UART_MspInit+0xbc>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f44:	4619      	mov	r1, r3
 8001f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4a:	f002 f83f 	bl	8003fcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2101      	movs	r1, #1
 8001f52:	2026      	movs	r0, #38	; 0x26
 8001f54:	f001 fcd3 	bl	80038fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f58:	2026      	movs	r0, #38	; 0x26
 8001f5a:	f001 fcea 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3778      	adds	r7, #120	; 0x78
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40004400 	.word	0x40004400
 8001f6c:	40021000 	.word	0x40021000

08001f70 <Reset_Handler>:
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <LoopForever+0x2>)
 8001f72:	4685      	mov	sp, r0
 8001f74:	480d      	ldr	r0, [pc, #52]	; (8001fac <LoopForever+0x6>)
 8001f76:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <LoopForever+0xa>)
 8001f78:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <LoopForever+0xe>)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e002      	b.n	8001f84 <LoopCopyDataInit>

08001f7e <CopyDataInit>:
 8001f7e:	58d4      	ldr	r4, [r2, r3]
 8001f80:	50c4      	str	r4, [r0, r3]
 8001f82:	3304      	adds	r3, #4

08001f84 <LoopCopyDataInit>:
 8001f84:	18c4      	adds	r4, r0, r3
 8001f86:	428c      	cmp	r4, r1
 8001f88:	d3f9      	bcc.n	8001f7e <CopyDataInit>
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <LoopForever+0x12>)
 8001f8c:	4c0b      	ldr	r4, [pc, #44]	; (8001fbc <LoopForever+0x16>)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e001      	b.n	8001f96 <LoopFillZerobss>

08001f92 <FillZerobss>:
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	3204      	adds	r2, #4

08001f96 <LoopFillZerobss>:
 8001f96:	42a2      	cmp	r2, r4
 8001f98:	d3fb      	bcc.n	8001f92 <FillZerobss>
 8001f9a:	f7ff fd1d 	bl	80019d8 <SystemInit>
 8001f9e:	f007 f8d7 	bl	8009150 <__libc_init_array>
 8001fa2:	f7ff f995 	bl	80012d0 <main>

08001fa6 <LoopForever>:
 8001fa6:	e7fe      	b.n	8001fa6 <LoopForever>
 8001fa8:	20020000 	.word	0x20020000
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000234 	.word	0x20000234
 8001fb4:	0800aa94 	.word	0x0800aa94
 8001fb8:	20000234 	.word	0x20000234
 8001fbc:	200004f8 	.word	0x200004f8

08001fc0 <ADC1_2_IRQHandler>:
 8001fc0:	e7fe      	b.n	8001fc0 <ADC1_2_IRQHandler>

08001fc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f001 fc8b 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f80e 	bl	8001ff4 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	e001      	b.n	8001fe8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fe4:	f7ff fbac 	bl	8001740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]

}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_InitTick+0x68>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d022      	beq.n	800204e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_InitTick+0x6c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_InitTick+0x68>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002014:	fbb1 f3f3 	udiv	r3, r1, r3
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	4618      	mov	r0, r3
 800201e:	f001 fc96 	bl	800394e <HAL_SYSTICK_Config>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10f      	bne.n	8002048 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	d809      	bhi.n	8002042 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202e:	2200      	movs	r2, #0
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002036:	f001 fc62 	bl	80038fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_InitTick+0x70>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e007      	b.n	8002052 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	e004      	b.n	8002052 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e001      	b.n	8002052 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200001cc 	.word	0x200001cc
 8002060:	200001c4 	.word	0x200001c4
 8002064:	200001c8 	.word	0x200001c8

08002068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_IncTick+0x1c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_IncTick+0x20>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4413      	add	r3, r2
 8002076:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_IncTick+0x1c>)
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	200004e4 	.word	0x200004e4
 8002088:	200001cc 	.word	0x200001cc

0800208c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return uwTick;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_GetTick+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200004e4 	.word	0x200004e4

080020a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff ffee 	bl	800208c <HAL_GetTick>
 80020b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020bc:	d004      	beq.n	80020c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_Delay+0x40>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c8:	bf00      	nop
 80020ca:	f7ff ffdf 	bl	800208c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d8f7      	bhi.n	80020ca <HAL_Delay+0x26>
  {
  }
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200001cc 	.word	0x200001cc

080020e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	609a      	str	r2, [r3, #8]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3360      	adds	r3, #96	; 0x60
 8002162:	461a      	mov	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <LL_ADC_SetOffset+0x44>)
 8002172:	4013      	ands	r3, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	4313      	orrs	r3, r2
 8002180:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	03fff000 	.word	0x03fff000

08002198 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3360      	adds	r3, #96	; 0x60
 80021a6:	461a      	mov	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3360      	adds	r3, #96	; 0x60
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b087      	sub	sp, #28
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3360      	adds	r3, #96	; 0x60
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	431a      	orrs	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002224:	bf00      	nop
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3360      	adds	r3, #96	; 0x60
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	431a      	orrs	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	615a      	str	r2, [r3, #20]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b087      	sub	sp, #28
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3330      	adds	r3, #48	; 0x30
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	4413      	add	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	211f      	movs	r1, #31
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	401a      	ands	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	f003 011f 	and.w	r1, r3, #31
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	431a      	orrs	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800230a:	b480      	push	{r7}
 800230c:	b087      	sub	sp, #28
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3314      	adds	r3, #20
 800231a:	461a      	mov	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	0e5b      	lsrs	r3, r3, #25
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	4413      	add	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	0d1b      	lsrs	r3, r3, #20
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2107      	movs	r1, #7
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	0d1b      	lsrs	r3, r3, #20
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	431a      	orrs	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002354:	bf00      	nop
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d10a      	bne.n	800238a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002388:	e00a      	b.n	80023a0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	43db      	mvns	r3, r3
 8002398:	401a      	ands	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	407f0000 	.word	0x407f0000

080023b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 031f 	and.w	r3, r3, #31
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6093      	str	r3, [r2, #8]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002404:	d101      	bne.n	800240a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800242c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002454:	d101      	bne.n	800245a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <LL_ADC_IsEnabled+0x18>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <LL_ADC_IsEnabled+0x1a>
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ca:	f043 0204 	orr.w	r2, r3, #4
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d101      	bne.n	80024f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b08      	cmp	r3, #8
 8002516:	d101      	bne.n	800251c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1af      	b.n	80028a6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7fe fcbd 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff3f 	bl	80023f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff25 	bl	80023cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff5a 	bl	8002440 <LL_ADC_IsInternalRegulatorEnabled>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d115      	bne.n	80025be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff3e 	bl	8002418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800259c:	4b9f      	ldr	r3, [pc, #636]	; (800281c <HAL_ADC_Init+0x2f0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	4a9f      	ldr	r2, [pc, #636]	; (8002820 <HAL_ADC_Init+0x2f4>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025b0:	e002      	b.n	80025b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f9      	bne.n	80025b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ff3c 	bl	8002440 <LL_ADC_IsInternalRegulatorEnabled>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	f043 0210 	orr.w	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff75 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 80025f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8148 	bne.w	8002894 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 8144 	bne.w	8002894 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002614:	f043 0202 	orr.w	r2, r3, #2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff35 	bl	8002490 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d141      	bne.n	80026b0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002634:	d004      	beq.n	8002640 <HAL_ADC_Init+0x114>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7a      	ldr	r2, [pc, #488]	; (8002824 <HAL_ADC_Init+0x2f8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d10f      	bne.n	8002660 <HAL_ADC_Init+0x134>
 8002640:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002644:	f7ff ff24 	bl	8002490 <LL_ADC_IsEnabled>
 8002648:	4604      	mov	r4, r0
 800264a:	4876      	ldr	r0, [pc, #472]	; (8002824 <HAL_ADC_Init+0x2f8>)
 800264c:	f7ff ff20 	bl	8002490 <LL_ADC_IsEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	4323      	orrs	r3, r4
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_ADC_Init+0x15a>
 8002660:	4871      	ldr	r0, [pc, #452]	; (8002828 <HAL_ADC_Init+0x2fc>)
 8002662:	f7ff ff15 	bl	8002490 <LL_ADC_IsEnabled>
 8002666:	4604      	mov	r4, r0
 8002668:	4870      	ldr	r0, [pc, #448]	; (800282c <HAL_ADC_Init+0x300>)
 800266a:	f7ff ff11 	bl	8002490 <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	431c      	orrs	r4, r3
 8002672:	486f      	ldr	r0, [pc, #444]	; (8002830 <HAL_ADC_Init+0x304>)
 8002674:	f7ff ff0c 	bl	8002490 <LL_ADC_IsEnabled>
 8002678:	4603      	mov	r3, r0
 800267a:	4323      	orrs	r3, r4
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002692:	d004      	beq.n	800269e <HAL_ADC_Init+0x172>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a62      	ldr	r2, [pc, #392]	; (8002824 <HAL_ADC_Init+0x2f8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Init+0x176>
 800269e:	4a65      	ldr	r2, [pc, #404]	; (8002834 <HAL_ADC_Init+0x308>)
 80026a0:	e000      	b.n	80026a4 <HAL_ADC_Init+0x178>
 80026a2:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_ADC_Init+0x30c>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f7ff fd1c 	bl	80020e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7f5b      	ldrb	r3, [r3, #29]
 80026b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d106      	bne.n	80026ec <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	045b      	lsls	r3, r3, #17
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b4b      	ldr	r3, [pc, #300]	; (800283c <HAL_ADC_Init+0x310>)
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	430b      	orrs	r3, r1
 800271a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fed1 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 800273c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fede 	bl	8002504 <LL_ADC_INJ_IsConversionOngoing>
 8002748:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d17f      	bne.n	8002850 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d17c      	bne.n	8002850 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800275a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002762:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002772:	f023 0302 	bic.w	r3, r3, #2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	430b      	orrs	r3, r1
 800277e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d017      	beq.n	80027b8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002796:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6911      	ldr	r1, [r2, #16]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027b6:	e013      	b.n	80027e0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d12a      	bne.n	8002840 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002800:	4311      	orrs	r1, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800280c:	430a      	orrs	r2, r1
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	e019      	b.n	8002850 <HAL_ADC_Init+0x324>
 800281c:	200001c4 	.word	0x200001c4
 8002820:	053e2d63 	.word	0x053e2d63
 8002824:	50000100 	.word	0x50000100
 8002828:	50000400 	.word	0x50000400
 800282c:	50000500 	.word	0x50000500
 8002830:	50000600 	.word	0x50000600
 8002834:	50000300 	.word	0x50000300
 8002838:	50000700 	.word	0x50000700
 800283c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d10c      	bne.n	8002872 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f023 010f 	bic.w	r1, r3, #15
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
 8002870:	e007      	b.n	8002882 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 020f 	bic.w	r2, r2, #15
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	65da      	str	r2, [r3, #92]	; 0x5c
 8002892:	e007      	b.n	80028a4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	; 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	bf00      	nop

080028b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c4:	d004      	beq.n	80028d0 <HAL_ADC_Start_DMA+0x20>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a5a      	ldr	r2, [pc, #360]	; (8002a34 <HAL_ADC_Start_DMA+0x184>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_Start_DMA+0x24>
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_ADC_Start_DMA+0x188>)
 80028d2:	e000      	b.n	80028d6 <HAL_ADC_Start_DMA+0x26>
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_ADC_Start_DMA+0x18c>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fd6a 	bl	80023b0 <LL_ADC_GetMultimode>
 80028dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fdfb 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 809b 	bne.w	8002a26 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Start_DMA+0x4e>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e096      	b.n	8002a2c <HAL_ADC_Start_DMA+0x17c>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <HAL_ADC_Start_DMA+0x190>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d008      	beq.n	8002922 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d002      	beq.n	8002922 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b09      	cmp	r3, #9
 8002920:	d17a      	bne.n	8002a18 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fcec 	bl	8003300 <ADC_Enable>
 8002928:	4603      	mov	r3, r0
 800292a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d16d      	bne.n	8002a0e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3a      	ldr	r2, [pc, #232]	; (8002a34 <HAL_ADC_Start_DMA+0x184>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_ADC_Start_DMA+0xb4>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <HAL_ADC_Start_DMA+0x194>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d002      	beq.n	8002960 <HAL_ADC_Start_DMA+0xb0>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	e003      	b.n	8002968 <HAL_ADC_Start_DMA+0xb8>
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_ADC_Start_DMA+0x198>)
 8002962:	e001      	b.n	8002968 <HAL_ADC_Start_DMA+0xb8>
 8002964:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	4293      	cmp	r3, r2
 800296e:	d002      	beq.n	8002976 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002992:	f023 0206 	bic.w	r2, r3, #6
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	661a      	str	r2, [r3, #96]	; 0x60
 800299a:	e002      	b.n	80029a2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <HAL_ADC_Start_DMA+0x19c>)
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <HAL_ADC_Start_DMA+0x1a0>)
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_ADC_Start_DMA+0x1a4>)
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	221c      	movs	r2, #28
 80029c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0210 	orr.w	r2, r2, #16
 80029d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3340      	adds	r3, #64	; 0x40
 80029f4:	4619      	mov	r1, r3
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f001 f85d 	bl	8003ab8 <HAL_DMA_Start_IT>
 80029fe:	4603      	mov	r3, r0
 8002a00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fd55 	bl	80024b6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a0c:	e00d      	b.n	8002a2a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002a16:	e008      	b.n	8002a2a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a24:	e001      	b.n	8002a2a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	50000100 	.word	0x50000100
 8002a38:	50000300 	.word	0x50000300
 8002a3c:	50000700 	.word	0x50000700
 8002a40:	50000600 	.word	0x50000600
 8002a44:	50000500 	.word	0x50000500
 8002a48:	50000400 	.word	0x50000400
 8002a4c:	080033c5 	.word	0x080033c5
 8002a50:	0800349d 	.word	0x0800349d
 8002a54:	080034b9 	.word	0x080034b9

08002a58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b0b6      	sub	sp, #216	; 0xd8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d102      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x24>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f000 bc13 	b.w	80032ca <HAL_ADC_ConfigChannel+0x84a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fd14 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 83f3 	bne.w	80032a4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f7ff fbf1 	bl	80022b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fd02 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 8002ada:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fd0e 	bl	8002504 <LL_ADC_INJ_IsConversionOngoing>
 8002ae8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 81d9 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 81d4 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b08:	d10f      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7ff fbf8 	bl	800230a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fb9f 	bl	8002266 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b28:	e00e      	b.n	8002b48 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f7ff fbe7 	bl	800230a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fb8f 	bl	8002266 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d022      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6919      	ldr	r1, [r3, #16]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b7a:	f7ff fae9 	bl	8002150 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6919      	ldr	r1, [r3, #16]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f7ff fb35 	bl	80021fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6919      	ldr	r1, [r3, #16]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	7f1b      	ldrb	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x126>
 8002ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba4:	e000      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x128>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f7ff fb41 	bl	8002230 <LL_ADC_SetOffsetSaturation>
 8002bae:	e17b      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff faee 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x15c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fae3 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	f003 021f 	and.w	r2, r3, #31
 8002bda:	e01e      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x19a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fad8 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	e004      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x1b2>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	e018      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x1e4>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e004      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d106      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff faa7 	bl	80021c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fa8b 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x222>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fa80 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	0e9b      	lsrs	r3, r3, #26
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	e01e      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x260>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fa75 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e004      	b.n	8002cde <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x278>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	e018      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x2aa>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e004      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d106      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fa44 	bl	80021c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fa28 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x2e8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2102      	movs	r1, #2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fa1d 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	f003 021f 	and.w	r2, r3, #31
 8002d66:	e01e      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x326>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fa12 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e004      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d105      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x33e>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	e016      	b.n	8002dec <HAL_ADC_ConfigChannel+0x36c>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e004      	b.n	8002dec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d106      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff f9e3 	bl	80021c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2103      	movs	r1, #3
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f9c7 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x3aa>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2103      	movs	r1, #3
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f9bc 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	e017      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x3da>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2103      	movs	r1, #3
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f9b1 	bl	8002198 <LL_ADC_GetOffsetChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e44:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x3f2>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	0e9b      	lsrs	r3, r3, #26
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	e011      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x416>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e003      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d106      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f98e 	bl	80021c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff faef 	bl	8002490 <LL_ADC_IsEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 813d 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f7ff fa4a 	bl	8002360 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4aa2      	ldr	r2, [pc, #648]	; (800315c <HAL_ADC_ConfigChannel+0x6dc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	f040 812e 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x480>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0e9b      	lsrs	r3, r3, #26
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e019      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x4b4>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f10:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f18:	2320      	movs	r3, #32
 8002f1a:	e003      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	2b09      	cmp	r3, #9
 8002f2c:	bf94      	ite	ls
 8002f2e:	2301      	movls	r3, #1
 8002f30:	2300      	movhi	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d079      	beq.n	800302c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x4d4>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	0e9b      	lsrs	r3, r3, #26
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	069b      	lsls	r3, r3, #26
 8002f4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f52:	e015      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x500>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	e003      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	069b      	lsls	r3, r3, #26
 8002f7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x520>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2101      	movs	r1, #1
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	e017      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x550>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e003      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2101      	movs	r1, #1
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	ea42 0103 	orr.w	r1, r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x576>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	051b      	lsls	r3, r3, #20
 8002ff4:	e018      	b.n	8003028 <HAL_ADC_ConfigChannel+0x5a8>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e003      	b.n	800301a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003028:	430b      	orrs	r3, r1
 800302a:	e07e      	b.n	800312a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x5c8>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	3301      	adds	r3, #1
 8003040:	069b      	lsls	r3, r3, #26
 8003042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003046:	e015      	b.n	8003074 <HAL_ADC_ConfigChannel+0x5f4>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e003      	b.n	800306c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	069b      	lsls	r3, r3, #26
 8003070:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x614>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	3301      	adds	r3, #1
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	e017      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x644>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	61fb      	str	r3, [r7, #28]
  return result;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e003      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	ea42 0103 	orr.w	r1, r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10d      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x670>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	3b1e      	subs	r3, #30
 80030e8:	051b      	lsls	r3, r3, #20
 80030ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ee:	e01b      	b.n	8003128 <HAL_ADC_ConfigChannel+0x6a8>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	613b      	str	r3, [r7, #16]
  return result;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	e003      	b.n	8003114 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	3301      	adds	r3, #1
 8003116:	f003 021f 	and.w	r2, r3, #31
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	3b1e      	subs	r3, #30
 8003122:	051b      	lsls	r3, r3, #20
 8003124:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003128:	430b      	orrs	r3, r1
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	6892      	ldr	r2, [r2, #8]
 800312e:	4619      	mov	r1, r3
 8003130:	f7ff f8eb 	bl	800230a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_ADC_ConfigChannel+0x6e0>)
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80be 	beq.w	80032be <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314a:	d004      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x6d6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a04      	ldr	r2, [pc, #16]	; (8003164 <HAL_ADC_ConfigChannel+0x6e4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10a      	bne.n	800316c <HAL_ADC_ConfigChannel+0x6ec>
 8003156:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_ADC_ConfigChannel+0x6e8>)
 8003158:	e009      	b.n	800316e <HAL_ADC_ConfigChannel+0x6ee>
 800315a:	bf00      	nop
 800315c:	407f0000 	.word	0x407f0000
 8003160:	80080000 	.word	0x80080000
 8003164:	50000100 	.word	0x50000100
 8003168:	50000300 	.word	0x50000300
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_ADC_ConfigChannel+0x854>)
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe ffe0 	bl	8002134 <LL_ADC_GetCommonPathInternalCh>
 8003174:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a56      	ldr	r2, [pc, #344]	; (80032d8 <HAL_ADC_ConfigChannel+0x858>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_ADC_ConfigChannel+0x70c>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a55      	ldr	r2, [pc, #340]	; (80032dc <HAL_ADC_ConfigChannel+0x85c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d13a      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800318c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d134      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a0:	d005      	beq.n	80031ae <HAL_ADC_ConfigChannel+0x72e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4e      	ldr	r2, [pc, #312]	; (80032e0 <HAL_ADC_ConfigChannel+0x860>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	f040 8085 	bne.w	80032b8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b6:	d004      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0x742>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a49      	ldr	r2, [pc, #292]	; (80032e4 <HAL_ADC_ConfigChannel+0x864>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x746>
 80031c2:	4a49      	ldr	r2, [pc, #292]	; (80032e8 <HAL_ADC_ConfigChannel+0x868>)
 80031c4:	e000      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x748>
 80031c6:	4a43      	ldr	r2, [pc, #268]	; (80032d4 <HAL_ADC_ConfigChannel+0x854>)
 80031c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7fe ff9b 	bl	800210e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d8:	4b44      	ldr	r3, [pc, #272]	; (80032ec <HAL_ADC_ConfigChannel+0x86c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <HAL_ADC_ConfigChannel+0x870>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031f2:	e002      	b.n	80031fa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f9      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003200:	e05a      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3b      	ldr	r2, [pc, #236]	; (80032f4 <HAL_ADC_ConfigChannel+0x874>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d125      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x7d8>
 800320c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d11f      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a31      	ldr	r2, [pc, #196]	; (80032e4 <HAL_ADC_ConfigChannel+0x864>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d104      	bne.n	800322c <HAL_ADC_ConfigChannel+0x7ac>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a34      	ldr	r2, [pc, #208]	; (80032f8 <HAL_ADC_ConfigChannel+0x878>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d047      	beq.n	80032bc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003234:	d004      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x7c0>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_ADC_ConfigChannel+0x864>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x7c4>
 8003240:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <HAL_ADC_ConfigChannel+0x868>)
 8003242:	e000      	b.n	8003246 <HAL_ADC_ConfigChannel+0x7c6>
 8003244:	4a23      	ldr	r2, [pc, #140]	; (80032d4 <HAL_ADC_ConfigChannel+0x854>)
 8003246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800324a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7fe ff5c 	bl	800210e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003256:	e031      	b.n	80032bc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a27      	ldr	r2, [pc, #156]	; (80032fc <HAL_ADC_ConfigChannel+0x87c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d12d      	bne.n	80032be <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d127      	bne.n	80032be <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_ADC_ConfigChannel+0x864>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003280:	d004      	beq.n	800328c <HAL_ADC_ConfigChannel+0x80c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <HAL_ADC_ConfigChannel+0x864>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x810>
 800328c:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <HAL_ADC_ConfigChannel+0x868>)
 800328e:	e000      	b.n	8003292 <HAL_ADC_ConfigChannel+0x812>
 8003290:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <HAL_ADC_ConfigChannel+0x854>)
 8003292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003296:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7fe ff36 	bl	800210e <LL_ADC_SetCommonPathInternalCh>
 80032a2:	e00c      	b.n	80032be <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80032b6:	e002      	b.n	80032be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	37d8      	adds	r7, #216	; 0xd8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	50000700 	.word	0x50000700
 80032d8:	c3210000 	.word	0xc3210000
 80032dc:	90c00010 	.word	0x90c00010
 80032e0:	50000600 	.word	0x50000600
 80032e4:	50000100 	.word	0x50000100
 80032e8:	50000300 	.word	0x50000300
 80032ec:	200001c4 	.word	0x200001c4
 80032f0:	053e2d63 	.word	0x053e2d63
 80032f4:	c7520000 	.word	0xc7520000
 80032f8:	50000500 	.word	0x50000500
 80032fc:	cb840000 	.word	0xcb840000

08003300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f8bf 	bl	8002490 <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d14d      	bne.n	80033b4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <ADC_Enable+0xc0>)
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f043 0210 	orr.w	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e039      	b.n	80033b6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f88e 	bl	8002468 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800334c:	f7fe fe9e 	bl	800208c <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003352:	e028      	b.n	80033a6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f899 	bl	8002490 <LL_ADC_IsEnabled>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f87d 	bl	8002468 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800336e:	f7fe fe8d 	bl	800208c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d914      	bls.n	80033a6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d00d      	beq.n	80033a6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	f043 0210 	orr.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d1cf      	bne.n	8003354 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	8000003f 	.word	0x8000003f

080033c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d14b      	bne.n	8003476 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d021      	beq.n	800343c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe ff45 	bl	800228c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d032      	beq.n	800346e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d12b      	bne.n	800346e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11f      	bne.n	800346e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	65da      	str	r2, [r3, #92]	; 0x5c
 800343a:	e018      	b.n	800346e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d111      	bne.n	800346e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7fe f90a 	bl	8001688 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003474:	e00e      	b.n	8003494 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff faf2 	bl	8002a6c <HAL_ADC_ErrorCallback>
}
 8003488:	e004      	b.n	8003494 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff fad4 	bl	8002a58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	f043 0204 	orr.w	r2, r3, #4
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff fac4 	bl	8002a6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <LL_ADC_IsEnabled>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <LL_ADC_IsEnabled+0x18>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <LL_ADC_IsEnabled+0x1a>
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <LL_ADC_REG_IsConversionOngoing>:
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d101      	bne.n	800352a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b0a1      	sub	sp, #132	; 0x84
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003552:	2302      	movs	r3, #2
 8003554:	e0e7      	b.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800355e:	2300      	movs	r3, #0
 8003560:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003562:	2300      	movs	r3, #0
 8003564:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800356e:	d102      	bne.n	8003576 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003570:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	e009      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6e      	ldr	r2, [pc, #440]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d102      	bne.n	8003586 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003580:	4b6d      	ldr	r3, [pc, #436]	; (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	e001      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0be      	b.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ffb1 	bl	8003512 <LL_ADC_REG_IsConversionOngoing>
 80035b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ffab 	bl	8003512 <LL_ADC_REG_IsConversionOngoing>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 80a0 	bne.w	8003704 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 809c 	bne.w	8003704 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d4:	d004      	beq.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a55      	ldr	r2, [pc, #340]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035e0:	4b56      	ldr	r3, [pc, #344]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80035e2:	e000      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80035e6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d04b      	beq.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003602:	035b      	lsls	r3, r3, #13
 8003604:	430b      	orrs	r3, r1
 8003606:	431a      	orrs	r2, r3
 8003608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003614:	d004      	beq.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a45      	ldr	r2, [pc, #276]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10f      	bne.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003620:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003624:	f7ff ff62 	bl	80034ec <LL_ADC_IsEnabled>
 8003628:	4604      	mov	r4, r0
 800362a:	4841      	ldr	r0, [pc, #260]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800362c:	f7ff ff5e 	bl	80034ec <LL_ADC_IsEnabled>
 8003630:	4603      	mov	r3, r0
 8003632:	4323      	orrs	r3, r4
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e012      	b.n	8003666 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003640:	483c      	ldr	r0, [pc, #240]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003642:	f7ff ff53 	bl	80034ec <LL_ADC_IsEnabled>
 8003646:	4604      	mov	r4, r0
 8003648:	483b      	ldr	r0, [pc, #236]	; (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800364a:	f7ff ff4f 	bl	80034ec <LL_ADC_IsEnabled>
 800364e:	4603      	mov	r3, r0
 8003650:	431c      	orrs	r4, r3
 8003652:	483c      	ldr	r0, [pc, #240]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003654:	f7ff ff4a 	bl	80034ec <LL_ADC_IsEnabled>
 8003658:	4603      	mov	r3, r0
 800365a:	4323      	orrs	r3, r4
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d056      	beq.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800366a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003672:	f023 030f 	bic.w	r3, r3, #15
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	6811      	ldr	r1, [r2, #0]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	430a      	orrs	r2, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003684:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003686:	e047      	b.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003692:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369c:	d004      	beq.n	80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a23      	ldr	r2, [pc, #140]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10f      	bne.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80036a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036ac:	f7ff ff1e 	bl	80034ec <LL_ADC_IsEnabled>
 80036b0:	4604      	mov	r4, r0
 80036b2:	481f      	ldr	r0, [pc, #124]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036b4:	f7ff ff1a 	bl	80034ec <LL_ADC_IsEnabled>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4323      	orrs	r3, r4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e012      	b.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80036c8:	481a      	ldr	r0, [pc, #104]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036ca:	f7ff ff0f 	bl	80034ec <LL_ADC_IsEnabled>
 80036ce:	4604      	mov	r4, r0
 80036d0:	4819      	ldr	r0, [pc, #100]	; (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036d2:	f7ff ff0b 	bl	80034ec <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	431c      	orrs	r4, r3
 80036da:	481a      	ldr	r0, [pc, #104]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036dc:	f7ff ff06 	bl	80034ec <LL_ADC_IsEnabled>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4323      	orrs	r3, r4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d012      	beq.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036fa:	f023 030f 	bic.w	r3, r3, #15
 80036fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003700:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003702:	e009      	b.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003716:	e000      	b.n	800371a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003718:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003722:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003726:	4618      	mov	r0, r3
 8003728:	3784      	adds	r7, #132	; 0x84
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop
 8003730:	50000100 	.word	0x50000100
 8003734:	50000400 	.word	0x50000400
 8003738:	50000500 	.word	0x50000500
 800373c:	50000300 	.word	0x50000300
 8003740:	50000700 	.word	0x50000700
 8003744:	50000600 	.word	0x50000600

08003748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377a:	4a04      	ldr	r2, [pc, #16]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	60d3      	str	r3, [r2, #12]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f003 0307 	and.w	r3, r3, #7
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	db0b      	blt.n	80037d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4907      	ldr	r1, [pc, #28]	; (80037e4 <__NVIC_EnableIRQ+0x38>)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2001      	movs	r0, #1
 80037ce:	fa00 f202 	lsl.w	r2, r0, r2
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	; (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	; 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b4:	d301      	bcc.n	80038ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ba:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <SysTick_Config+0x40>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c2:	210f      	movs	r1, #15
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c8:	f7ff ff8e 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <SysTick_Config+0x40>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <SysTick_Config+0x40>)
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff29 	bl	8003748 <__NVIC_SetPriorityGrouping>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800390c:	f7ff ff40 	bl	8003790 <__NVIC_GetPriorityGrouping>
 8003910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff90 	bl	800383c <NVIC_EncodePriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff5f 	bl	80037e8 <__NVIC_SetPriority>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff33 	bl	80037ac <__NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffa4 	bl	80038a4 <SysTick_Config>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e08d      	b.n	8003a96 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_DMA_Init+0x138>)
 8003982:	429a      	cmp	r2, r3
 8003984:	d80f      	bhi.n	80039a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <HAL_DMA_Init+0x13c>)
 800398e:	4413      	add	r3, r2
 8003990:	4a45      	ldr	r2, [pc, #276]	; (8003aa8 <HAL_DMA_Init+0x140>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	009a      	lsls	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_DMA_Init+0x144>)
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
 80039a4:	e00e      	b.n	80039c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <HAL_DMA_Init+0x148>)
 80039ae:	4413      	add	r3, r2
 80039b0:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_DMA_Init+0x140>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a3c      	ldr	r2, [pc, #240]	; (8003ab4 <HAL_DMA_Init+0x14c>)
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fa76 	bl	8003f08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a24:	d102      	bne.n	8003a2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a40:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_DMA_Init+0x104>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d80c      	bhi.n	8003a6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa96 	bl	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	e008      	b.n	8003a7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40020407 	.word	0x40020407
 8003aa4:	bffdfff8 	.word	0xbffdfff8
 8003aa8:	cccccccd 	.word	0xcccccccd
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	bffdfbf8 	.word	0xbffdfbf8
 8003ab4:	40020400 	.word	0x40020400

08003ab8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Start_IT+0x20>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e066      	b.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d155      	bne.n	8003b98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f9bb 	bl	8003e8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 020e 	orr.w	r2, r2, #14
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e00f      	b.n	8003b50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 020a 	orr.w	r2, r2, #10
 8003b4e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e005      	b.n	8003ba4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d005      	beq.n	8003bd2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
 8003bd0:	e037      	b.n	8003c42 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 020e 	bic.w	r2, r2, #14
 8003be0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f003 021f 	and.w	r2, r3, #31
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f202 	lsl.w	r2, r1, r2
 8003c14:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c1e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00c      	beq.n	8003c42 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c36:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c40:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d00d      	beq.n	8003c94 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	e047      	b.n	8003d24 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 020e 	bic.w	r2, r2, #14
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ce0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d02:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
    }
  }
  return status;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2204      	movs	r2, #4
 8003d50:	409a      	lsls	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d026      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x7a>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d021      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f003 021f 	and.w	r2, r3, #31
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2104      	movs	r1, #4
 8003d90:	fa01 f202 	lsl.w	r2, r1, r2
 8003d94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d071      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003da6:	e06c      	b.n	8003e82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2202      	movs	r2, #2
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d029      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10b      	bne.n	8003dec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 020a 	bic.w	r2, r2, #10
 8003de2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	2102      	movs	r1, #2
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d038      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e18:	e033      	b.n	8003e82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2208      	movs	r2, #8
 8003e24:	409a      	lsls	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d02a      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d025      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 020e 	bic.w	r2, r2, #14
 8003e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
}
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ea2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f003 021f 	and.w	r2, r3, #31
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d108      	bne.n	8003eec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eea:	e007      	b.n	8003efc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d802      	bhi.n	8003f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e001      	b.n	8003f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	3b08      	subs	r3, #8
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	009a      	lsls	r2, r3, #2
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f52:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40020407 	.word	0x40020407
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020820 	.word	0x40020820
 8003f7c:	cccccccd 	.word	0xcccccccd
 8003f80:	40020880 	.word	0x40020880

08003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fa6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	1000823f 	.word	0x1000823f
 8003fc8:	40020940 	.word	0x40020940

08003fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fda:	e15a      	b.n	8004292 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 814c 	beq.w	800428c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d005      	beq.n	800400c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004008:	2b02      	cmp	r3, #2
 800400a:	d130      	bne.n	800406e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004042:	2201      	movs	r2, #1
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 0201 	and.w	r2, r3, #1
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b03      	cmp	r3, #3
 8004078:	d017      	beq.n	80040aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	2203      	movs	r2, #3
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d123      	bne.n	80040fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	08da      	lsrs	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3208      	adds	r2, #8
 80040be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	220f      	movs	r2, #15
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	08da      	lsrs	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3208      	adds	r2, #8
 80040f8:	6939      	ldr	r1, [r7, #16]
 80040fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	2203      	movs	r2, #3
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0203 	and.w	r2, r3, #3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80a6 	beq.w	800428c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004140:	4b5b      	ldr	r3, [pc, #364]	; (80042b0 <HAL_GPIO_Init+0x2e4>)
 8004142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004144:	4a5a      	ldr	r2, [pc, #360]	; (80042b0 <HAL_GPIO_Init+0x2e4>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6613      	str	r3, [r2, #96]	; 0x60
 800414c:	4b58      	ldr	r3, [pc, #352]	; (80042b0 <HAL_GPIO_Init+0x2e4>)
 800414e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004158:	4a56      	ldr	r2, [pc, #344]	; (80042b4 <HAL_GPIO_Init+0x2e8>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	3302      	adds	r3, #2
 8004160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	220f      	movs	r2, #15
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004182:	d01f      	beq.n	80041c4 <HAL_GPIO_Init+0x1f8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a4c      	ldr	r2, [pc, #304]	; (80042b8 <HAL_GPIO_Init+0x2ec>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d019      	beq.n	80041c0 <HAL_GPIO_Init+0x1f4>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a4b      	ldr	r2, [pc, #300]	; (80042bc <HAL_GPIO_Init+0x2f0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_GPIO_Init+0x1f0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a4a      	ldr	r2, [pc, #296]	; (80042c0 <HAL_GPIO_Init+0x2f4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00d      	beq.n	80041b8 <HAL_GPIO_Init+0x1ec>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a49      	ldr	r2, [pc, #292]	; (80042c4 <HAL_GPIO_Init+0x2f8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <HAL_GPIO_Init+0x1e8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a48      	ldr	r2, [pc, #288]	; (80042c8 <HAL_GPIO_Init+0x2fc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <HAL_GPIO_Init+0x1e4>
 80041ac:	2305      	movs	r3, #5
 80041ae:	e00a      	b.n	80041c6 <HAL_GPIO_Init+0x1fa>
 80041b0:	2306      	movs	r3, #6
 80041b2:	e008      	b.n	80041c6 <HAL_GPIO_Init+0x1fa>
 80041b4:	2304      	movs	r3, #4
 80041b6:	e006      	b.n	80041c6 <HAL_GPIO_Init+0x1fa>
 80041b8:	2303      	movs	r3, #3
 80041ba:	e004      	b.n	80041c6 <HAL_GPIO_Init+0x1fa>
 80041bc:	2302      	movs	r3, #2
 80041be:	e002      	b.n	80041c6 <HAL_GPIO_Init+0x1fa>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_GPIO_Init+0x1fa>
 80041c4:	2300      	movs	r3, #0
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	f002 0203 	and.w	r2, r2, #3
 80041cc:	0092      	lsls	r2, r2, #2
 80041ce:	4093      	lsls	r3, r2
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041d6:	4937      	ldr	r1, [pc, #220]	; (80042b4 <HAL_GPIO_Init+0x2e8>)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	089b      	lsrs	r3, r3, #2
 80041dc:	3302      	adds	r3, #2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041e4:	4b39      	ldr	r3, [pc, #228]	; (80042cc <HAL_GPIO_Init+0x300>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004208:	4a30      	ldr	r2, [pc, #192]	; (80042cc <HAL_GPIO_Init+0x300>)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800420e:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <HAL_GPIO_Init+0x300>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43db      	mvns	r3, r3
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004232:	4a26      	ldr	r2, [pc, #152]	; (80042cc <HAL_GPIO_Init+0x300>)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004238:	4b24      	ldr	r3, [pc, #144]	; (80042cc <HAL_GPIO_Init+0x300>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	43db      	mvns	r3, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_GPIO_Init+0x300>)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_GPIO_Init+0x300>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	43db      	mvns	r3, r3
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004286:	4a11      	ldr	r2, [pc, #68]	; (80042cc <HAL_GPIO_Init+0x300>)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	3301      	adds	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	f47f ae9d 	bne.w	8003fdc <HAL_GPIO_Init+0x10>
  }
}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40010000 	.word	0x40010000
 80042b8:	48000400 	.word	0x48000400
 80042bc:	48000800 	.word	0x48000800
 80042c0:	48000c00 	.word	0x48000c00
 80042c4:	48001000 	.word	0x48001000
 80042c8:	48001400 	.word	0x48001400
 80042cc:	40010400 	.word	0x40010400

080042d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]
 80042dc:	4613      	mov	r3, r2
 80042de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042e0:	787b      	ldrb	r3, [r7, #1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042e6:	887a      	ldrh	r2, [r7, #2]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042ec:	e002      	b.n	80042f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ee:	887a      	ldrh	r2, [r7, #2]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800430a:	4b08      	ldr	r3, [pc, #32]	; (800432c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d006      	beq.n	8004324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f806 	bl	8004330 <HAL_GPIO_EXTI_Callback>
  }
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40010400 	.word	0x40010400

08004330 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d141      	bne.n	80043da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004356:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004362:	d131      	bne.n	80043c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004364:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800436a:	4a46      	ldr	r2, [pc, #280]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004374:	4b43      	ldr	r3, [pc, #268]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800437c:	4a41      	ldr	r2, [pc, #260]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004384:	4b40      	ldr	r3, [pc, #256]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2232      	movs	r2, #50	; 0x32
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	4a3f      	ldr	r2, [pc, #252]	; (800448c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	0c9b      	lsrs	r3, r3, #18
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800439a:	e002      	b.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a2:	4b38      	ldr	r3, [pc, #224]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	d102      	bne.n	80043b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f2      	bne.n	800439c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043b6:	4b33      	ldr	r3, [pc, #204]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d158      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e057      	b.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c8:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ce:	4a2d      	ldr	r2, [pc, #180]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043d8:	e04d      	b.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d141      	bne.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043e2:	4b28      	ldr	r3, [pc, #160]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ee:	d131      	bne.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f6:	4a23      	ldr	r2, [pc, #140]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004408:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800440e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004410:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2232      	movs	r2, #50	; 0x32
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	4a1c      	ldr	r2, [pc, #112]	; (800448c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	0c9b      	lsrs	r3, r3, #18
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004426:	e002      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3b01      	subs	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443a:	d102      	bne.n	8004442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f2      	bne.n	8004428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d112      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e011      	b.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445a:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004464:	e007      	b.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004474:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40007000 	.word	0x40007000
 8004488:	200001c4 	.word	0x200001c4
 800448c:	431bde83 	.word	0x431bde83

08004490 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800449a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800449e:	6093      	str	r3, [r2, #8]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40007000 	.word	0x40007000

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e306      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d075      	beq.n	80045ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ce:	4b97      	ldr	r3, [pc, #604]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d8:	4b94      	ldr	r3, [pc, #592]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	d102      	bne.n	80044ee <HAL_RCC_OscConfig+0x3e>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_OscConfig+0x44>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d10b      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	4b8d      	ldr	r3, [pc, #564]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d05b      	beq.n	80045b8 <HAL_RCC_OscConfig+0x108>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d157      	bne.n	80045b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e2e1      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d106      	bne.n	8004524 <HAL_RCC_OscConfig+0x74>
 8004516:	4b85      	ldr	r3, [pc, #532]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a84      	ldr	r2, [pc, #528]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b7f      	ldr	r3, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b7c      	ldr	r3, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7b      	ldr	r2, [pc, #492]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004548:	4b78      	ldr	r3, [pc, #480]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a77      	ldr	r2, [pc, #476]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b75      	ldr	r3, [pc, #468]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a74      	ldr	r2, [pc, #464]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fd90 	bl	800208c <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fd fd8c 	bl	800208c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e2a6      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004582:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xc0>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fd fd7c 	bl	800208c <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fd fd78 	bl	800208c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e292      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045aa:	4b60      	ldr	r3, [pc, #384]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0xe8>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d075      	beq.n	80046b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045c6:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d0:	4b56      	ldr	r3, [pc, #344]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d102      	bne.n	80045e6 <HAL_RCC_OscConfig+0x136>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d002      	beq.n	80045ec <HAL_RCC_OscConfig+0x13c>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d11f      	bne.n	800462c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ec:	4b4f      	ldr	r3, [pc, #316]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_OscConfig+0x154>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e265      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004604:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	4946      	ldr	r1, [pc, #280]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004618:	4b45      	ldr	r3, [pc, #276]	; (8004730 <HAL_RCC_OscConfig+0x280>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd fce9 	bl	8001ff4 <HAL_InitTick>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d043      	beq.n	80046b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e251      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d023      	beq.n	800467c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004634:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a3c      	ldr	r2, [pc, #240]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd fd24 	bl	800208c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004648:	f7fd fd20 	bl	800208c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e23a      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	061b      	lsls	r3, r3, #24
 8004674:	492d      	ldr	r1, [pc, #180]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	604b      	str	r3, [r1, #4]
 800467a:	e01a      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467c:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2a      	ldr	r2, [pc, #168]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fd fd00 	bl	800208c <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004690:	f7fd fcfc 	bl	800208c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e216      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x1e0>
 80046ae:	e000      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d041      	beq.n	8004742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01c      	beq.n	8004700 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80046c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046cc:	4a17      	ldr	r2, [pc, #92]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fd fcd9 	bl	800208c <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7fd fcd5 	bl	800208c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1ef      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ef      	beq.n	80046de <HAL_RCC_OscConfig+0x22e>
 80046fe:	e020      	b.n	8004742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_OscConfig+0x27c>)
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd fcbc 	bl	800208c <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004716:	e00d      	b.n	8004734 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004718:	f7fd fcb8 	bl	800208c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d906      	bls.n	8004734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1d2      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	200001c8 	.word	0x200001c8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004734:	4b8c      	ldr	r3, [pc, #560]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ea      	bne.n	8004718 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80a6 	beq.w	800489c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004750:	2300      	movs	r3, #0
 8004752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004754:	4b84      	ldr	r3, [pc, #528]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_OscConfig+0x2b4>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x2b6>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00d      	beq.n	8004786 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476a:	4b7f      	ldr	r3, [pc, #508]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	4a7e      	ldr	r2, [pc, #504]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004774:	6593      	str	r3, [r2, #88]	; 0x58
 8004776:	4b7c      	ldr	r3, [pc, #496]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004782:	2301      	movs	r3, #1
 8004784:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004786:	4b79      	ldr	r3, [pc, #484]	; (800496c <HAL_RCC_OscConfig+0x4bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d118      	bne.n	80047c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004792:	4b76      	ldr	r3, [pc, #472]	; (800496c <HAL_RCC_OscConfig+0x4bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a75      	ldr	r2, [pc, #468]	; (800496c <HAL_RCC_OscConfig+0x4bc>)
 8004798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800479e:	f7fd fc75 	bl	800208c <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a6:	f7fd fc71 	bl	800208c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e18b      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b8:	4b6c      	ldr	r3, [pc, #432]	; (800496c <HAL_RCC_OscConfig+0x4bc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d108      	bne.n	80047de <HAL_RCC_OscConfig+0x32e>
 80047cc:	4b66      	ldr	r3, [pc, #408]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	4a65      	ldr	r2, [pc, #404]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047dc:	e024      	b.n	8004828 <HAL_RCC_OscConfig+0x378>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d110      	bne.n	8004808 <HAL_RCC_OscConfig+0x358>
 80047e6:	4b60      	ldr	r3, [pc, #384]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	4a5e      	ldr	r2, [pc, #376]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80047ee:	f043 0304 	orr.w	r3, r3, #4
 80047f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047f6:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	4a5a      	ldr	r2, [pc, #360]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004806:	e00f      	b.n	8004828 <HAL_RCC_OscConfig+0x378>
 8004808:	4b57      	ldr	r3, [pc, #348]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	4a56      	ldr	r2, [pc, #344]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d016      	beq.n	800485e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd fc2c 	bl	800208c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd fc28 	bl	800208c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e140      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800484e:	4b46      	ldr	r3, [pc, #280]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ed      	beq.n	8004838 <HAL_RCC_OscConfig+0x388>
 800485c:	e015      	b.n	800488a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485e:	f7fd fc15 	bl	800208c <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd fc11 	bl	800208c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e129      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800487c:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1ed      	bne.n	8004866 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800488a:	7ffb      	ldrb	r3, [r7, #31]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004890:	4b35      	ldr	r3, [pc, #212]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	4a34      	ldr	r2, [pc, #208]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d03c      	beq.n	8004922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048b0:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048b6:	4a2c      	ldr	r2, [pc, #176]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd fbe4 	bl	800208c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c8:	f7fd fbe0 	bl	800208c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0fa      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048da:	4b23      	ldr	r3, [pc, #140]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80048dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0ef      	beq.n	80048c8 <HAL_RCC_OscConfig+0x418>
 80048e8:	e01b      	b.n	8004922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ea:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80048ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fa:	f7fd fbc7 	bl	800208c <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004902:	f7fd fbc3 	bl	800208c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0dd      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1ef      	bne.n	8004902 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80d1 	beq.w	8004ace <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030c 	and.w	r3, r3, #12
 8004934:	2b0c      	cmp	r3, #12
 8004936:	f000 808b 	beq.w	8004a50 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d15e      	bne.n	8004a00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a08      	ldr	r2, [pc, #32]	; (8004968 <HAL_RCC_OscConfig+0x4b8>)
 8004948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800494c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd fb9d 	bl	800208c <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004954:	e00c      	b.n	8004970 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004956:	f7fd fb99 	bl	800208c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d905      	bls.n	8004970 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e0b3      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
 8004968:	40021000 	.word	0x40021000
 800496c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1ec      	bne.n	8004956 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800497c:	4b56      	ldr	r3, [pc, #344]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	4b56      	ldr	r3, [pc, #344]	; (8004adc <HAL_RCC_OscConfig+0x62c>)
 8004982:	4013      	ands	r3, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6a11      	ldr	r1, [r2, #32]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800498c:	3a01      	subs	r2, #1
 800498e:	0112      	lsls	r2, r2, #4
 8004990:	4311      	orrs	r1, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004996:	0212      	lsls	r2, r2, #8
 8004998:	4311      	orrs	r1, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800499e:	0852      	lsrs	r2, r2, #1
 80049a0:	3a01      	subs	r2, #1
 80049a2:	0552      	lsls	r2, r2, #21
 80049a4:	4311      	orrs	r1, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049aa:	0852      	lsrs	r2, r2, #1
 80049ac:	3a01      	subs	r2, #1
 80049ae:	0652      	lsls	r2, r2, #25
 80049b0:	4311      	orrs	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049b6:	06d2      	lsls	r2, r2, #27
 80049b8:	430a      	orrs	r2, r1
 80049ba:	4947      	ldr	r1, [pc, #284]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c0:	4b45      	ldr	r3, [pc, #276]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a44      	ldr	r2, [pc, #272]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049cc:	4b42      	ldr	r3, [pc, #264]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a41      	ldr	r2, [pc, #260]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd fb58 	bl	800208c <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fd fb54 	bl	800208c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e06e      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x530>
 80049fe:	e066      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a00:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a0c:	4b32      	ldr	r3, [pc, #200]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a31      	ldr	r2, [pc, #196]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a18:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a2e      	ldr	r2, [pc, #184]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fd fb30 	bl	800208c <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fd fb2c 	bl	800208c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e046      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a42:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x580>
 8004a4e:	e03e      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e039      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 0203 	and.w	r2, r3, #3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d12c      	bne.n	8004aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d123      	bne.n	8004aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d11b      	bne.n	8004aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d113      	bne.n	8004aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d109      	bne.n	8004aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d001      	beq.n	8004ace <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	019f800c 	.word	0x019f800c

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e11e      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b91      	ldr	r3, [pc, #580]	; (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d910      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b8e      	ldr	r3, [pc, #568]	; (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 020f 	bic.w	r2, r3, #15
 8004b0e:	498c      	ldr	r1, [pc, #560]	; (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b8a      	ldr	r3, [pc, #552]	; (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e106      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d073      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d129      	bne.n	8004b90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3c:	4b81      	ldr	r3, [pc, #516]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0f4      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b4c:	f000 f99e 	bl	8004e8c <RCC_GetSysClockFreqFromPLLSource>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4a7c      	ldr	r2, [pc, #496]	; (8004d48 <HAL_RCC_ClockConfig+0x268>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d93f      	bls.n	8004bda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b5a:	4b7a      	ldr	r3, [pc, #488]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d033      	beq.n	8004bda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d12f      	bne.n	8004bda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b7a:	4b72      	ldr	r3, [pc, #456]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b82:	4a70      	ldr	r2, [pc, #448]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e024      	b.n	8004bda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b98:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0c6      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba8:	4b66      	ldr	r3, [pc, #408]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0be      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004bb8:	f000 f8ce 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4a61      	ldr	r2, [pc, #388]	; (8004d48 <HAL_RCC_ClockConfig+0x268>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d909      	bls.n	8004bda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bc6:	4b5f      	ldr	r3, [pc, #380]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bce:	4a5d      	ldr	r2, [pc, #372]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b5a      	ldr	r3, [pc, #360]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4957      	ldr	r1, [pc, #348]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fd fa4e 	bl	800208c <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fd fa4a 	bl	800208c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e095      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b4e      	ldr	r3, [pc, #312]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d023      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c34:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a42      	ldr	r2, [pc, #264]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c4c:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c54:	4a3b      	ldr	r2, [pc, #236]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5c:	4b39      	ldr	r3, [pc, #228]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4936      	ldr	r1, [pc, #216]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d105      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c76:	4b33      	ldr	r3, [pc, #204]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4a32      	ldr	r2, [pc, #200]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c82:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d21d      	bcs.n	8004ccc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c90:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 020f 	bic.w	r2, r3, #15
 8004c98:	4929      	ldr	r1, [pc, #164]	; (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ca0:	f7fd f9f4 	bl	800208c <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fd f9f0 	bl	800208c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e03b      	b.n	8004d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <HAL_RCC_ClockConfig+0x260>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1ed      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4917      	ldr	r1, [pc, #92]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	490f      	ldr	r1, [pc, #60]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d0a:	f000 f825 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_RCC_ClockConfig+0x264>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	490c      	ldr	r1, [pc, #48]	; (8004d4c <HAL_RCC_ClockConfig+0x26c>)
 8004d1c:	5ccb      	ldrb	r3, [r1, r3]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	fa22 f303 	lsr.w	r3, r2, r3
 8004d26:	4a0a      	ldr	r2, [pc, #40]	; (8004d50 <HAL_RCC_ClockConfig+0x270>)
 8004d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_RCC_ClockConfig+0x274>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd f960 	bl	8001ff4 <HAL_InitTick>
 8004d34:	4603      	mov	r3, r0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40022000 	.word	0x40022000
 8004d44:	40021000 	.word	0x40021000
 8004d48:	04c4b400 	.word	0x04c4b400
 8004d4c:	0800a7fc 	.word	0x0800a7fc
 8004d50:	200001c4 	.word	0x200001c4
 8004d54:	200001c8 	.word	0x200001c8

08004d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d5e:	4b2c      	ldr	r3, [pc, #176]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d102      	bne.n	8004d70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d6a:	4b2a      	ldr	r3, [pc, #168]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	e047      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d70:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d102      	bne.n	8004d82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d7c:	4b26      	ldr	r3, [pc, #152]	; (8004e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	e03e      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d82:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d136      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	3301      	adds	r3, #1
 8004da4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d10c      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dac:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	68d2      	ldr	r2, [r2, #12]
 8004db8:	0a12      	lsrs	r2, r2, #8
 8004dba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	617b      	str	r3, [r7, #20]
      break;
 8004dc4:	e00c      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dc6:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd0:	68d2      	ldr	r2, [r2, #12]
 8004dd2:	0a12      	lsrs	r2, r2, #8
 8004dd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dd8:	fb02 f303 	mul.w	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
      break;
 8004dde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	0e5b      	lsrs	r3, r3, #25
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	3301      	adds	r3, #1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	e001      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e00:	693b      	ldr	r3, [r7, #16]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40021000 	.word	0x40021000
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	016e3600 	.word	0x016e3600

08004e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e20:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	200001c4 	.word	0x200001c4

08004e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e38:	f7ff fff0 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0a1b      	lsrs	r3, r3, #8
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4904      	ldr	r1, [pc, #16]	; (8004e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	0800a80c 	.word	0x0800a80c

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e64:	f7ff ffda 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0adb      	lsrs	r3, r3, #11
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4904      	ldr	r1, [pc, #16]	; (8004e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40021000 	.word	0x40021000
 8004e88:	0800a80c 	.word	0x0800a80c

08004e8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e92:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d10c      	bne.n	8004eca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb0:	4a17      	ldr	r2, [pc, #92]	; (8004f10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eba:	68d2      	ldr	r2, [r2, #12]
 8004ebc:	0a12      	lsrs	r2, r2, #8
 8004ebe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	617b      	str	r3, [r7, #20]
    break;
 8004ec8:	e00c      	b.n	8004ee4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eca:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ed4:	68d2      	ldr	r2, [r2, #12]
 8004ed6:	0a12      	lsrs	r2, r2, #8
 8004ed8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
    break;
 8004ee2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	0e5b      	lsrs	r3, r3, #25
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004efe:	687b      	ldr	r3, [r7, #4]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	016e3600 	.word	0x016e3600
 8004f14:	00f42400 	.word	0x00f42400

08004f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f20:	2300      	movs	r3, #0
 8004f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f24:	2300      	movs	r3, #0
 8004f26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8098 	beq.w	8005066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f36:	2300      	movs	r3, #0
 8004f38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f3a:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	4b40      	ldr	r3, [pc, #256]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	4a3f      	ldr	r2, [pc, #252]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f50:	6593      	str	r3, [r2, #88]	; 0x58
 8004f52:	4b3d      	ldr	r3, [pc, #244]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f62:	4b3a      	ldr	r3, [pc, #232]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a39      	ldr	r2, [pc, #228]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f6e:	f7fd f88d 	bl	800208c <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f74:	e009      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fd f889 	bl	800208c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d902      	bls.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	74fb      	strb	r3, [r7, #19]
        break;
 8004f88:	e005      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8a:	4b30      	ldr	r3, [pc, #192]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0ef      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d159      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01e      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d019      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fb8:	4b23      	ldr	r3, [pc, #140]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fc4:	4b20      	ldr	r3, [pc, #128]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fd f849 	bl	800208c <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ffc:	e00b      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffe:	f7fd f845 	bl	800208c <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f241 3288 	movw	r2, #5000	; 0x1388
 800500c:	4293      	cmp	r3, r2
 800500e:	d902      	bls.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	74fb      	strb	r3, [r7, #19]
            break;
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005016:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ec      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005038:	4903      	ldr	r1, [pc, #12]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005040:	e008      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	74bb      	strb	r3, [r7, #18]
 8005046:	e005      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005048:	40021000 	.word	0x40021000
 800504c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005054:	7c7b      	ldrb	r3, [r7, #17]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800505a:	4ba7      	ldr	r3, [pc, #668]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	4aa6      	ldr	r2, [pc, #664]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005064:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005072:	4ba1      	ldr	r3, [pc, #644]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005078:	f023 0203 	bic.w	r2, r3, #3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	499d      	ldr	r1, [pc, #628]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005094:	4b98      	ldr	r3, [pc, #608]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f023 020c 	bic.w	r2, r3, #12
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4995      	ldr	r1, [pc, #596]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050b6:	4b90      	ldr	r3, [pc, #576]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	498c      	ldr	r1, [pc, #560]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050d8:	4b87      	ldr	r3, [pc, #540]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	4984      	ldr	r1, [pc, #528]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050fa:	4b7f      	ldr	r3, [pc, #508]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	497b      	ldr	r1, [pc, #492]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800511c:	4b76      	ldr	r3, [pc, #472]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005122:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	4973      	ldr	r1, [pc, #460]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800513e:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	496a      	ldr	r1, [pc, #424]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005160:	4b65      	ldr	r3, [pc, #404]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	4962      	ldr	r1, [pc, #392]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005182:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	4959      	ldr	r1, [pc, #356]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051a4:	4b54      	ldr	r3, [pc, #336]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	4951      	ldr	r1, [pc, #324]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051c6:	4b4c      	ldr	r3, [pc, #304]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	4948      	ldr	r1, [pc, #288]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051e8:	4b43      	ldr	r3, [pc, #268]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	4940      	ldr	r1, [pc, #256]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005206:	d105      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005208:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005212:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005220:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	4932      	ldr	r1, [pc, #200]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005240:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800524a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005258:	4b27      	ldr	r3, [pc, #156]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	4924      	ldr	r1, [pc, #144]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005278:	4b1f      	ldr	r3, [pc, #124]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005282:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005290:	4b19      	ldr	r3, [pc, #100]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	4916      	ldr	r1, [pc, #88]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a10      	ldr	r2, [pc, #64]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d019      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4908      	ldr	r1, [pc, #32]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e6:	d109      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4a02      	ldr	r2, [pc, #8]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f2:	60d3      	str	r3, [r2, #12]
 80052f4:	e002      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d015      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005308:	4b29      	ldr	r3, [pc, #164]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	4926      	ldr	r1, [pc, #152]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005326:	d105      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005328:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800532e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005332:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005340:	4b1b      	ldr	r3, [pc, #108]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534e:	4918      	ldr	r1, [pc, #96]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535e:	d105      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005360:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d015      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800537a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800537e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005386:	490a      	ldr	r1, [pc, #40]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005396:	d105      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800539e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e049      	b.n	800545a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc fcbe 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 feb2 	bl	800615c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e049      	b.n	8005508 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7fc fc05 	bl	8001c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2202      	movs	r2, #2
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3304      	adds	r3, #4
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f000 fe5b 	bl	800615c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <HAL_TIM_PWM_Start+0x24>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	e03c      	b.n	80055ae <HAL_TIM_PWM_Start+0x9e>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b04      	cmp	r3, #4
 8005538:	d109      	bne.n	800554e <HAL_TIM_PWM_Start+0x3e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e02f      	b.n	80055ae <HAL_TIM_PWM_Start+0x9e>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d109      	bne.n	8005568 <HAL_TIM_PWM_Start+0x58>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e022      	b.n	80055ae <HAL_TIM_PWM_Start+0x9e>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b0c      	cmp	r3, #12
 800556c:	d109      	bne.n	8005582 <HAL_TIM_PWM_Start+0x72>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	e015      	b.n	80055ae <HAL_TIM_PWM_Start+0x9e>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b10      	cmp	r3, #16
 8005586:	d109      	bne.n	800559c <HAL_TIM_PWM_Start+0x8c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	bf14      	ite	ne
 8005594:	2301      	movne	r3, #1
 8005596:	2300      	moveq	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e008      	b.n	80055ae <HAL_TIM_PWM_Start+0x9e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0a6      	b.n	8005704 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Start+0xb6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c4:	e023      	b.n	800560e <HAL_TIM_PWM_Start+0xfe>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_PWM_Start+0xc6>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d4:	e01b      	b.n	800560e <HAL_TIM_PWM_Start+0xfe>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_PWM_Start+0xd6>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e4:	e013      	b.n	800560e <HAL_TIM_PWM_Start+0xfe>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_PWM_Start+0xe6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f4:	e00b      	b.n	800560e <HAL_TIM_PWM_Start+0xfe>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_PWM_Start+0xf6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005604:	e003      	b.n	800560e <HAL_TIM_PWM_Start+0xfe>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f001 fa0e 	bl	8006a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a3a      	ldr	r2, [pc, #232]	; (800570c <HAL_TIM_PWM_Start+0x1fc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d018      	beq.n	8005658 <HAL_TIM_PWM_Start+0x148>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a39      	ldr	r2, [pc, #228]	; (8005710 <HAL_TIM_PWM_Start+0x200>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <HAL_TIM_PWM_Start+0x148>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a37      	ldr	r2, [pc, #220]	; (8005714 <HAL_TIM_PWM_Start+0x204>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00e      	beq.n	8005658 <HAL_TIM_PWM_Start+0x148>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a36      	ldr	r2, [pc, #216]	; (8005718 <HAL_TIM_PWM_Start+0x208>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d009      	beq.n	8005658 <HAL_TIM_PWM_Start+0x148>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a34      	ldr	r2, [pc, #208]	; (800571c <HAL_TIM_PWM_Start+0x20c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_TIM_PWM_Start+0x148>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a33      	ldr	r2, [pc, #204]	; (8005720 <HAL_TIM_PWM_Start+0x210>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_TIM_PWM_Start+0x14c>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_TIM_PWM_Start+0x14e>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005670:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a25      	ldr	r2, [pc, #148]	; (800570c <HAL_TIM_PWM_Start+0x1fc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d022      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1b2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005684:	d01d      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1b2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a26      	ldr	r2, [pc, #152]	; (8005724 <HAL_TIM_PWM_Start+0x214>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1b2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a24      	ldr	r2, [pc, #144]	; (8005728 <HAL_TIM_PWM_Start+0x218>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1b2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a23      	ldr	r2, [pc, #140]	; (800572c <HAL_TIM_PWM_Start+0x21c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1b2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a19      	ldr	r2, [pc, #100]	; (8005710 <HAL_TIM_PWM_Start+0x200>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1b2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a18      	ldr	r2, [pc, #96]	; (8005714 <HAL_TIM_PWM_Start+0x204>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x1b2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a18      	ldr	r2, [pc, #96]	; (8005720 <HAL_TIM_PWM_Start+0x210>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d115      	bne.n	80056ee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	4b19      	ldr	r3, [pc, #100]	; (8005730 <HAL_TIM_PWM_Start+0x220>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b06      	cmp	r3, #6
 80056d2:	d015      	beq.n	8005700 <HAL_TIM_PWM_Start+0x1f0>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056da:	d011      	beq.n	8005700 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ec:	e008      	b.n	8005700 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e000      	b.n	8005702 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40012c00 	.word	0x40012c00
 8005710:	40013400 	.word	0x40013400
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800
 8005720:	40015000 	.word	0x40015000
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	00010007 	.word	0x00010007

08005734 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f976 	bl	8006a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a40      	ldr	r2, [pc, #256]	; (8005854 <HAL_TIM_PWM_Stop+0x120>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_TIM_PWM_Stop+0x54>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3f      	ldr	r2, [pc, #252]	; (8005858 <HAL_TIM_PWM_Stop+0x124>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <HAL_TIM_PWM_Stop+0x54>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a3d      	ldr	r2, [pc, #244]	; (800585c <HAL_TIM_PWM_Stop+0x128>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_TIM_PWM_Stop+0x54>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a3c      	ldr	r2, [pc, #240]	; (8005860 <HAL_TIM_PWM_Stop+0x12c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_TIM_PWM_Stop+0x54>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a3a      	ldr	r2, [pc, #232]	; (8005864 <HAL_TIM_PWM_Stop+0x130>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_TIM_PWM_Stop+0x54>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a39      	ldr	r2, [pc, #228]	; (8005868 <HAL_TIM_PWM_Stop+0x134>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d101      	bne.n	800578c <HAL_TIM_PWM_Stop+0x58>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <HAL_TIM_PWM_Stop+0x5a>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d017      	beq.n	80057c2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a1a      	ldr	r2, [r3, #32]
 8005798:	f241 1311 	movw	r3, #4369	; 0x1111
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <HAL_TIM_PWM_Stop+0x8e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	f244 4344 	movw	r3, #17476	; 0x4444
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <HAL_TIM_PWM_Stop+0x8e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10f      	bne.n	80057f2 <HAL_TIM_PWM_Stop+0xbe>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	f244 4344 	movw	r3, #17476	; 0x4444
 80057dc:	4013      	ands	r3, r2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d107      	bne.n	80057f2 <HAL_TIM_PWM_Stop+0xbe>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Stop+0xce>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005800:	e023      	b.n	800584a <HAL_TIM_PWM_Stop+0x116>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Stop+0xde>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005810:	e01b      	b.n	800584a <HAL_TIM_PWM_Stop+0x116>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b08      	cmp	r3, #8
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Stop+0xee>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005820:	e013      	b.n	800584a <HAL_TIM_PWM_Stop+0x116>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b0c      	cmp	r3, #12
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Stop+0xfe>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005830:	e00b      	b.n	800584a <HAL_TIM_PWM_Stop+0x116>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b10      	cmp	r3, #16
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Stop+0x10e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005840:	e003      	b.n	800584a <HAL_TIM_PWM_Stop+0x116>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40015000 	.word	0x40015000

0800586c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e097      	b.n	80059b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fc fa1f 	bl	8001cd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80058b0:	f023 0307 	bic.w	r3, r3, #7
 80058b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3304      	adds	r3, #4
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f000 fc4b 	bl	800615c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	4313      	orrs	r3, r2
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800590c:	f023 030c 	bic.w	r3, r3, #12
 8005910:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800591c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	4313      	orrs	r3, r2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	011a      	lsls	r2, r3, #4
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	031b      	lsls	r3, r3, #12
 800593c:	4313      	orrs	r3, r2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	4313      	orrs	r3, r2
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d122      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d11b      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0202 	mvn.w	r2, #2
 80059e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fb90 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fb82 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fb93 	bl	8006134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d122      	bne.n	8005a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0204 	mvn.w	r2, #4
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fb66 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb58 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fb69 	bl	8006134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d122      	bne.n	8005abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d11b      	bne.n	8005abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0208 	mvn.w	r2, #8
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2204      	movs	r2, #4
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fb3c 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb2e 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fb3f 	bl	8006134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0210 	mvn.w	r2, #16
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fb12 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fb04 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fb15 	bl	8006134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d10e      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0201 	mvn.w	r2, #1
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fb fdb0 	bl	800169c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 fa13 	bl	8006f8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d10e      	bne.n	8005b96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d107      	bne.n	8005b96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fa06 	bl	8006fa2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	d10e      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b40      	cmp	r3, #64	; 0x40
 8005bb0:	d107      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fac3 	bl	8006148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d10e      	bne.n	8005bee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d107      	bne.n	8005bee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f06f 0220 	mvn.w	r2, #32
 8005be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 f9c6 	bl	8006f7a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfc:	d10f      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0c:	d107      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f9cc 	bl	8006fb6 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c2c:	d10f      	bne.n	8005c4e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c3c:	d107      	bne.n	8005c4e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 f9be 	bl	8006fca <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5c:	d10f      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6c:	d107      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 f9b0 	bl	8006fde <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c8c:	d10f      	bne.n	8005cae <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f9a2 	bl	8006ff2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e0ff      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b14      	cmp	r3, #20
 8005ce2:	f200 80f0 	bhi.w	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ce6:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005ec7 	.word	0x08005ec7
 8005cf4:	08005ec7 	.word	0x08005ec7
 8005cf8:	08005ec7 	.word	0x08005ec7
 8005cfc:	08005d81 	.word	0x08005d81
 8005d00:	08005ec7 	.word	0x08005ec7
 8005d04:	08005ec7 	.word	0x08005ec7
 8005d08:	08005ec7 	.word	0x08005ec7
 8005d0c:	08005dc3 	.word	0x08005dc3
 8005d10:	08005ec7 	.word	0x08005ec7
 8005d14:	08005ec7 	.word	0x08005ec7
 8005d18:	08005ec7 	.word	0x08005ec7
 8005d1c:	08005e03 	.word	0x08005e03
 8005d20:	08005ec7 	.word	0x08005ec7
 8005d24:	08005ec7 	.word	0x08005ec7
 8005d28:	08005ec7 	.word	0x08005ec7
 8005d2c:	08005e45 	.word	0x08005e45
 8005d30:	08005ec7 	.word	0x08005ec7
 8005d34:	08005ec7 	.word	0x08005ec7
 8005d38:	08005ec7 	.word	0x08005ec7
 8005d3c:	08005e85 	.word	0x08005e85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fab0 	bl	80062ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0208 	orr.w	r2, r2, #8
 8005d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0204 	bic.w	r2, r2, #4
 8005d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6999      	ldr	r1, [r3, #24]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	619a      	str	r2, [r3, #24]
      break;
 8005d7e:	e0a5      	b.n	8005ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fb2a 	bl	80063e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6999      	ldr	r1, [r3, #24]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	021a      	lsls	r2, r3, #8
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	619a      	str	r2, [r3, #24]
      break;
 8005dc0:	e084      	b.n	8005ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fb9d 	bl	8006508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0208 	orr.w	r2, r2, #8
 8005ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0204 	bic.w	r2, r2, #4
 8005dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69d9      	ldr	r1, [r3, #28]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	61da      	str	r2, [r3, #28]
      break;
 8005e00:	e064      	b.n	8005ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fc0f 	bl	800662c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69d9      	ldr	r1, [r3, #28]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	021a      	lsls	r2, r3, #8
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	61da      	str	r2, [r3, #28]
      break;
 8005e42:	e043      	b.n	8005ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fc82 	bl	8006754 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0208 	orr.w	r2, r2, #8
 8005e5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0204 	bic.w	r2, r2, #4
 8005e6e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e82:	e023      	b.n	8005ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fccc 	bl	8006828 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	021a      	lsls	r2, r3, #8
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005ec4:	e002      	b.n	8005ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop

08005ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIM_ConfigClockSource+0x1c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e0f6      	b.n	80060ea <HAL_TIM_ConfigClockSource+0x20a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005f1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a6f      	ldr	r2, [pc, #444]	; (80060f4 <HAL_TIM_ConfigClockSource+0x214>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	f000 80c1 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005f3c:	4a6d      	ldr	r2, [pc, #436]	; (80060f4 <HAL_TIM_ConfigClockSource+0x214>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	f200 80c6 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f44:	4a6c      	ldr	r2, [pc, #432]	; (80060f8 <HAL_TIM_ConfigClockSource+0x218>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	f000 80b9 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005f4c:	4a6a      	ldr	r2, [pc, #424]	; (80060f8 <HAL_TIM_ConfigClockSource+0x218>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	f200 80be 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f54:	4a69      	ldr	r2, [pc, #420]	; (80060fc <HAL_TIM_ConfigClockSource+0x21c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	f000 80b1 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005f5c:	4a67      	ldr	r2, [pc, #412]	; (80060fc <HAL_TIM_ConfigClockSource+0x21c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	f200 80b6 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f64:	4a66      	ldr	r2, [pc, #408]	; (8006100 <HAL_TIM_ConfigClockSource+0x220>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	f000 80a9 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005f6c:	4a64      	ldr	r2, [pc, #400]	; (8006100 <HAL_TIM_ConfigClockSource+0x220>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	f200 80ae 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f74:	4a63      	ldr	r2, [pc, #396]	; (8006104 <HAL_TIM_ConfigClockSource+0x224>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	f000 80a1 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005f7c:	4a61      	ldr	r2, [pc, #388]	; (8006104 <HAL_TIM_ConfigClockSource+0x224>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	f200 80a6 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f84:	4a60      	ldr	r2, [pc, #384]	; (8006108 <HAL_TIM_ConfigClockSource+0x228>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	f000 8099 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005f8c:	4a5e      	ldr	r2, [pc, #376]	; (8006108 <HAL_TIM_ConfigClockSource+0x228>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	f200 809e 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f98:	f000 8091 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005f9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fa0:	f200 8096 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa8:	f000 8089 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb0:	f200 808e 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb8:	d03e      	beq.n	8006038 <HAL_TIM_ConfigClockSource+0x158>
 8005fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbe:	f200 8087 	bhi.w	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc6:	f000 8086 	beq.w	80060d6 <HAL_TIM_ConfigClockSource+0x1f6>
 8005fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fce:	d87f      	bhi.n	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fd0:	2b70      	cmp	r3, #112	; 0x70
 8005fd2:	d01a      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x12a>
 8005fd4:	2b70      	cmp	r3, #112	; 0x70
 8005fd6:	d87b      	bhi.n	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fd8:	2b60      	cmp	r3, #96	; 0x60
 8005fda:	d050      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x19e>
 8005fdc:	2b60      	cmp	r3, #96	; 0x60
 8005fde:	d877      	bhi.n	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fe0:	2b50      	cmp	r3, #80	; 0x50
 8005fe2:	d03c      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x17e>
 8005fe4:	2b50      	cmp	r3, #80	; 0x50
 8005fe6:	d873      	bhi.n	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d058      	beq.n	800609e <HAL_TIM_ConfigClockSource+0x1be>
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d86f      	bhi.n	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ff0:	2b30      	cmp	r3, #48	; 0x30
 8005ff2:	d064      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d86b      	bhi.n	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d060      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d867      	bhi.n	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d05c      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8006004:	2b10      	cmp	r3, #16
 8006006:	d05a      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x1de>
 8006008:	e062      	b.n	80060d0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6899      	ldr	r1, [r3, #8]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f000 fced 	bl	80069f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800602c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	609a      	str	r2, [r3, #8]
      break;
 8006036:	e04f      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6899      	ldr	r1, [r3, #8]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f000 fcd6 	bl	80069f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800605a:	609a      	str	r2, [r3, #8]
      break;
 800605c:	e03c      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6859      	ldr	r1, [r3, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	461a      	mov	r2, r3
 800606c:	f000 fc48 	bl	8006900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2150      	movs	r1, #80	; 0x50
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fca1 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 800607c:	e02c      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6859      	ldr	r1, [r3, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	461a      	mov	r2, r3
 800608c:	f000 fc67 	bl	800695e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2160      	movs	r1, #96	; 0x60
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fc91 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 800609c:	e01c      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6859      	ldr	r1, [r3, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f000 fc28 	bl	8006900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2140      	movs	r1, #64	; 0x40
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fc81 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 80060bc:	e00c      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f000 fc78 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 80060ce:	e003      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
      break;
 80060d4:	e000      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80060d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	00100070 	.word	0x00100070
 80060f8:	00100060 	.word	0x00100060
 80060fc:	00100050 	.word	0x00100050
 8006100:	00100040 	.word	0x00100040
 8006104:	00100030 	.word	0x00100030
 8006108:	00100020 	.word	0x00100020

0800610c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a46      	ldr	r2, [pc, #280]	; (8006288 <TIM_Base_SetConfig+0x12c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d017      	beq.n	80061a4 <TIM_Base_SetConfig+0x48>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617a:	d013      	beq.n	80061a4 <TIM_Base_SetConfig+0x48>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a43      	ldr	r2, [pc, #268]	; (800628c <TIM_Base_SetConfig+0x130>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00f      	beq.n	80061a4 <TIM_Base_SetConfig+0x48>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a42      	ldr	r2, [pc, #264]	; (8006290 <TIM_Base_SetConfig+0x134>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00b      	beq.n	80061a4 <TIM_Base_SetConfig+0x48>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a41      	ldr	r2, [pc, #260]	; (8006294 <TIM_Base_SetConfig+0x138>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d007      	beq.n	80061a4 <TIM_Base_SetConfig+0x48>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a40      	ldr	r2, [pc, #256]	; (8006298 <TIM_Base_SetConfig+0x13c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_Base_SetConfig+0x48>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3f      	ldr	r2, [pc, #252]	; (800629c <TIM_Base_SetConfig+0x140>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d108      	bne.n	80061b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a33      	ldr	r2, [pc, #204]	; (8006288 <TIM_Base_SetConfig+0x12c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d023      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c4:	d01f      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a30      	ldr	r2, [pc, #192]	; (800628c <TIM_Base_SetConfig+0x130>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01b      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2f      	ldr	r2, [pc, #188]	; (8006290 <TIM_Base_SetConfig+0x134>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d017      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2e      	ldr	r2, [pc, #184]	; (8006294 <TIM_Base_SetConfig+0x138>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2d      	ldr	r2, [pc, #180]	; (8006298 <TIM_Base_SetConfig+0x13c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00f      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a2d      	ldr	r2, [pc, #180]	; (80062a0 <TIM_Base_SetConfig+0x144>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2c      	ldr	r2, [pc, #176]	; (80062a4 <TIM_Base_SetConfig+0x148>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2b      	ldr	r2, [pc, #172]	; (80062a8 <TIM_Base_SetConfig+0x14c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_Base_SetConfig+0xaa>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <TIM_Base_SetConfig+0x140>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800620c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a12      	ldr	r2, [pc, #72]	; (8006288 <TIM_Base_SetConfig+0x12c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <TIM_Base_SetConfig+0x110>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a14      	ldr	r2, [pc, #80]	; (8006298 <TIM_Base_SetConfig+0x13c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00f      	beq.n	800626c <TIM_Base_SetConfig+0x110>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a14      	ldr	r2, [pc, #80]	; (80062a0 <TIM_Base_SetConfig+0x144>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00b      	beq.n	800626c <TIM_Base_SetConfig+0x110>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <TIM_Base_SetConfig+0x148>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d007      	beq.n	800626c <TIM_Base_SetConfig+0x110>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a12      	ldr	r2, [pc, #72]	; (80062a8 <TIM_Base_SetConfig+0x14c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_Base_SetConfig+0x110>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a0d      	ldr	r2, [pc, #52]	; (800629c <TIM_Base_SetConfig+0x140>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d103      	bne.n	8006274 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	615a      	str	r2, [r3, #20]
}
 800627a:	bf00      	nop
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40012c00 	.word	0x40012c00
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40000c00 	.word	0x40000c00
 8006298:	40013400 	.word	0x40013400
 800629c:	40015000 	.word	0x40015000
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800

080062ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0201 	bic.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f023 0302 	bic.w	r3, r3, #2
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a30      	ldr	r2, [pc, #192]	; (80063c8 <TIM_OC1_SetConfig+0x11c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d013      	beq.n	8006334 <TIM_OC1_SetConfig+0x88>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a2f      	ldr	r2, [pc, #188]	; (80063cc <TIM_OC1_SetConfig+0x120>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00f      	beq.n	8006334 <TIM_OC1_SetConfig+0x88>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a2e      	ldr	r2, [pc, #184]	; (80063d0 <TIM_OC1_SetConfig+0x124>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00b      	beq.n	8006334 <TIM_OC1_SetConfig+0x88>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <TIM_OC1_SetConfig+0x128>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d007      	beq.n	8006334 <TIM_OC1_SetConfig+0x88>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a2c      	ldr	r2, [pc, #176]	; (80063d8 <TIM_OC1_SetConfig+0x12c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_OC1_SetConfig+0x88>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a2b      	ldr	r2, [pc, #172]	; (80063dc <TIM_OC1_SetConfig+0x130>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d10c      	bne.n	800634e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f023 0308 	bic.w	r3, r3, #8
 800633a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 0304 	bic.w	r3, r3, #4
 800634c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <TIM_OC1_SetConfig+0x11c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <TIM_OC1_SetConfig+0xd2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <TIM_OC1_SetConfig+0x120>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00f      	beq.n	800637e <TIM_OC1_SetConfig+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <TIM_OC1_SetConfig+0x124>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00b      	beq.n	800637e <TIM_OC1_SetConfig+0xd2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <TIM_OC1_SetConfig+0x128>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d007      	beq.n	800637e <TIM_OC1_SetConfig+0xd2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <TIM_OC1_SetConfig+0x12c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_OC1_SetConfig+0xd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a18      	ldr	r2, [pc, #96]	; (80063dc <TIM_OC1_SetConfig+0x130>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d111      	bne.n	80063a2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	621a      	str	r2, [r3, #32]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40013400 	.word	0x40013400
 80063d0:	40014000 	.word	0x40014000
 80063d4:	40014400 	.word	0x40014400
 80063d8:	40014800 	.word	0x40014800
 80063dc:	40015000 	.word	0x40015000

080063e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f023 0210 	bic.w	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800640e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0320 	bic.w	r3, r3, #32
 800642e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a2c      	ldr	r2, [pc, #176]	; (80064f0 <TIM_OC2_SetConfig+0x110>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d007      	beq.n	8006454 <TIM_OC2_SetConfig+0x74>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a2b      	ldr	r2, [pc, #172]	; (80064f4 <TIM_OC2_SetConfig+0x114>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC2_SetConfig+0x74>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <TIM_OC2_SetConfig+0x118>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d10d      	bne.n	8006470 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800645a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a1f      	ldr	r2, [pc, #124]	; (80064f0 <TIM_OC2_SetConfig+0x110>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d013      	beq.n	80064a0 <TIM_OC2_SetConfig+0xc0>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <TIM_OC2_SetConfig+0x114>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00f      	beq.n	80064a0 <TIM_OC2_SetConfig+0xc0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <TIM_OC2_SetConfig+0x11c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00b      	beq.n	80064a0 <TIM_OC2_SetConfig+0xc0>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a1d      	ldr	r2, [pc, #116]	; (8006500 <TIM_OC2_SetConfig+0x120>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d007      	beq.n	80064a0 <TIM_OC2_SetConfig+0xc0>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a1c      	ldr	r2, [pc, #112]	; (8006504 <TIM_OC2_SetConfig+0x124>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_OC2_SetConfig+0xc0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <TIM_OC2_SetConfig+0x118>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d113      	bne.n	80064c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40013400 	.word	0x40013400
 80064f8:	40015000 	.word	0x40015000
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800

08006508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2b      	ldr	r2, [pc, #172]	; (8006614 <TIM_OC3_SetConfig+0x10c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_OC3_SetConfig+0x72>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2a      	ldr	r2, [pc, #168]	; (8006618 <TIM_OC3_SetConfig+0x110>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_OC3_SetConfig+0x72>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a29      	ldr	r2, [pc, #164]	; (800661c <TIM_OC3_SetConfig+0x114>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d10d      	bne.n	8006596 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <TIM_OC3_SetConfig+0x10c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <TIM_OC3_SetConfig+0xbe>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1d      	ldr	r2, [pc, #116]	; (8006618 <TIM_OC3_SetConfig+0x110>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00f      	beq.n	80065c6 <TIM_OC3_SetConfig+0xbe>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a1d      	ldr	r2, [pc, #116]	; (8006620 <TIM_OC3_SetConfig+0x118>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00b      	beq.n	80065c6 <TIM_OC3_SetConfig+0xbe>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <TIM_OC3_SetConfig+0x11c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d007      	beq.n	80065c6 <TIM_OC3_SetConfig+0xbe>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <TIM_OC3_SetConfig+0x120>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d003      	beq.n	80065c6 <TIM_OC3_SetConfig+0xbe>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a16      	ldr	r2, [pc, #88]	; (800661c <TIM_OC3_SetConfig+0x114>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d113      	bne.n	80065ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40013400 	.word	0x40013400
 800661c:	40015000 	.word	0x40015000
 8006620:	40014000 	.word	0x40014000
 8006624:	40014400 	.word	0x40014400
 8006628:	40014800 	.word	0x40014800

0800662c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800667a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a2c      	ldr	r2, [pc, #176]	; (800673c <TIM_OC4_SetConfig+0x110>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d007      	beq.n	80066a0 <TIM_OC4_SetConfig+0x74>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a2b      	ldr	r2, [pc, #172]	; (8006740 <TIM_OC4_SetConfig+0x114>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_OC4_SetConfig+0x74>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a2a      	ldr	r2, [pc, #168]	; (8006744 <TIM_OC4_SetConfig+0x118>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10d      	bne.n	80066bc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	031b      	lsls	r3, r3, #12
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a1f      	ldr	r2, [pc, #124]	; (800673c <TIM_OC4_SetConfig+0x110>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d013      	beq.n	80066ec <TIM_OC4_SetConfig+0xc0>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a1e      	ldr	r2, [pc, #120]	; (8006740 <TIM_OC4_SetConfig+0x114>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00f      	beq.n	80066ec <TIM_OC4_SetConfig+0xc0>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a1e      	ldr	r2, [pc, #120]	; (8006748 <TIM_OC4_SetConfig+0x11c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00b      	beq.n	80066ec <TIM_OC4_SetConfig+0xc0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a1d      	ldr	r2, [pc, #116]	; (800674c <TIM_OC4_SetConfig+0x120>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d007      	beq.n	80066ec <TIM_OC4_SetConfig+0xc0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <TIM_OC4_SetConfig+0x124>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC4_SetConfig+0xc0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a17      	ldr	r2, [pc, #92]	; (8006744 <TIM_OC4_SetConfig+0x118>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d113      	bne.n	8006714 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	019b      	lsls	r3, r3, #6
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	019b      	lsls	r3, r3, #6
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40013400 	.word	0x40013400
 8006744:	40015000 	.word	0x40015000
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800

08006754 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006798:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	041b      	lsls	r3, r3, #16
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a19      	ldr	r2, [pc, #100]	; (8006810 <TIM_OC5_SetConfig+0xbc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d013      	beq.n	80067d6 <TIM_OC5_SetConfig+0x82>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a18      	ldr	r2, [pc, #96]	; (8006814 <TIM_OC5_SetConfig+0xc0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00f      	beq.n	80067d6 <TIM_OC5_SetConfig+0x82>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a17      	ldr	r2, [pc, #92]	; (8006818 <TIM_OC5_SetConfig+0xc4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00b      	beq.n	80067d6 <TIM_OC5_SetConfig+0x82>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a16      	ldr	r2, [pc, #88]	; (800681c <TIM_OC5_SetConfig+0xc8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d007      	beq.n	80067d6 <TIM_OC5_SetConfig+0x82>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a15      	ldr	r2, [pc, #84]	; (8006820 <TIM_OC5_SetConfig+0xcc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d003      	beq.n	80067d6 <TIM_OC5_SetConfig+0x82>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a14      	ldr	r2, [pc, #80]	; (8006824 <TIM_OC5_SetConfig+0xd0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d109      	bne.n	80067ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	621a      	str	r2, [r3, #32]
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40013400 	.word	0x40013400
 8006818:	40014000 	.word	0x40014000
 800681c:	40014400 	.word	0x40014400
 8006820:	40014800 	.word	0x40014800
 8006824:	40015000 	.word	0x40015000

08006828 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800686e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	051b      	lsls	r3, r3, #20
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a1a      	ldr	r2, [pc, #104]	; (80068e8 <TIM_OC6_SetConfig+0xc0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <TIM_OC6_SetConfig+0x84>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a19      	ldr	r2, [pc, #100]	; (80068ec <TIM_OC6_SetConfig+0xc4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00f      	beq.n	80068ac <TIM_OC6_SetConfig+0x84>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <TIM_OC6_SetConfig+0xc8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00b      	beq.n	80068ac <TIM_OC6_SetConfig+0x84>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <TIM_OC6_SetConfig+0xcc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <TIM_OC6_SetConfig+0x84>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <TIM_OC6_SetConfig+0xd0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC6_SetConfig+0x84>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a15      	ldr	r2, [pc, #84]	; (80068fc <TIM_OC6_SetConfig+0xd4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d109      	bne.n	80068c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	029b      	lsls	r3, r3, #10
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40013400 	.word	0x40013400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800
 80068fc:	40015000 	.word	0x40015000

08006900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800692a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 030a 	bic.w	r3, r3, #10
 800693c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800695e:	b480      	push	{r7}
 8006960:	b087      	sub	sp, #28
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0210 	bic.w	r2, r3, #16
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	031b      	lsls	r3, r3, #12
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800699a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80069d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	f043 0307 	orr.w	r3, r3, #7
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	021a      	lsls	r2, r3, #8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <HAL_TIMEx_PWMN_Start+0x24>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	bf14      	ite	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	2300      	moveq	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	e022      	b.n	8006aee <HAL_TIMEx_PWMN_Start+0x6a>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d109      	bne.n	8006ac2 <HAL_TIMEx_PWMN_Start+0x3e>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	bf14      	ite	ne
 8006aba:	2301      	movne	r3, #1
 8006abc:	2300      	moveq	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	e015      	b.n	8006aee <HAL_TIMEx_PWMN_Start+0x6a>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d109      	bne.n	8006adc <HAL_TIMEx_PWMN_Start+0x58>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	e008      	b.n	8006aee <HAL_TIMEx_PWMN_Start+0x6a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	bf14      	ite	ne
 8006ae8:	2301      	movne	r3, #1
 8006aea:	2300      	moveq	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e073      	b.n	8006bde <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <HAL_TIMEx_PWMN_Start+0x82>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b04:	e013      	b.n	8006b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d104      	bne.n	8006b16 <HAL_TIMEx_PWMN_Start+0x92>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b14:	e00b      	b.n	8006b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d104      	bne.n	8006b26 <HAL_TIMEx_PWMN_Start+0xa2>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b24:	e003      	b.n	8006b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2204      	movs	r2, #4
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fa65 	bl	8007006 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <HAL_TIMEx_PWMN_Start+0x164>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d022      	beq.n	8006b9c <HAL_TIMEx_PWMN_Start+0x118>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5e:	d01d      	beq.n	8006b9c <HAL_TIMEx_PWMN_Start+0x118>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a21      	ldr	r2, [pc, #132]	; (8006bec <HAL_TIMEx_PWMN_Start+0x168>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <HAL_TIMEx_PWMN_Start+0x118>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <HAL_TIMEx_PWMN_Start+0x118>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <HAL_TIMEx_PWMN_Start+0x170>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_TIMEx_PWMN_Start+0x118>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1d      	ldr	r2, [pc, #116]	; (8006bf8 <HAL_TIMEx_PWMN_Start+0x174>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_TIMEx_PWMN_Start+0x118>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <HAL_TIMEx_PWMN_Start+0x178>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_TIMEx_PWMN_Start+0x118>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <HAL_TIMEx_PWMN_Start+0x17c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d115      	bne.n	8006bc8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	4b18      	ldr	r3, [pc, #96]	; (8006c04 <HAL_TIMEx_PWMN_Start+0x180>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b06      	cmp	r3, #6
 8006bac:	d015      	beq.n	8006bda <HAL_TIMEx_PWMN_Start+0x156>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb4:	d011      	beq.n	8006bda <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f042 0201 	orr.w	r2, r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc6:	e008      	b.n	8006bda <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	e000      	b.n	8006bdc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40012c00 	.word	0x40012c00
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40013400 	.word	0x40013400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40015000 	.word	0x40015000
 8006c04:	00010007 	.word	0x00010007

08006c08 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2200      	movs	r2, #0
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f9f3 	bl	8007006 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6a1a      	ldr	r2, [r3, #32]
 8006c26:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10f      	bne.n	8006c50 <HAL_TIMEx_PWMN_Stop+0x48>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	f244 4344 	movw	r3, #17476	; 0x4444
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d107      	bne.n	8006c50 <HAL_TIMEx_PWMN_Stop+0x48>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6a1a      	ldr	r2, [r3, #32]
 8006c56:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10f      	bne.n	8006c80 <HAL_TIMEx_PWMN_Stop+0x78>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	f244 4344 	movw	r3, #17476	; 0x4444
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d107      	bne.n	8006c80 <HAL_TIMEx_PWMN_Stop+0x78>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0201 	bic.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <HAL_TIMEx_PWMN_Stop+0x88>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8e:	e013      	b.n	8006cb8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d104      	bne.n	8006ca0 <HAL_TIMEx_PWMN_Stop+0x98>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c9e:	e00b      	b.n	8006cb8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d104      	bne.n	8006cb0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cae:	e003      	b.n	8006cb8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e074      	b.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a34      	ldr	r2, [pc, #208]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d009      	beq.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a33      	ldr	r2, [pc, #204]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a31      	ldr	r2, [pc, #196]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d108      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a21      	ldr	r2, [pc, #132]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d022      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5c:	d01d      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d018      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a18      	ldr	r2, [pc, #96]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a11      	ldr	r2, [pc, #68]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d10c      	bne.n	8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40013400 	.word	0x40013400
 8006ddc:	40015000 	.word	0x40015000
 8006de0:	40000400 	.word	0x40000400
 8006de4:	40000800 	.word	0x40000800
 8006de8:	40000c00 	.word	0x40000c00
 8006dec:	40014000 	.word	0x40014000

08006df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e096      	b.n	8006f3a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a2f      	ldr	r2, [pc, #188]	; (8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d009      	beq.n	8006ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	; (8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2c      	ldr	r2, [pc, #176]	; (8006f50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d106      	bne.n	8006eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d009      	beq.n	8006ed0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a22      	ldr	r2, [pc, #136]	; (8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d12b      	bne.n	8006f28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	051b      	lsls	r3, r3, #20
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a11      	ldr	r2, [pc, #68]	; (8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a10      	ldr	r2, [pc, #64]	; (8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a0e      	ldr	r2, [pc, #56]	; (8006f50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d106      	bne.n	8006f28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40013400 	.word	0x40013400
 8006f50:	40015000 	.word	0x40015000

08006f54 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006f6a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007006:	b480      	push	{r7}
 8007008:	b087      	sub	sp, #28
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	2204      	movs	r2, #4
 800701a:	fa02 f303 	lsl.w	r3, r2, r3
 800701e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	43db      	mvns	r3, r3
 8007028:	401a      	ands	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1a      	ldr	r2, [r3, #32]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	fa01 f303 	lsl.w	r3, r1, r3
 800703e:	431a      	orrs	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	621a      	str	r2, [r3, #32]
}
 8007044:	bf00      	nop
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e042      	b.n	80070e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fa ff1b 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2224      	movs	r2, #36	; 0x24
 800707e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0201 	bic.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fc50 	bl	8007938 <UART_SetConfig>
 8007098:	4603      	mov	r3, r0
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e022      	b.n	80070e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 ff40 	bl	8007f30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 ffc7 	bl	8008074 <UART_CheckIdleState>
 80070e6:	4603      	mov	r3, r0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	; 0x28
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007106:	2b20      	cmp	r3, #32
 8007108:	f040 8083 	bne.w	8007212 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_UART_Transmit+0x28>
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e07b      	b.n	8007214 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_UART_Transmit+0x3a>
 8007126:	2302      	movs	r3, #2
 8007128:	e074      	b.n	8007214 <HAL_UART_Transmit+0x124>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2221      	movs	r2, #33	; 0x21
 800713e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007142:	f7fa ffa3 	bl	800208c <HAL_GetTick>
 8007146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007160:	d108      	bne.n	8007174 <HAL_UART_Transmit+0x84>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	e003      	b.n	800717c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007184:	e02c      	b.n	80071e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	2180      	movs	r1, #128	; 0x80
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 ffba 	bl	800810a <UART_WaitOnFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e039      	b.n	8007214 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	3302      	adds	r3, #2
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	e007      	b.n	80071ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	781a      	ldrb	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	3301      	adds	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1cc      	bne.n	8007186 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2200      	movs	r2, #0
 80071f4:	2140      	movs	r1, #64	; 0x40
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 ff87 	bl	800810a <UART_WaitOnFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e006      	b.n	8007214 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007230:	2b20      	cmp	r3, #32
 8007232:	d142      	bne.n	80072ba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_UART_Receive_IT+0x24>
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e03b      	b.n	80072bc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_UART_Receive_IT+0x36>
 800724e:	2302      	movs	r3, #2
 8007250:	e034      	b.n	80072bc <HAL_UART_Receive_IT+0xa0>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a17      	ldr	r2, [pc, #92]	; (80072c4 <HAL_UART_Receive_IT+0xa8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d01f      	beq.n	80072aa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d018      	beq.n	80072aa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	613b      	str	r3, [r7, #16]
   return(result);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	623b      	str	r3, [r7, #32]
 8007298:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	69f9      	ldr	r1, [r7, #28]
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e6      	bne.n	8007278 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	461a      	mov	r2, r3
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 fff3 	bl	800829c <UART_Start_Receive_IT>
 80072b6:	4603      	mov	r3, r0
 80072b8:	e000      	b.n	80072bc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80072ba:	2302      	movs	r3, #2
  }
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3728      	adds	r7, #40	; 0x28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	40008000 	.word	0x40008000

080072c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b0ba      	sub	sp, #232	; 0xe8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80072f6:	4013      	ands	r3, r2
 80072f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d11b      	bne.n	800733c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d015      	beq.n	800733c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800731c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 82d6 	beq.w	80078de <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
      }
      return;
 800733a:	e2d0      	b.n	80078de <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800733c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 811f 	beq.w	8007584 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007346:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800734a:	4b8b      	ldr	r3, [pc, #556]	; (8007578 <HAL_UART_IRQHandler+0x2b0>)
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007352:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007356:	4b89      	ldr	r3, [pc, #548]	; (800757c <HAL_UART_IRQHandler+0x2b4>)
 8007358:	4013      	ands	r3, r2
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8112 	beq.w	8007584 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d011      	beq.n	8007390 <HAL_UART_IRQHandler+0xc8>
 800736c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2201      	movs	r2, #1
 800737e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007386:	f043 0201 	orr.w	r2, r3, #1
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d011      	beq.n	80073c0 <HAL_UART_IRQHandler+0xf8>
 800739c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2202      	movs	r2, #2
 80073ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b6:	f043 0204 	orr.w	r2, r3, #4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d011      	beq.n	80073f0 <HAL_UART_IRQHandler+0x128>
 80073cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00b      	beq.n	80073f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2204      	movs	r2, #4
 80073de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e6:	f043 0202 	orr.w	r2, r3, #2
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d017      	beq.n	800742c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007408:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800740c:	4b5a      	ldr	r3, [pc, #360]	; (8007578 <HAL_UART_IRQHandler+0x2b0>)
 800740e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00b      	beq.n	800742c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2208      	movs	r2, #8
 800741a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007422:	f043 0208 	orr.w	r2, r3, #8
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800742c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007434:	2b00      	cmp	r3, #0
 8007436:	d012      	beq.n	800745e <HAL_UART_IRQHandler+0x196>
 8007438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800744c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007454:	f043 0220 	orr.w	r2, r3, #32
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 823c 	beq.w	80078e2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800746a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d013      	beq.n	800749e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	d105      	bne.n	800748e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d005      	beq.n	80074c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d04f      	beq.n	8007562 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f814 	bl	80084f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d141      	bne.n	800755a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3308      	adds	r3, #8
 80074dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007502:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800750e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800751a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1d9      	bne.n	80074d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d013      	beq.n	8007552 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752e:	4a14      	ldr	r2, [pc, #80]	; (8007580 <HAL_UART_IRQHandler+0x2b8>)
 8007530:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007536:	4618      	mov	r0, r3
 8007538:	f7fc fb92 	bl	8003c60 <HAL_DMA_Abort_IT>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d017      	beq.n	8007572 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007550:	e00f      	b.n	8007572 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9da 	bl	800790c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	e00b      	b.n	8007572 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f9d6 	bl	800790c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	e007      	b.n	8007572 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f9d2 	bl	800790c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007570:	e1b7      	b.n	80078e2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007572:	bf00      	nop
    return;
 8007574:	e1b5      	b.n	80078e2 <HAL_UART_IRQHandler+0x61a>
 8007576:	bf00      	nop
 8007578:	10000001 	.word	0x10000001
 800757c:	04000120 	.word	0x04000120
 8007580:	080085bd 	.word	0x080085bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007588:	2b01      	cmp	r3, #1
 800758a:	f040 814a 	bne.w	8007822 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	f003 0310 	and.w	r3, r3, #16
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 8143 	beq.w	8007822 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 813c 	beq.w	8007822 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2210      	movs	r2, #16
 80075b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	f040 80b5 	bne.w	800772c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8187 	beq.w	80078e6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075e2:	429a      	cmp	r2, r3
 80075e4:	f080 817f 	bcs.w	80078e6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f040 8086 	bne.w	8007710 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800761c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800762e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007632:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800763a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1da      	bne.n	8007604 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3308      	adds	r3, #8
 8007654:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800765e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3308      	adds	r3, #8
 800766e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007672:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007676:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800767a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e1      	bne.n	800764e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800769a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800769c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e3      	bne.n	800768a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e0:	f023 0310 	bic.w	r3, r3, #16
 80076e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80076f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e4      	bne.n	80076d0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800770a:	4618      	mov	r0, r3
 800770c:	f7fc fa4f 	bl	8003bae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800771c:	b29b      	uxth	r3, r3
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	b29b      	uxth	r3, r3
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f8fb 	bl	8007920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800772a:	e0dc      	b.n	80078e6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007738:	b29b      	uxth	r3, r3
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007746:	b29b      	uxth	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80ce 	beq.w	80078ea <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800774e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80c9 	beq.w	80078ea <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800776c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800777a:	647b      	str	r3, [r7, #68]	; 0x44
 800777c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e4      	bne.n	8007758 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	623b      	str	r3, [r7, #32]
   return(result);
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077b6:	633a      	str	r2, [r7, #48]	; 0x30
 80077b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e1      	bne.n	800778e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0310 	bic.w	r3, r3, #16
 80077f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	69b9      	ldr	r1, [r7, #24]
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	617b      	str	r3, [r7, #20]
   return(result);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e4      	bne.n	80077de <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f880 	bl	8007920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007820:	e063      	b.n	80078ea <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00e      	beq.n	800784c <HAL_UART_IRQHandler+0x584>
 800782e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d008      	beq.n	800784c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fb57 	bl	8008ef8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800784a:	e051      	b.n	80078f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800784c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007854:	2b00      	cmp	r3, #0
 8007856:	d014      	beq.n	8007882 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800785c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007860:	2b00      	cmp	r3, #0
 8007862:	d105      	bne.n	8007870 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d008      	beq.n	8007882 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007874:	2b00      	cmp	r3, #0
 8007876:	d03a      	beq.n	80078ee <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
    }
    return;
 8007880:	e035      	b.n	80078ee <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <HAL_UART_IRQHandler+0x5da>
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fea4 	bl	80085e8 <UART_EndTransmit_IT>
    return;
 80078a0:	e026      	b.n	80078f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80078a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <HAL_UART_IRQHandler+0x5fa>
 80078ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f001 fb30 	bl	8008f20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078c0:	e016      	b.n	80078f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d010      	beq.n	80078f0 <HAL_UART_IRQHandler+0x628>
 80078ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da0c      	bge.n	80078f0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 fb18 	bl	8008f0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078dc:	e008      	b.n	80078f0 <HAL_UART_IRQHandler+0x628>
      return;
 80078de:	bf00      	nop
 80078e0:	e006      	b.n	80078f0 <HAL_UART_IRQHandler+0x628>
    return;
 80078e2:	bf00      	nop
 80078e4:	e004      	b.n	80078f0 <HAL_UART_IRQHandler+0x628>
      return;
 80078e6:	bf00      	nop
 80078e8:	e002      	b.n	80078f0 <HAL_UART_IRQHandler+0x628>
      return;
 80078ea:	bf00      	nop
 80078ec:	e000      	b.n	80078f0 <HAL_UART_IRQHandler+0x628>
    return;
 80078ee:	bf00      	nop
  }
}
 80078f0:	37e8      	adds	r7, #232	; 0xe8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop

080078f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800793c:	b08c      	sub	sp, #48	; 0x30
 800793e:	af00      	add	r7, sp, #0
 8007940:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	431a      	orrs	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	431a      	orrs	r2, r3
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	69db      	ldr	r3, [r3, #28]
 800795c:	4313      	orrs	r3, r2
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4baa      	ldr	r3, [pc, #680]	; (8007c10 <UART_SetConfig+0x2d8>)
 8007968:	4013      	ands	r3, r2
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007970:	430b      	orrs	r3, r1
 8007972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a9f      	ldr	r2, [pc, #636]	; (8007c14 <UART_SetConfig+0x2dc>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d004      	beq.n	80079a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079a0:	4313      	orrs	r3, r2
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80079ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079b8:	430b      	orrs	r3, r1
 80079ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	f023 010f 	bic.w	r1, r3, #15
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a90      	ldr	r2, [pc, #576]	; (8007c18 <UART_SetConfig+0x2e0>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d125      	bne.n	8007a28 <UART_SetConfig+0xf0>
 80079dc:	4b8f      	ldr	r3, [pc, #572]	; (8007c1c <UART_SetConfig+0x2e4>)
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d81a      	bhi.n	8007a20 <UART_SetConfig+0xe8>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <UART_SetConfig+0xb8>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a01 	.word	0x08007a01
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a19 	.word	0x08007a19
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a06:	e116      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a0e:	e112      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a10:	2304      	movs	r3, #4
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a16:	e10e      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a18:	2308      	movs	r3, #8
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1e:	e10a      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a26:	e106      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a7c      	ldr	r2, [pc, #496]	; (8007c20 <UART_SetConfig+0x2e8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d138      	bne.n	8007aa4 <UART_SetConfig+0x16c>
 8007a32:	4b7a      	ldr	r3, [pc, #488]	; (8007c1c <UART_SetConfig+0x2e4>)
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a38:	f003 030c 	and.w	r3, r3, #12
 8007a3c:	2b0c      	cmp	r3, #12
 8007a3e:	d82d      	bhi.n	8007a9c <UART_SetConfig+0x164>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <UART_SetConfig+0x110>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a7d 	.word	0x08007a7d
 8007a4c:	08007a9d 	.word	0x08007a9d
 8007a50:	08007a9d 	.word	0x08007a9d
 8007a54:	08007a9d 	.word	0x08007a9d
 8007a58:	08007a8d 	.word	0x08007a8d
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007a9d 	.word	0x08007a9d
 8007a64:	08007a9d 	.word	0x08007a9d
 8007a68:	08007a85 	.word	0x08007a85
 8007a6c:	08007a9d 	.word	0x08007a9d
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	08007a9d 	.word	0x08007a9d
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a82:	e0d8      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a84:	2302      	movs	r3, #2
 8007a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a8a:	e0d4      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a92:	e0d0      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a94:	2308      	movs	r3, #8
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9a:	e0cc      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa2:	e0c8      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a5e      	ldr	r2, [pc, #376]	; (8007c24 <UART_SetConfig+0x2ec>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d125      	bne.n	8007afa <UART_SetConfig+0x1c2>
 8007aae:	4b5b      	ldr	r3, [pc, #364]	; (8007c1c <UART_SetConfig+0x2e4>)
 8007ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ab8:	2b30      	cmp	r3, #48	; 0x30
 8007aba:	d016      	beq.n	8007aea <UART_SetConfig+0x1b2>
 8007abc:	2b30      	cmp	r3, #48	; 0x30
 8007abe:	d818      	bhi.n	8007af2 <UART_SetConfig+0x1ba>
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d00a      	beq.n	8007ada <UART_SetConfig+0x1a2>
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d814      	bhi.n	8007af2 <UART_SetConfig+0x1ba>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <UART_SetConfig+0x19a>
 8007acc:	2b10      	cmp	r3, #16
 8007ace:	d008      	beq.n	8007ae2 <UART_SetConfig+0x1aa>
 8007ad0:	e00f      	b.n	8007af2 <UART_SetConfig+0x1ba>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ad8:	e0ad      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007ada:	2302      	movs	r3, #2
 8007adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae0:	e0a9      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007ae2:	2304      	movs	r3, #4
 8007ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae8:	e0a5      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007aea:	2308      	movs	r3, #8
 8007aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af0:	e0a1      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007af2:	2310      	movs	r3, #16
 8007af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af8:	e09d      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a4a      	ldr	r2, [pc, #296]	; (8007c28 <UART_SetConfig+0x2f0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d125      	bne.n	8007b50 <UART_SetConfig+0x218>
 8007b04:	4b45      	ldr	r3, [pc, #276]	; (8007c1c <UART_SetConfig+0x2e4>)
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b10:	d016      	beq.n	8007b40 <UART_SetConfig+0x208>
 8007b12:	2bc0      	cmp	r3, #192	; 0xc0
 8007b14:	d818      	bhi.n	8007b48 <UART_SetConfig+0x210>
 8007b16:	2b80      	cmp	r3, #128	; 0x80
 8007b18:	d00a      	beq.n	8007b30 <UART_SetConfig+0x1f8>
 8007b1a:	2b80      	cmp	r3, #128	; 0x80
 8007b1c:	d814      	bhi.n	8007b48 <UART_SetConfig+0x210>
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <UART_SetConfig+0x1f0>
 8007b22:	2b40      	cmp	r3, #64	; 0x40
 8007b24:	d008      	beq.n	8007b38 <UART_SetConfig+0x200>
 8007b26:	e00f      	b.n	8007b48 <UART_SetConfig+0x210>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b2e:	e082      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007b30:	2302      	movs	r3, #2
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b36:	e07e      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007b38:	2304      	movs	r3, #4
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b3e:	e07a      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007b40:	2308      	movs	r3, #8
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b46:	e076      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007b48:	2310      	movs	r3, #16
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b4e:	e072      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a35      	ldr	r2, [pc, #212]	; (8007c2c <UART_SetConfig+0x2f4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d12a      	bne.n	8007bb0 <UART_SetConfig+0x278>
 8007b5a:	4b30      	ldr	r3, [pc, #192]	; (8007c1c <UART_SetConfig+0x2e4>)
 8007b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b68:	d01a      	beq.n	8007ba0 <UART_SetConfig+0x268>
 8007b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b6e:	d81b      	bhi.n	8007ba8 <UART_SetConfig+0x270>
 8007b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b74:	d00c      	beq.n	8007b90 <UART_SetConfig+0x258>
 8007b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b7a:	d815      	bhi.n	8007ba8 <UART_SetConfig+0x270>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <UART_SetConfig+0x250>
 8007b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b84:	d008      	beq.n	8007b98 <UART_SetConfig+0x260>
 8007b86:	e00f      	b.n	8007ba8 <UART_SetConfig+0x270>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b8e:	e052      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007b90:	2302      	movs	r3, #2
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b96:	e04e      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007b98:	2304      	movs	r3, #4
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b9e:	e04a      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ba6:	e046      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bae:	e042      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a17      	ldr	r2, [pc, #92]	; (8007c14 <UART_SetConfig+0x2dc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d13a      	bne.n	8007c30 <UART_SetConfig+0x2f8>
 8007bba:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <UART_SetConfig+0x2e4>)
 8007bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bc8:	d01a      	beq.n	8007c00 <UART_SetConfig+0x2c8>
 8007bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bce:	d81b      	bhi.n	8007c08 <UART_SetConfig+0x2d0>
 8007bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd4:	d00c      	beq.n	8007bf0 <UART_SetConfig+0x2b8>
 8007bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bda:	d815      	bhi.n	8007c08 <UART_SetConfig+0x2d0>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <UART_SetConfig+0x2b0>
 8007be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be4:	d008      	beq.n	8007bf8 <UART_SetConfig+0x2c0>
 8007be6:	e00f      	b.n	8007c08 <UART_SetConfig+0x2d0>
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bee:	e022      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bf6:	e01e      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bfe:	e01a      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007c00:	2308      	movs	r3, #8
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c06:	e016      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007c08:	2310      	movs	r3, #16
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0e:	e012      	b.n	8007c36 <UART_SetConfig+0x2fe>
 8007c10:	cfff69f3 	.word	0xcfff69f3
 8007c14:	40008000 	.word	0x40008000
 8007c18:	40013800 	.word	0x40013800
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	40004400 	.word	0x40004400
 8007c24:	40004800 	.word	0x40004800
 8007c28:	40004c00 	.word	0x40004c00
 8007c2c:	40005000 	.word	0x40005000
 8007c30:	2310      	movs	r3, #16
 8007c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4aae      	ldr	r2, [pc, #696]	; (8007ef4 <UART_SetConfig+0x5bc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	f040 8097 	bne.w	8007d70 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d823      	bhi.n	8007c92 <UART_SetConfig+0x35a>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x318>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c75 	.word	0x08007c75
 8007c54:	08007c93 	.word	0x08007c93
 8007c58:	08007c7d 	.word	0x08007c7d
 8007c5c:	08007c93 	.word	0x08007c93
 8007c60:	08007c83 	.word	0x08007c83
 8007c64:	08007c93 	.word	0x08007c93
 8007c68:	08007c93 	.word	0x08007c93
 8007c6c:	08007c93 	.word	0x08007c93
 8007c70:	08007c8b 	.word	0x08007c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c74:	f7fd f8de 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8007c78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c7a:	e010      	b.n	8007c9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c7c:	4b9e      	ldr	r3, [pc, #632]	; (8007ef8 <UART_SetConfig+0x5c0>)
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c80:	e00d      	b.n	8007c9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c82:	f7fd f869 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8007c86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c88:	e009      	b.n	8007c9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c90:	e005      	b.n	8007c9e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 8130 	beq.w	8007f06 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	4a94      	ldr	r2, [pc, #592]	; (8007efc <UART_SetConfig+0x5c4>)
 8007cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	4413      	add	r3, r2
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d305      	bcc.n	8007cd6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d903      	bls.n	8007cde <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007cdc:	e113      	b.n	8007f06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	60bb      	str	r3, [r7, #8]
 8007ce4:	60fa      	str	r2, [r7, #12]
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	4a84      	ldr	r2, [pc, #528]	; (8007efc <UART_SetConfig+0x5c4>)
 8007cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	603b      	str	r3, [r7, #0]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d00:	f7f8 feec 	bl	8000adc <__aeabi_uldivmod>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	020b      	lsls	r3, r1, #8
 8007d16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d1a:	0202      	lsls	r2, r0, #8
 8007d1c:	6979      	ldr	r1, [r7, #20]
 8007d1e:	6849      	ldr	r1, [r1, #4]
 8007d20:	0849      	lsrs	r1, r1, #1
 8007d22:	2000      	movs	r0, #0
 8007d24:	460c      	mov	r4, r1
 8007d26:	4605      	mov	r5, r0
 8007d28:	eb12 0804 	adds.w	r8, r2, r4
 8007d2c:	eb43 0905 	adc.w	r9, r3, r5
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	469a      	mov	sl, r3
 8007d38:	4693      	mov	fp, r2
 8007d3a:	4652      	mov	r2, sl
 8007d3c:	465b      	mov	r3, fp
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f7f8 fecb 	bl	8000adc <__aeabi_uldivmod>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d54:	d308      	bcc.n	8007d68 <UART_SetConfig+0x430>
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d5c:	d204      	bcs.n	8007d68 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6a3a      	ldr	r2, [r7, #32]
 8007d64:	60da      	str	r2, [r3, #12]
 8007d66:	e0ce      	b.n	8007f06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d6e:	e0ca      	b.n	8007f06 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d78:	d166      	bne.n	8007e48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	d827      	bhi.n	8007dd2 <UART_SetConfig+0x49a>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <UART_SetConfig+0x450>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	08007dd3 	.word	0x08007dd3
 8007d98:	08007dc3 	.word	0x08007dc3
 8007d9c:	08007dd3 	.word	0x08007dd3
 8007da0:	08007dd3 	.word	0x08007dd3
 8007da4:	08007dd3 	.word	0x08007dd3
 8007da8:	08007dcb 	.word	0x08007dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dac:	f7fd f842 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8007db0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007db2:	e014      	b.n	8007dde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007db4:	f7fd f854 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 8007db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dba:	e010      	b.n	8007dde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dbc:	4b4e      	ldr	r3, [pc, #312]	; (8007ef8 <UART_SetConfig+0x5c0>)
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dc0:	e00d      	b.n	8007dde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dc2:	f7fc ffc9 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8007dc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dc8:	e009      	b.n	8007dde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dd0:	e005      	b.n	8007dde <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8090 	beq.w	8007f06 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	4a44      	ldr	r2, [pc, #272]	; (8007efc <UART_SetConfig+0x5c4>)
 8007dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007df8:	005a      	lsls	r2, r3, #1
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	085b      	lsrs	r3, r3, #1
 8007e00:	441a      	add	r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	2b0f      	cmp	r3, #15
 8007e10:	d916      	bls.n	8007e40 <UART_SetConfig+0x508>
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e18:	d212      	bcs.n	8007e40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	f023 030f 	bic.w	r3, r3, #15
 8007e22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	8bfb      	ldrh	r3, [r7, #30]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	8bfa      	ldrh	r2, [r7, #30]
 8007e3c:	60da      	str	r2, [r3, #12]
 8007e3e:	e062      	b.n	8007f06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e46:	e05e      	b.n	8007f06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d828      	bhi.n	8007ea2 <UART_SetConfig+0x56a>
 8007e50:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <UART_SetConfig+0x520>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	08007ea3 	.word	0x08007ea3
 8007e68:	08007e93 	.word	0x08007e93
 8007e6c:	08007ea3 	.word	0x08007ea3
 8007e70:	08007ea3 	.word	0x08007ea3
 8007e74:	08007ea3 	.word	0x08007ea3
 8007e78:	08007e9b 	.word	0x08007e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e7c:	f7fc ffda 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8007e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e82:	e014      	b.n	8007eae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e84:	f7fc ffec 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 8007e88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e8a:	e010      	b.n	8007eae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <UART_SetConfig+0x5c0>)
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e90:	e00d      	b.n	8007eae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e92:	f7fc ff61 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8007e96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e98:	e009      	b.n	8007eae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ea0:	e005      	b.n	8007eae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007eac:	bf00      	nop
    }

    if (pclk != 0U)
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d028      	beq.n	8007f06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	4a10      	ldr	r2, [pc, #64]	; (8007efc <UART_SetConfig+0x5c4>)
 8007eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	085b      	lsrs	r3, r3, #1
 8007ecc:	441a      	add	r2, r3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	2b0f      	cmp	r3, #15
 8007edc:	d910      	bls.n	8007f00 <UART_SetConfig+0x5c8>
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee4:	d20c      	bcs.n	8007f00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60da      	str	r2, [r3, #12]
 8007ef0:	e009      	b.n	8007f06 <UART_SetConfig+0x5ce>
 8007ef2:	bf00      	nop
 8007ef4:	40008000 	.word	0x40008000
 8007ef8:	00f42400 	.word	0x00f42400
 8007efc:	0800a814 	.word	0x0800a814
      }
      else
      {
        ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3730      	adds	r7, #48	; 0x30
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00a      	beq.n	8007f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	f003 0320 	and.w	r3, r3, #32
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01a      	beq.n	8008046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800802e:	d10a      	bne.n	8008046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	605a      	str	r2, [r3, #4]
  }
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af02      	add	r7, sp, #8
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008084:	f7fa f802 	bl	800208c <HAL_GetTick>
 8008088:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b08      	cmp	r3, #8
 8008096:	d10e      	bne.n	80080b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f82f 	bl	800810a <UART_WaitOnFlagUntilTimeout>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e025      	b.n	8008102 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d10e      	bne.n	80080e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f819 	bl	800810a <UART_WaitOnFlagUntilTimeout>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e00f      	b.n	8008102 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b09c      	sub	sp, #112	; 0x70
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	603b      	str	r3, [r7, #0]
 8008116:	4613      	mov	r3, r2
 8008118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811a:	e0a9      	b.n	8008270 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800811c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800811e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008122:	f000 80a5 	beq.w	8008270 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008126:	f7f9 ffb1 	bl	800208c <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008132:	429a      	cmp	r2, r3
 8008134:	d302      	bcc.n	800813c <UART_WaitOnFlagUntilTimeout+0x32>
 8008136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008138:	2b00      	cmp	r3, #0
 800813a:	d140      	bne.n	80081be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800814a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800814c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008150:	667b      	str	r3, [r7, #100]	; 0x64
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800815a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800815c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e6      	bne.n	800813c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3308      	adds	r3, #8
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	663b      	str	r3, [r7, #96]	; 0x60
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3308      	adds	r3, #8
 800818c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800818e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800819c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e5      	bne.n	800816e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e069      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d051      	beq.n	8008270 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081da:	d149      	bne.n	8008270 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
 8008206:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800820a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e6      	bne.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3308      	adds	r3, #8
 800821e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	613b      	str	r3, [r7, #16]
   return(result);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f023 0301 	bic.w	r3, r3, #1
 800822e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3308      	adds	r3, #8
 8008236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008238:	623a      	str	r2, [r7, #32]
 800823a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	69f9      	ldr	r1, [r7, #28]
 800823e:	6a3a      	ldr	r2, [r7, #32]
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	61bb      	str	r3, [r7, #24]
   return(result);
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e5      	bne.n	8008218 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2220      	movs	r2, #32
 8008250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e010      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69da      	ldr	r2, [r3, #28]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4013      	ands	r3, r2
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	429a      	cmp	r2, r3
 800827e:	bf0c      	ite	eq
 8008280:	2301      	moveq	r3, #1
 8008282:	2300      	movne	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	429a      	cmp	r2, r3
 800828c:	f43f af46 	beq.w	800811c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3770      	adds	r7, #112	; 0x70
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800829c:	b480      	push	{r7}
 800829e:	b0a3      	sub	sp, #140	; 0x8c
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	88fa      	ldrh	r2, [r7, #6]
 80082bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ce:	d10e      	bne.n	80082ee <UART_Start_Receive_IT+0x52>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d105      	bne.n	80082e4 <UART_Start_Receive_IT+0x48>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80082de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082e2:	e02d      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	22ff      	movs	r2, #255	; 0xff
 80082e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082ec:	e028      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10d      	bne.n	8008312 <UART_Start_Receive_IT+0x76>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d104      	bne.n	8008308 <UART_Start_Receive_IT+0x6c>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	22ff      	movs	r2, #255	; 0xff
 8008302:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008306:	e01b      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	227f      	movs	r2, #127	; 0x7f
 800830c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008310:	e016      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800831a:	d10d      	bne.n	8008338 <UART_Start_Receive_IT+0x9c>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <UART_Start_Receive_IT+0x92>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	227f      	movs	r2, #127	; 0x7f
 8008328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800832c:	e008      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	223f      	movs	r2, #63	; 0x3f
 8008332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008336:	e003      	b.n	8008340 <UART_Start_Receive_IT+0xa4>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2222      	movs	r2, #34	; 0x22
 800834c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008374:	673a      	str	r2, [r7, #112]	; 0x70
 8008376:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800837a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e3      	bne.n	8008350 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800838c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008390:	d153      	bne.n	800843a <UART_Start_Receive_IT+0x19e>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008398:	88fa      	ldrh	r2, [r7, #6]
 800839a:	429a      	cmp	r2, r3
 800839c:	d34d      	bcc.n	800843a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a6:	d107      	bne.n	80083b8 <UART_Start_Receive_IT+0x11c>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a4b      	ldr	r2, [pc, #300]	; (80084e0 <UART_Start_Receive_IT+0x244>)
 80083b4:	671a      	str	r2, [r3, #112]	; 0x70
 80083b6:	e002      	b.n	80083be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4a4a      	ldr	r2, [pc, #296]	; (80084e4 <UART_Start_Receive_IT+0x248>)
 80083bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01a      	beq.n	8008404 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e4      	bne.n	80083ce <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3308      	adds	r3, #8
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800841a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008424:	64ba      	str	r2, [r7, #72]	; 0x48
 8008426:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800842a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e5      	bne.n	8008404 <UART_Start_Receive_IT+0x168>
 8008438:	e04a      	b.n	80084d0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008442:	d107      	bne.n	8008454 <UART_Start_Receive_IT+0x1b8>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4a26      	ldr	r2, [pc, #152]	; (80084e8 <UART_Start_Receive_IT+0x24c>)
 8008450:	671a      	str	r2, [r3, #112]	; 0x70
 8008452:	e002      	b.n	800845a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4a25      	ldr	r2, [pc, #148]	; (80084ec <UART_Start_Receive_IT+0x250>)
 8008458:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d019      	beq.n	800849e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800847e:	677b      	str	r3, [r7, #116]	; 0x74
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
 800848a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800848e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e6      	bne.n	800846a <UART_Start_Receive_IT+0x1ce>
 800849c:	e018      	b.n	80084d0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	613b      	str	r3, [r7, #16]
   return(result);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f043 0320 	orr.w	r3, r3, #32
 80084b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084bc:	623b      	str	r3, [r7, #32]
 80084be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	69f9      	ldr	r1, [r7, #28]
 80084c2:	6a3a      	ldr	r2, [r7, #32]
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e6      	bne.n	800849e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	378c      	adds	r7, #140	; 0x8c
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	08008bf9 	.word	0x08008bf9
 80084e4:	08008901 	.word	0x08008901
 80084e8:	0800879f 	.word	0x0800879f
 80084ec:	0800863f 	.word	0x0800863f

080084f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b095      	sub	sp, #84	; 0x54
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800850c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008516:	643b      	str	r3, [r7, #64]	; 0x40
 8008518:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800851c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e6      	bne.n	80084f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	61fb      	str	r3, [r7, #28]
   return(result);
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	64bb      	str	r3, [r7, #72]	; 0x48
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800854e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e3      	bne.n	800852a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008566:	2b01      	cmp	r3, #1
 8008568:	d118      	bne.n	800859c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	60bb      	str	r3, [r7, #8]
   return(result);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f023 0310 	bic.w	r3, r3, #16
 800857e:	647b      	str	r3, [r7, #68]	; 0x44
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008588:	61bb      	str	r3, [r7, #24]
 800858a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6979      	ldr	r1, [r7, #20]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	613b      	str	r3, [r7, #16]
   return(result);
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e6      	bne.n	800856a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 80085b0:	bf00      	nop
 80085b2:	3754      	adds	r7, #84	; 0x54
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f7ff f996 	bl	800790c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008604:	61fb      	str	r3, [r7, #28]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6979      	ldr	r1, [r7, #20]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	613b      	str	r3, [r7, #16]
   return(result);
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e6      	bne.n	80085f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff f961 	bl	80078f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008636:	bf00      	nop
 8008638:	3720      	adds	r7, #32
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b096      	sub	sp, #88	; 0x58
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800864c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008656:	2b22      	cmp	r3, #34	; 0x22
 8008658:	f040 8095 	bne.w	8008786 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008666:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800866a:	b2d9      	uxtb	r1, r3
 800866c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008670:	b2da      	uxtb	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008676:	400a      	ands	r2, r1
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800869e:	b29b      	uxth	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d178      	bne.n	8008796 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086b8:	653b      	str	r3, [r7, #80]	; 0x50
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c2:	647b      	str	r3, [r7, #68]	; 0x44
 80086c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e6      	bne.n	80086a4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	623b      	str	r3, [r7, #32]
   return(result);
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	f023 0301 	bic.w	r3, r3, #1
 80086ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086f6:	633a      	str	r2, [r7, #48]	; 0x30
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e5      	bne.n	80086d6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2220      	movs	r2, #32
 800870e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d12e      	bne.n	800877e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	60fb      	str	r3, [r7, #12]
   return(result);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0310 	bic.w	r3, r3, #16
 800873a:	64bb      	str	r3, [r7, #72]	; 0x48
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	69b9      	ldr	r1, [r7, #24]
 800874a:	69fa      	ldr	r2, [r7, #28]
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	617b      	str	r3, [r7, #20]
   return(result);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e6      	bne.n	8008726 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	f003 0310 	and.w	r3, r3, #16
 8008762:	2b10      	cmp	r3, #16
 8008764:	d103      	bne.n	800876e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2210      	movs	r2, #16
 800876c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff f8d2 	bl	8007920 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800877c:	e00b      	b.n	8008796 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7f8 ff6c 	bl	800165c <HAL_UART_RxCpltCallback>
}
 8008784:	e007      	b.n	8008796 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699a      	ldr	r2, [r3, #24]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 0208 	orr.w	r2, r2, #8
 8008794:	619a      	str	r2, [r3, #24]
}
 8008796:	bf00      	nop
 8008798:	3758      	adds	r7, #88	; 0x58
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b096      	sub	sp, #88	; 0x58
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b6:	2b22      	cmp	r3, #34	; 0x22
 80087b8:	f040 8095 	bne.w	80088e6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80087cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80087d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087d4:	4013      	ands	r3, r2
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e0:	1c9a      	adds	r2, r3, #2
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d178      	bne.n	80088f6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008822:	643b      	str	r3, [r7, #64]	; 0x40
 8008824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e6      	bne.n	8008804 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3308      	adds	r3, #8
 800883c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	61fb      	str	r3, [r7, #28]
   return(result);
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	f023 0301 	bic.w	r3, r3, #1
 800884c:	64bb      	str	r3, [r7, #72]	; 0x48
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3308      	adds	r3, #8
 8008854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800885c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887c:	2b01      	cmp	r3, #1
 800887e:	d12e      	bne.n	80088de <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	60bb      	str	r3, [r7, #8]
   return(result);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f023 0310 	bic.w	r3, r3, #16
 800889a:	647b      	str	r3, [r7, #68]	; 0x44
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a4:	61bb      	str	r3, [r7, #24]
 80088a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6979      	ldr	r1, [r7, #20]
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	613b      	str	r3, [r7, #16]
   return(result);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e6      	bne.n	8008886 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	f003 0310 	and.w	r3, r3, #16
 80088c2:	2b10      	cmp	r3, #16
 80088c4:	d103      	bne.n	80088ce <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2210      	movs	r2, #16
 80088cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff f822 	bl	8007920 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088dc:	e00b      	b.n	80088f6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7f8 febc 	bl	800165c <HAL_UART_RxCpltCallback>
}
 80088e4:	e007      	b.n	80088f6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	699a      	ldr	r2, [r3, #24]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f042 0208 	orr.w	r2, r2, #8
 80088f4:	619a      	str	r2, [r3, #24]
}
 80088f6:	bf00      	nop
 80088f8:	3758      	adds	r7, #88	; 0x58
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b0a6      	sub	sp, #152	; 0x98
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800890e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008936:	2b22      	cmp	r3, #34	; 0x22
 8008938:	f040 814f 	bne.w	8008bda <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008942:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008946:	e0f6      	b.n	8008b36 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008952:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008956:	b2d9      	uxtb	r1, r3
 8008958:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800895c:	b2da      	uxtb	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008962:	400a      	ands	r2, r1
 8008964:	b2d2      	uxtb	r2, r2
 8008966:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800898e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d053      	beq.n	8008a42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800899a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d011      	beq.n	80089ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80089a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00b      	beq.n	80089ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2201      	movs	r2, #1
 80089b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089c0:	f043 0201 	orr.w	r2, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d011      	beq.n	80089fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80089d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2202      	movs	r2, #2
 80089e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089f0:	f043 0204 	orr.w	r2, r3, #4
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089fe:	f003 0304 	and.w	r3, r3, #4
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d011      	beq.n	8008a2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2204      	movs	r2, #4
 8008a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a20:	f043 0202 	orr.w	r2, r3, #2
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d006      	beq.n	8008a42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7fe ff69 	bl	800790c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d173      	bne.n	8008b36 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a72:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008a76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e4      	bne.n	8008a4e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a9a:	f023 0301 	bic.w	r3, r3, #1
 8008a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008aa8:	657a      	str	r2, [r7, #84]	; 0x54
 8008aaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008aae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e3      	bne.n	8008a84 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d12e      	bne.n	8008b30 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	f023 0310 	bic.w	r3, r3, #16
 8008aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008af6:	643b      	str	r3, [r7, #64]	; 0x40
 8008af8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1e6      	bne.n	8008ad8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d103      	bne.n	8008b20 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2210      	movs	r2, #16
 8008b1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fe fef9 	bl	8007920 <HAL_UARTEx_RxEventCallback>
 8008b2e:	e002      	b.n	8008b36 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7f8 fd93 	bl	800165c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d006      	beq.n	8008b4c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b42:	f003 0320 	and.w	r3, r3, #32
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f47f aefe 	bne.w	8008948 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d045      	beq.n	8008bea <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d23e      	bcs.n	8008bea <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3308      	adds	r3, #8
 8008b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	e853 3f00 	ldrex	r3, [r3]
 8008b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b82:	673b      	str	r3, [r7, #112]	; 0x70
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3308      	adds	r3, #8
 8008b8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b94:	e841 2300 	strex	r3, r2, [r1]
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e5      	bne.n	8008b6c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a14      	ldr	r2, [pc, #80]	; (8008bf4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008ba4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f043 0320 	orr.w	r3, r3, #32
 8008bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc4:	61bb      	str	r3, [r7, #24]
 8008bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	6979      	ldr	r1, [r7, #20]
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e6      	bne.n	8008ba6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bd8:	e007      	b.n	8008bea <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	699a      	ldr	r2, [r3, #24]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f042 0208 	orr.w	r2, r2, #8
 8008be8:	619a      	str	r2, [r3, #24]
}
 8008bea:	bf00      	nop
 8008bec:	3798      	adds	r7, #152	; 0x98
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	0800863f 	.word	0x0800863f

08008bf8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b0a8      	sub	sp, #160	; 0xa0
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c06:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2e:	2b22      	cmp	r3, #34	; 0x22
 8008c30:	f040 8153 	bne.w	8008eda <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c3e:	e0fa      	b.n	8008e36 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008c52:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008c56:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c68:	1c9a      	adds	r2, r3, #2
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c8e:	f003 0307 	and.w	r3, r3, #7
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d053      	beq.n	8008d3e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d011      	beq.n	8008cc6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cbc:	f043 0201 	orr.w	r2, r3, #1
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d011      	beq.n	8008cf6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00b      	beq.n	8008cf6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cec:	f043 0204 	orr.w	r2, r3, #4
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d011      	beq.n	8008d26 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00b      	beq.n	8008d26 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2204      	movs	r2, #4
 8008d14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d1c:	f043 0202 	orr.w	r2, r3, #2
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d006      	beq.n	8008d3e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7fe fdeb 	bl	800790c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d175      	bne.n	8008e36 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d6e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e4      	bne.n	8008d4a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3308      	adds	r3, #8
 8008d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d96:	f023 0301 	bic.w	r3, r3, #1
 8008d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3308      	adds	r3, #8
 8008da4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008da8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008daa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e1      	bne.n	8008d80 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d12e      	bne.n	8008e30 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	f023 0310 	bic.w	r3, r3, #16
 8008dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008df6:	647b      	str	r3, [r7, #68]	; 0x44
 8008df8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e6      	bne.n	8008dd8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b10      	cmp	r3, #16
 8008e16:	d103      	bne.n	8008e20 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7fe fd79 	bl	8007920 <HAL_UARTEx_RxEventCallback>
 8008e2e:	e002      	b.n	8008e36 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7f8 fc13 	bl	800165c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d006      	beq.n	8008e4c <UART_RxISR_16BIT_FIFOEN+0x254>
 8008e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f47f aefa 	bne.w	8008c40 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e52:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e56:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d045      	beq.n	8008eea <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e64:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d23e      	bcs.n	8008eea <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3308      	adds	r3, #8
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e82:	677b      	str	r3, [r7, #116]	; 0x74
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3308      	adds	r3, #8
 8008e8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008e8c:	633a      	str	r2, [r7, #48]	; 0x30
 8008e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e5      	bne.n	8008e6c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a14      	ldr	r2, [pc, #80]	; (8008ef4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008ea4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f043 0320 	orr.w	r3, r3, #32
 8008eba:	673b      	str	r3, [r7, #112]	; 0x70
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	69b9      	ldr	r1, [r7, #24]
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ed8:	e007      	b.n	8008eea <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	699a      	ldr	r2, [r3, #24]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0208 	orr.w	r2, r2, #8
 8008ee8:	619a      	str	r2, [r3, #24]
}
 8008eea:	bf00      	nop
 8008eec:	37a0      	adds	r7, #160	; 0xa0
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	0800879f 	.word	0x0800879f

08008ef8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d101      	bne.n	8008f4a <HAL_UARTEx_DisableFifoMode+0x16>
 8008f46:	2302      	movs	r3, #2
 8008f48:	e027      	b.n	8008f9a <HAL_UARTEx_DisableFifoMode+0x66>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2224      	movs	r2, #36	; 0x24
 8008f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0201 	bic.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d101      	bne.n	8008fbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e02d      	b.n	800901a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2224      	movs	r2, #36	; 0x24
 8008fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f022 0201 	bic.w	r2, r2, #1
 8008fe4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f850 	bl	80090a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009032:	2b01      	cmp	r3, #1
 8009034:	d101      	bne.n	800903a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009036:	2302      	movs	r3, #2
 8009038:	e02d      	b.n	8009096 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2224      	movs	r2, #36	; 0x24
 8009046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0201 	bic.w	r2, r2, #1
 8009060:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f812 	bl	80090a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d108      	bne.n	80090c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090c0:	e031      	b.n	8009126 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090c2:	2308      	movs	r3, #8
 80090c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090c6:	2308      	movs	r3, #8
 80090c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	0e5b      	lsrs	r3, r3, #25
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	0f5b      	lsrs	r3, r3, #29
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	7b3a      	ldrb	r2, [r7, #12]
 80090ee:	4911      	ldr	r1, [pc, #68]	; (8009134 <UARTEx_SetNbDataToProcess+0x94>)
 80090f0:	5c8a      	ldrb	r2, [r1, r2]
 80090f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090f6:	7b3a      	ldrb	r2, [r7, #12]
 80090f8:	490f      	ldr	r1, [pc, #60]	; (8009138 <UARTEx_SetNbDataToProcess+0x98>)
 80090fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009100:	b29a      	uxth	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	7b7a      	ldrb	r2, [r7, #13]
 800910c:	4909      	ldr	r1, [pc, #36]	; (8009134 <UARTEx_SetNbDataToProcess+0x94>)
 800910e:	5c8a      	ldrb	r2, [r1, r2]
 8009110:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009114:	7b7a      	ldrb	r2, [r7, #13]
 8009116:	4908      	ldr	r1, [pc, #32]	; (8009138 <UARTEx_SetNbDataToProcess+0x98>)
 8009118:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800911a:	fb93 f3f2 	sdiv	r3, r3, r2
 800911e:	b29a      	uxth	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	0800a82c 	.word	0x0800a82c
 8009138:	0800a834 	.word	0x0800a834

0800913c <atoi>:
 800913c:	220a      	movs	r2, #10
 800913e:	2100      	movs	r1, #0
 8009140:	f000 b944 	b.w	80093cc <strtol>

08009144 <__errno>:
 8009144:	4b01      	ldr	r3, [pc, #4]	; (800914c <__errno+0x8>)
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	200001d0 	.word	0x200001d0

08009150 <__libc_init_array>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	4d0d      	ldr	r5, [pc, #52]	; (8009188 <__libc_init_array+0x38>)
 8009154:	4c0d      	ldr	r4, [pc, #52]	; (800918c <__libc_init_array+0x3c>)
 8009156:	1b64      	subs	r4, r4, r5
 8009158:	10a4      	asrs	r4, r4, #2
 800915a:	2600      	movs	r6, #0
 800915c:	42a6      	cmp	r6, r4
 800915e:	d109      	bne.n	8009174 <__libc_init_array+0x24>
 8009160:	4d0b      	ldr	r5, [pc, #44]	; (8009190 <__libc_init_array+0x40>)
 8009162:	4c0c      	ldr	r4, [pc, #48]	; (8009194 <__libc_init_array+0x44>)
 8009164:	f001 faf2 	bl	800a74c <_init>
 8009168:	1b64      	subs	r4, r4, r5
 800916a:	10a4      	asrs	r4, r4, #2
 800916c:	2600      	movs	r6, #0
 800916e:	42a6      	cmp	r6, r4
 8009170:	d105      	bne.n	800917e <__libc_init_array+0x2e>
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	f855 3b04 	ldr.w	r3, [r5], #4
 8009178:	4798      	blx	r3
 800917a:	3601      	adds	r6, #1
 800917c:	e7ee      	b.n	800915c <__libc_init_array+0xc>
 800917e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009182:	4798      	blx	r3
 8009184:	3601      	adds	r6, #1
 8009186:	e7f2      	b.n	800916e <__libc_init_array+0x1e>
 8009188:	0800aa8c 	.word	0x0800aa8c
 800918c:	0800aa8c 	.word	0x0800aa8c
 8009190:	0800aa8c 	.word	0x0800aa8c
 8009194:	0800aa90 	.word	0x0800aa90

08009198 <memset>:
 8009198:	4402      	add	r2, r0
 800919a:	4603      	mov	r3, r0
 800919c:	4293      	cmp	r3, r2
 800919e:	d100      	bne.n	80091a2 <memset+0xa>
 80091a0:	4770      	bx	lr
 80091a2:	f803 1b01 	strb.w	r1, [r3], #1
 80091a6:	e7f9      	b.n	800919c <memset+0x4>

080091a8 <sniprintf>:
 80091a8:	b40c      	push	{r2, r3}
 80091aa:	b530      	push	{r4, r5, lr}
 80091ac:	4b17      	ldr	r3, [pc, #92]	; (800920c <sniprintf+0x64>)
 80091ae:	1e0c      	subs	r4, r1, #0
 80091b0:	681d      	ldr	r5, [r3, #0]
 80091b2:	b09d      	sub	sp, #116	; 0x74
 80091b4:	da08      	bge.n	80091c8 <sniprintf+0x20>
 80091b6:	238b      	movs	r3, #139	; 0x8b
 80091b8:	602b      	str	r3, [r5, #0]
 80091ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091be:	b01d      	add	sp, #116	; 0x74
 80091c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c4:	b002      	add	sp, #8
 80091c6:	4770      	bx	lr
 80091c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80091cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80091d0:	bf14      	ite	ne
 80091d2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80091d6:	4623      	moveq	r3, r4
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	9307      	str	r3, [sp, #28]
 80091dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091e0:	9002      	str	r0, [sp, #8]
 80091e2:	9006      	str	r0, [sp, #24]
 80091e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80091e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091ea:	ab21      	add	r3, sp, #132	; 0x84
 80091ec:	a902      	add	r1, sp, #8
 80091ee:	4628      	mov	r0, r5
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	f000 fa69 	bl	80096c8 <_svfiprintf_r>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	bfbc      	itt	lt
 80091fa:	238b      	movlt	r3, #139	; 0x8b
 80091fc:	602b      	strlt	r3, [r5, #0]
 80091fe:	2c00      	cmp	r4, #0
 8009200:	d0dd      	beq.n	80091be <sniprintf+0x16>
 8009202:	9b02      	ldr	r3, [sp, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
 8009208:	e7d9      	b.n	80091be <sniprintf+0x16>
 800920a:	bf00      	nop
 800920c:	200001d0 	.word	0x200001d0

08009210 <strtok>:
 8009210:	4b16      	ldr	r3, [pc, #88]	; (800926c <strtok+0x5c>)
 8009212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009214:	681e      	ldr	r6, [r3, #0]
 8009216:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009218:	4605      	mov	r5, r0
 800921a:	b9fc      	cbnz	r4, 800925c <strtok+0x4c>
 800921c:	2050      	movs	r0, #80	; 0x50
 800921e:	9101      	str	r1, [sp, #4]
 8009220:	f000 f90e 	bl	8009440 <malloc>
 8009224:	9901      	ldr	r1, [sp, #4]
 8009226:	65b0      	str	r0, [r6, #88]	; 0x58
 8009228:	4602      	mov	r2, r0
 800922a:	b920      	cbnz	r0, 8009236 <strtok+0x26>
 800922c:	4b10      	ldr	r3, [pc, #64]	; (8009270 <strtok+0x60>)
 800922e:	4811      	ldr	r0, [pc, #68]	; (8009274 <strtok+0x64>)
 8009230:	2157      	movs	r1, #87	; 0x57
 8009232:	f000 f8d5 	bl	80093e0 <__assert_func>
 8009236:	e9c0 4400 	strd	r4, r4, [r0]
 800923a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800923e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009242:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009246:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800924a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800924e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009252:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009256:	6184      	str	r4, [r0, #24]
 8009258:	7704      	strb	r4, [r0, #28]
 800925a:	6244      	str	r4, [r0, #36]	; 0x24
 800925c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800925e:	2301      	movs	r3, #1
 8009260:	4628      	mov	r0, r5
 8009262:	b002      	add	sp, #8
 8009264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009268:	f000 b806 	b.w	8009278 <__strtok_r>
 800926c:	200001d0 	.word	0x200001d0
 8009270:	0800a840 	.word	0x0800a840
 8009274:	0800a857 	.word	0x0800a857

08009278 <__strtok_r>:
 8009278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927a:	b908      	cbnz	r0, 8009280 <__strtok_r+0x8>
 800927c:	6810      	ldr	r0, [r2, #0]
 800927e:	b188      	cbz	r0, 80092a4 <__strtok_r+0x2c>
 8009280:	4604      	mov	r4, r0
 8009282:	4620      	mov	r0, r4
 8009284:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009288:	460f      	mov	r7, r1
 800928a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800928e:	b91e      	cbnz	r6, 8009298 <__strtok_r+0x20>
 8009290:	b965      	cbnz	r5, 80092ac <__strtok_r+0x34>
 8009292:	6015      	str	r5, [r2, #0]
 8009294:	4628      	mov	r0, r5
 8009296:	e005      	b.n	80092a4 <__strtok_r+0x2c>
 8009298:	42b5      	cmp	r5, r6
 800929a:	d1f6      	bne.n	800928a <__strtok_r+0x12>
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1f0      	bne.n	8009282 <__strtok_r+0xa>
 80092a0:	6014      	str	r4, [r2, #0]
 80092a2:	7003      	strb	r3, [r0, #0]
 80092a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a6:	461c      	mov	r4, r3
 80092a8:	e00c      	b.n	80092c4 <__strtok_r+0x4c>
 80092aa:	b915      	cbnz	r5, 80092b2 <__strtok_r+0x3a>
 80092ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092b0:	460e      	mov	r6, r1
 80092b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80092b6:	42ab      	cmp	r3, r5
 80092b8:	d1f7      	bne.n	80092aa <__strtok_r+0x32>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0f3      	beq.n	80092a6 <__strtok_r+0x2e>
 80092be:	2300      	movs	r3, #0
 80092c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80092c4:	6014      	str	r4, [r2, #0]
 80092c6:	e7ed      	b.n	80092a4 <__strtok_r+0x2c>

080092c8 <_strtol_l.constprop.0>:
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ce:	d001      	beq.n	80092d4 <_strtol_l.constprop.0+0xc>
 80092d0:	2b24      	cmp	r3, #36	; 0x24
 80092d2:	d906      	bls.n	80092e2 <_strtol_l.constprop.0+0x1a>
 80092d4:	f7ff ff36 	bl	8009144 <__errno>
 80092d8:	2316      	movs	r3, #22
 80092da:	6003      	str	r3, [r0, #0]
 80092dc:	2000      	movs	r0, #0
 80092de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80093c8 <_strtol_l.constprop.0+0x100>
 80092e6:	460d      	mov	r5, r1
 80092e8:	462e      	mov	r6, r5
 80092ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80092f2:	f017 0708 	ands.w	r7, r7, #8
 80092f6:	d1f7      	bne.n	80092e8 <_strtol_l.constprop.0+0x20>
 80092f8:	2c2d      	cmp	r4, #45	; 0x2d
 80092fa:	d132      	bne.n	8009362 <_strtol_l.constprop.0+0x9a>
 80092fc:	782c      	ldrb	r4, [r5, #0]
 80092fe:	2701      	movs	r7, #1
 8009300:	1cb5      	adds	r5, r6, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05b      	beq.n	80093be <_strtol_l.constprop.0+0xf6>
 8009306:	2b10      	cmp	r3, #16
 8009308:	d109      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 800930a:	2c30      	cmp	r4, #48	; 0x30
 800930c:	d107      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 800930e:	782c      	ldrb	r4, [r5, #0]
 8009310:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009314:	2c58      	cmp	r4, #88	; 0x58
 8009316:	d14d      	bne.n	80093b4 <_strtol_l.constprop.0+0xec>
 8009318:	786c      	ldrb	r4, [r5, #1]
 800931a:	2310      	movs	r3, #16
 800931c:	3502      	adds	r5, #2
 800931e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009322:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009326:	f04f 0c00 	mov.w	ip, #0
 800932a:	fbb8 f9f3 	udiv	r9, r8, r3
 800932e:	4666      	mov	r6, ip
 8009330:	fb03 8a19 	mls	sl, r3, r9, r8
 8009334:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009338:	f1be 0f09 	cmp.w	lr, #9
 800933c:	d816      	bhi.n	800936c <_strtol_l.constprop.0+0xa4>
 800933e:	4674      	mov	r4, lr
 8009340:	42a3      	cmp	r3, r4
 8009342:	dd24      	ble.n	800938e <_strtol_l.constprop.0+0xc6>
 8009344:	f1bc 0f00 	cmp.w	ip, #0
 8009348:	db1e      	blt.n	8009388 <_strtol_l.constprop.0+0xc0>
 800934a:	45b1      	cmp	r9, r6
 800934c:	d31c      	bcc.n	8009388 <_strtol_l.constprop.0+0xc0>
 800934e:	d101      	bne.n	8009354 <_strtol_l.constprop.0+0x8c>
 8009350:	45a2      	cmp	sl, r4
 8009352:	db19      	blt.n	8009388 <_strtol_l.constprop.0+0xc0>
 8009354:	fb06 4603 	mla	r6, r6, r3, r4
 8009358:	f04f 0c01 	mov.w	ip, #1
 800935c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009360:	e7e8      	b.n	8009334 <_strtol_l.constprop.0+0x6c>
 8009362:	2c2b      	cmp	r4, #43	; 0x2b
 8009364:	bf04      	itt	eq
 8009366:	782c      	ldrbeq	r4, [r5, #0]
 8009368:	1cb5      	addeq	r5, r6, #2
 800936a:	e7ca      	b.n	8009302 <_strtol_l.constprop.0+0x3a>
 800936c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009370:	f1be 0f19 	cmp.w	lr, #25
 8009374:	d801      	bhi.n	800937a <_strtol_l.constprop.0+0xb2>
 8009376:	3c37      	subs	r4, #55	; 0x37
 8009378:	e7e2      	b.n	8009340 <_strtol_l.constprop.0+0x78>
 800937a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800937e:	f1be 0f19 	cmp.w	lr, #25
 8009382:	d804      	bhi.n	800938e <_strtol_l.constprop.0+0xc6>
 8009384:	3c57      	subs	r4, #87	; 0x57
 8009386:	e7db      	b.n	8009340 <_strtol_l.constprop.0+0x78>
 8009388:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800938c:	e7e6      	b.n	800935c <_strtol_l.constprop.0+0x94>
 800938e:	f1bc 0f00 	cmp.w	ip, #0
 8009392:	da05      	bge.n	80093a0 <_strtol_l.constprop.0+0xd8>
 8009394:	2322      	movs	r3, #34	; 0x22
 8009396:	6003      	str	r3, [r0, #0]
 8009398:	4646      	mov	r6, r8
 800939a:	b942      	cbnz	r2, 80093ae <_strtol_l.constprop.0+0xe6>
 800939c:	4630      	mov	r0, r6
 800939e:	e79e      	b.n	80092de <_strtol_l.constprop.0+0x16>
 80093a0:	b107      	cbz	r7, 80093a4 <_strtol_l.constprop.0+0xdc>
 80093a2:	4276      	negs	r6, r6
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	d0f9      	beq.n	800939c <_strtol_l.constprop.0+0xd4>
 80093a8:	f1bc 0f00 	cmp.w	ip, #0
 80093ac:	d000      	beq.n	80093b0 <_strtol_l.constprop.0+0xe8>
 80093ae:	1e69      	subs	r1, r5, #1
 80093b0:	6011      	str	r1, [r2, #0]
 80093b2:	e7f3      	b.n	800939c <_strtol_l.constprop.0+0xd4>
 80093b4:	2430      	movs	r4, #48	; 0x30
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1b1      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 80093ba:	2308      	movs	r3, #8
 80093bc:	e7af      	b.n	800931e <_strtol_l.constprop.0+0x56>
 80093be:	2c30      	cmp	r4, #48	; 0x30
 80093c0:	d0a5      	beq.n	800930e <_strtol_l.constprop.0+0x46>
 80093c2:	230a      	movs	r3, #10
 80093c4:	e7ab      	b.n	800931e <_strtol_l.constprop.0+0x56>
 80093c6:	bf00      	nop
 80093c8:	0800a8f1 	.word	0x0800a8f1

080093cc <strtol>:
 80093cc:	4613      	mov	r3, r2
 80093ce:	460a      	mov	r2, r1
 80093d0:	4601      	mov	r1, r0
 80093d2:	4802      	ldr	r0, [pc, #8]	; (80093dc <strtol+0x10>)
 80093d4:	6800      	ldr	r0, [r0, #0]
 80093d6:	f7ff bf77 	b.w	80092c8 <_strtol_l.constprop.0>
 80093da:	bf00      	nop
 80093dc:	200001d0 	.word	0x200001d0

080093e0 <__assert_func>:
 80093e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093e2:	4614      	mov	r4, r2
 80093e4:	461a      	mov	r2, r3
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <__assert_func+0x2c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4605      	mov	r5, r0
 80093ec:	68d8      	ldr	r0, [r3, #12]
 80093ee:	b14c      	cbz	r4, 8009404 <__assert_func+0x24>
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <__assert_func+0x30>)
 80093f2:	9100      	str	r1, [sp, #0]
 80093f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093f8:	4906      	ldr	r1, [pc, #24]	; (8009414 <__assert_func+0x34>)
 80093fa:	462b      	mov	r3, r5
 80093fc:	f000 f80e 	bl	800941c <fiprintf>
 8009400:	f000 fe20 	bl	800a044 <abort>
 8009404:	4b04      	ldr	r3, [pc, #16]	; (8009418 <__assert_func+0x38>)
 8009406:	461c      	mov	r4, r3
 8009408:	e7f3      	b.n	80093f2 <__assert_func+0x12>
 800940a:	bf00      	nop
 800940c:	200001d0 	.word	0x200001d0
 8009410:	0800a8b4 	.word	0x0800a8b4
 8009414:	0800a8c1 	.word	0x0800a8c1
 8009418:	0800a8ef 	.word	0x0800a8ef

0800941c <fiprintf>:
 800941c:	b40e      	push	{r1, r2, r3}
 800941e:	b503      	push	{r0, r1, lr}
 8009420:	4601      	mov	r1, r0
 8009422:	ab03      	add	r3, sp, #12
 8009424:	4805      	ldr	r0, [pc, #20]	; (800943c <fiprintf+0x20>)
 8009426:	f853 2b04 	ldr.w	r2, [r3], #4
 800942a:	6800      	ldr	r0, [r0, #0]
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	f000 fa75 	bl	800991c <_vfiprintf_r>
 8009432:	b002      	add	sp, #8
 8009434:	f85d eb04 	ldr.w	lr, [sp], #4
 8009438:	b003      	add	sp, #12
 800943a:	4770      	bx	lr
 800943c:	200001d0 	.word	0x200001d0

08009440 <malloc>:
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <malloc+0xc>)
 8009442:	4601      	mov	r1, r0
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f000 b86f 	b.w	8009528 <_malloc_r>
 800944a:	bf00      	nop
 800944c:	200001d0 	.word	0x200001d0

08009450 <_free_r>:
 8009450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009452:	2900      	cmp	r1, #0
 8009454:	d044      	beq.n	80094e0 <_free_r+0x90>
 8009456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945a:	9001      	str	r0, [sp, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f1a1 0404 	sub.w	r4, r1, #4
 8009462:	bfb8      	it	lt
 8009464:	18e4      	addlt	r4, r4, r3
 8009466:	f001 f83d 	bl	800a4e4 <__malloc_lock>
 800946a:	4a1e      	ldr	r2, [pc, #120]	; (80094e4 <_free_r+0x94>)
 800946c:	9801      	ldr	r0, [sp, #4]
 800946e:	6813      	ldr	r3, [r2, #0]
 8009470:	b933      	cbnz	r3, 8009480 <_free_r+0x30>
 8009472:	6063      	str	r3, [r4, #4]
 8009474:	6014      	str	r4, [r2, #0]
 8009476:	b003      	add	sp, #12
 8009478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800947c:	f001 b838 	b.w	800a4f0 <__malloc_unlock>
 8009480:	42a3      	cmp	r3, r4
 8009482:	d908      	bls.n	8009496 <_free_r+0x46>
 8009484:	6825      	ldr	r5, [r4, #0]
 8009486:	1961      	adds	r1, r4, r5
 8009488:	428b      	cmp	r3, r1
 800948a:	bf01      	itttt	eq
 800948c:	6819      	ldreq	r1, [r3, #0]
 800948e:	685b      	ldreq	r3, [r3, #4]
 8009490:	1949      	addeq	r1, r1, r5
 8009492:	6021      	streq	r1, [r4, #0]
 8009494:	e7ed      	b.n	8009472 <_free_r+0x22>
 8009496:	461a      	mov	r2, r3
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	b10b      	cbz	r3, 80094a0 <_free_r+0x50>
 800949c:	42a3      	cmp	r3, r4
 800949e:	d9fa      	bls.n	8009496 <_free_r+0x46>
 80094a0:	6811      	ldr	r1, [r2, #0]
 80094a2:	1855      	adds	r5, r2, r1
 80094a4:	42a5      	cmp	r5, r4
 80094a6:	d10b      	bne.n	80094c0 <_free_r+0x70>
 80094a8:	6824      	ldr	r4, [r4, #0]
 80094aa:	4421      	add	r1, r4
 80094ac:	1854      	adds	r4, r2, r1
 80094ae:	42a3      	cmp	r3, r4
 80094b0:	6011      	str	r1, [r2, #0]
 80094b2:	d1e0      	bne.n	8009476 <_free_r+0x26>
 80094b4:	681c      	ldr	r4, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	6053      	str	r3, [r2, #4]
 80094ba:	4421      	add	r1, r4
 80094bc:	6011      	str	r1, [r2, #0]
 80094be:	e7da      	b.n	8009476 <_free_r+0x26>
 80094c0:	d902      	bls.n	80094c8 <_free_r+0x78>
 80094c2:	230c      	movs	r3, #12
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	e7d6      	b.n	8009476 <_free_r+0x26>
 80094c8:	6825      	ldr	r5, [r4, #0]
 80094ca:	1961      	adds	r1, r4, r5
 80094cc:	428b      	cmp	r3, r1
 80094ce:	bf04      	itt	eq
 80094d0:	6819      	ldreq	r1, [r3, #0]
 80094d2:	685b      	ldreq	r3, [r3, #4]
 80094d4:	6063      	str	r3, [r4, #4]
 80094d6:	bf04      	itt	eq
 80094d8:	1949      	addeq	r1, r1, r5
 80094da:	6021      	streq	r1, [r4, #0]
 80094dc:	6054      	str	r4, [r2, #4]
 80094de:	e7ca      	b.n	8009476 <_free_r+0x26>
 80094e0:	b003      	add	sp, #12
 80094e2:	bd30      	pop	{r4, r5, pc}
 80094e4:	200004e8 	.word	0x200004e8

080094e8 <sbrk_aligned>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	4e0e      	ldr	r6, [pc, #56]	; (8009524 <sbrk_aligned+0x3c>)
 80094ec:	460c      	mov	r4, r1
 80094ee:	6831      	ldr	r1, [r6, #0]
 80094f0:	4605      	mov	r5, r0
 80094f2:	b911      	cbnz	r1, 80094fa <sbrk_aligned+0x12>
 80094f4:	f000 fcd6 	bl	8009ea4 <_sbrk_r>
 80094f8:	6030      	str	r0, [r6, #0]
 80094fa:	4621      	mov	r1, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 fcd1 	bl	8009ea4 <_sbrk_r>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	d00a      	beq.n	800951c <sbrk_aligned+0x34>
 8009506:	1cc4      	adds	r4, r0, #3
 8009508:	f024 0403 	bic.w	r4, r4, #3
 800950c:	42a0      	cmp	r0, r4
 800950e:	d007      	beq.n	8009520 <sbrk_aligned+0x38>
 8009510:	1a21      	subs	r1, r4, r0
 8009512:	4628      	mov	r0, r5
 8009514:	f000 fcc6 	bl	8009ea4 <_sbrk_r>
 8009518:	3001      	adds	r0, #1
 800951a:	d101      	bne.n	8009520 <sbrk_aligned+0x38>
 800951c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009520:	4620      	mov	r0, r4
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	200004ec 	.word	0x200004ec

08009528 <_malloc_r>:
 8009528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952c:	1ccd      	adds	r5, r1, #3
 800952e:	f025 0503 	bic.w	r5, r5, #3
 8009532:	3508      	adds	r5, #8
 8009534:	2d0c      	cmp	r5, #12
 8009536:	bf38      	it	cc
 8009538:	250c      	movcc	r5, #12
 800953a:	2d00      	cmp	r5, #0
 800953c:	4607      	mov	r7, r0
 800953e:	db01      	blt.n	8009544 <_malloc_r+0x1c>
 8009540:	42a9      	cmp	r1, r5
 8009542:	d905      	bls.n	8009550 <_malloc_r+0x28>
 8009544:	230c      	movs	r3, #12
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	2600      	movs	r6, #0
 800954a:	4630      	mov	r0, r6
 800954c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009550:	4e2e      	ldr	r6, [pc, #184]	; (800960c <_malloc_r+0xe4>)
 8009552:	f000 ffc7 	bl	800a4e4 <__malloc_lock>
 8009556:	6833      	ldr	r3, [r6, #0]
 8009558:	461c      	mov	r4, r3
 800955a:	bb34      	cbnz	r4, 80095aa <_malloc_r+0x82>
 800955c:	4629      	mov	r1, r5
 800955e:	4638      	mov	r0, r7
 8009560:	f7ff ffc2 	bl	80094e8 <sbrk_aligned>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	4604      	mov	r4, r0
 8009568:	d14d      	bne.n	8009606 <_malloc_r+0xde>
 800956a:	6834      	ldr	r4, [r6, #0]
 800956c:	4626      	mov	r6, r4
 800956e:	2e00      	cmp	r6, #0
 8009570:	d140      	bne.n	80095f4 <_malloc_r+0xcc>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	4631      	mov	r1, r6
 8009576:	4638      	mov	r0, r7
 8009578:	eb04 0803 	add.w	r8, r4, r3
 800957c:	f000 fc92 	bl	8009ea4 <_sbrk_r>
 8009580:	4580      	cmp	r8, r0
 8009582:	d13a      	bne.n	80095fa <_malloc_r+0xd2>
 8009584:	6821      	ldr	r1, [r4, #0]
 8009586:	3503      	adds	r5, #3
 8009588:	1a6d      	subs	r5, r5, r1
 800958a:	f025 0503 	bic.w	r5, r5, #3
 800958e:	3508      	adds	r5, #8
 8009590:	2d0c      	cmp	r5, #12
 8009592:	bf38      	it	cc
 8009594:	250c      	movcc	r5, #12
 8009596:	4629      	mov	r1, r5
 8009598:	4638      	mov	r0, r7
 800959a:	f7ff ffa5 	bl	80094e8 <sbrk_aligned>
 800959e:	3001      	adds	r0, #1
 80095a0:	d02b      	beq.n	80095fa <_malloc_r+0xd2>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	442b      	add	r3, r5
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	e00e      	b.n	80095c8 <_malloc_r+0xa0>
 80095aa:	6822      	ldr	r2, [r4, #0]
 80095ac:	1b52      	subs	r2, r2, r5
 80095ae:	d41e      	bmi.n	80095ee <_malloc_r+0xc6>
 80095b0:	2a0b      	cmp	r2, #11
 80095b2:	d916      	bls.n	80095e2 <_malloc_r+0xba>
 80095b4:	1961      	adds	r1, r4, r5
 80095b6:	42a3      	cmp	r3, r4
 80095b8:	6025      	str	r5, [r4, #0]
 80095ba:	bf18      	it	ne
 80095bc:	6059      	strne	r1, [r3, #4]
 80095be:	6863      	ldr	r3, [r4, #4]
 80095c0:	bf08      	it	eq
 80095c2:	6031      	streq	r1, [r6, #0]
 80095c4:	5162      	str	r2, [r4, r5]
 80095c6:	604b      	str	r3, [r1, #4]
 80095c8:	4638      	mov	r0, r7
 80095ca:	f104 060b 	add.w	r6, r4, #11
 80095ce:	f000 ff8f 	bl	800a4f0 <__malloc_unlock>
 80095d2:	f026 0607 	bic.w	r6, r6, #7
 80095d6:	1d23      	adds	r3, r4, #4
 80095d8:	1af2      	subs	r2, r6, r3
 80095da:	d0b6      	beq.n	800954a <_malloc_r+0x22>
 80095dc:	1b9b      	subs	r3, r3, r6
 80095de:	50a3      	str	r3, [r4, r2]
 80095e0:	e7b3      	b.n	800954a <_malloc_r+0x22>
 80095e2:	6862      	ldr	r2, [r4, #4]
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	bf0c      	ite	eq
 80095e8:	6032      	streq	r2, [r6, #0]
 80095ea:	605a      	strne	r2, [r3, #4]
 80095ec:	e7ec      	b.n	80095c8 <_malloc_r+0xa0>
 80095ee:	4623      	mov	r3, r4
 80095f0:	6864      	ldr	r4, [r4, #4]
 80095f2:	e7b2      	b.n	800955a <_malloc_r+0x32>
 80095f4:	4634      	mov	r4, r6
 80095f6:	6876      	ldr	r6, [r6, #4]
 80095f8:	e7b9      	b.n	800956e <_malloc_r+0x46>
 80095fa:	230c      	movs	r3, #12
 80095fc:	603b      	str	r3, [r7, #0]
 80095fe:	4638      	mov	r0, r7
 8009600:	f000 ff76 	bl	800a4f0 <__malloc_unlock>
 8009604:	e7a1      	b.n	800954a <_malloc_r+0x22>
 8009606:	6025      	str	r5, [r4, #0]
 8009608:	e7de      	b.n	80095c8 <_malloc_r+0xa0>
 800960a:	bf00      	nop
 800960c:	200004e8 	.word	0x200004e8

08009610 <__ssputs_r>:
 8009610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009614:	688e      	ldr	r6, [r1, #8]
 8009616:	429e      	cmp	r6, r3
 8009618:	4682      	mov	sl, r0
 800961a:	460c      	mov	r4, r1
 800961c:	4690      	mov	r8, r2
 800961e:	461f      	mov	r7, r3
 8009620:	d838      	bhi.n	8009694 <__ssputs_r+0x84>
 8009622:	898a      	ldrh	r2, [r1, #12]
 8009624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009628:	d032      	beq.n	8009690 <__ssputs_r+0x80>
 800962a:	6825      	ldr	r5, [r4, #0]
 800962c:	6909      	ldr	r1, [r1, #16]
 800962e:	eba5 0901 	sub.w	r9, r5, r1
 8009632:	6965      	ldr	r5, [r4, #20]
 8009634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800963c:	3301      	adds	r3, #1
 800963e:	444b      	add	r3, r9
 8009640:	106d      	asrs	r5, r5, #1
 8009642:	429d      	cmp	r5, r3
 8009644:	bf38      	it	cc
 8009646:	461d      	movcc	r5, r3
 8009648:	0553      	lsls	r3, r2, #21
 800964a:	d531      	bpl.n	80096b0 <__ssputs_r+0xa0>
 800964c:	4629      	mov	r1, r5
 800964e:	f7ff ff6b 	bl	8009528 <_malloc_r>
 8009652:	4606      	mov	r6, r0
 8009654:	b950      	cbnz	r0, 800966c <__ssputs_r+0x5c>
 8009656:	230c      	movs	r3, #12
 8009658:	f8ca 3000 	str.w	r3, [sl]
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966c:	6921      	ldr	r1, [r4, #16]
 800966e:	464a      	mov	r2, r9
 8009670:	f000 ff10 	bl	800a494 <memcpy>
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800967a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800967e:	81a3      	strh	r3, [r4, #12]
 8009680:	6126      	str	r6, [r4, #16]
 8009682:	6165      	str	r5, [r4, #20]
 8009684:	444e      	add	r6, r9
 8009686:	eba5 0509 	sub.w	r5, r5, r9
 800968a:	6026      	str	r6, [r4, #0]
 800968c:	60a5      	str	r5, [r4, #8]
 800968e:	463e      	mov	r6, r7
 8009690:	42be      	cmp	r6, r7
 8009692:	d900      	bls.n	8009696 <__ssputs_r+0x86>
 8009694:	463e      	mov	r6, r7
 8009696:	6820      	ldr	r0, [r4, #0]
 8009698:	4632      	mov	r2, r6
 800969a:	4641      	mov	r1, r8
 800969c:	f000 ff08 	bl	800a4b0 <memmove>
 80096a0:	68a3      	ldr	r3, [r4, #8]
 80096a2:	1b9b      	subs	r3, r3, r6
 80096a4:	60a3      	str	r3, [r4, #8]
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	4433      	add	r3, r6
 80096aa:	6023      	str	r3, [r4, #0]
 80096ac:	2000      	movs	r0, #0
 80096ae:	e7db      	b.n	8009668 <__ssputs_r+0x58>
 80096b0:	462a      	mov	r2, r5
 80096b2:	f000 ff23 	bl	800a4fc <_realloc_r>
 80096b6:	4606      	mov	r6, r0
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d1e1      	bne.n	8009680 <__ssputs_r+0x70>
 80096bc:	6921      	ldr	r1, [r4, #16]
 80096be:	4650      	mov	r0, sl
 80096c0:	f7ff fec6 	bl	8009450 <_free_r>
 80096c4:	e7c7      	b.n	8009656 <__ssputs_r+0x46>
	...

080096c8 <_svfiprintf_r>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	4698      	mov	r8, r3
 80096ce:	898b      	ldrh	r3, [r1, #12]
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	b09d      	sub	sp, #116	; 0x74
 80096d4:	4607      	mov	r7, r0
 80096d6:	460d      	mov	r5, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	d50e      	bpl.n	80096fa <_svfiprintf_r+0x32>
 80096dc:	690b      	ldr	r3, [r1, #16]
 80096de:	b963      	cbnz	r3, 80096fa <_svfiprintf_r+0x32>
 80096e0:	2140      	movs	r1, #64	; 0x40
 80096e2:	f7ff ff21 	bl	8009528 <_malloc_r>
 80096e6:	6028      	str	r0, [r5, #0]
 80096e8:	6128      	str	r0, [r5, #16]
 80096ea:	b920      	cbnz	r0, 80096f6 <_svfiprintf_r+0x2e>
 80096ec:	230c      	movs	r3, #12
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f4:	e0d1      	b.n	800989a <_svfiprintf_r+0x1d2>
 80096f6:	2340      	movs	r3, #64	; 0x40
 80096f8:	616b      	str	r3, [r5, #20]
 80096fa:	2300      	movs	r3, #0
 80096fc:	9309      	str	r3, [sp, #36]	; 0x24
 80096fe:	2320      	movs	r3, #32
 8009700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009704:	f8cd 800c 	str.w	r8, [sp, #12]
 8009708:	2330      	movs	r3, #48	; 0x30
 800970a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098b4 <_svfiprintf_r+0x1ec>
 800970e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009712:	f04f 0901 	mov.w	r9, #1
 8009716:	4623      	mov	r3, r4
 8009718:	469a      	mov	sl, r3
 800971a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800971e:	b10a      	cbz	r2, 8009724 <_svfiprintf_r+0x5c>
 8009720:	2a25      	cmp	r2, #37	; 0x25
 8009722:	d1f9      	bne.n	8009718 <_svfiprintf_r+0x50>
 8009724:	ebba 0b04 	subs.w	fp, sl, r4
 8009728:	d00b      	beq.n	8009742 <_svfiprintf_r+0x7a>
 800972a:	465b      	mov	r3, fp
 800972c:	4622      	mov	r2, r4
 800972e:	4629      	mov	r1, r5
 8009730:	4638      	mov	r0, r7
 8009732:	f7ff ff6d 	bl	8009610 <__ssputs_r>
 8009736:	3001      	adds	r0, #1
 8009738:	f000 80aa 	beq.w	8009890 <_svfiprintf_r+0x1c8>
 800973c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800973e:	445a      	add	r2, fp
 8009740:	9209      	str	r2, [sp, #36]	; 0x24
 8009742:	f89a 3000 	ldrb.w	r3, [sl]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80a2 	beq.w	8009890 <_svfiprintf_r+0x1c8>
 800974c:	2300      	movs	r3, #0
 800974e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009756:	f10a 0a01 	add.w	sl, sl, #1
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	9307      	str	r3, [sp, #28]
 800975e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009762:	931a      	str	r3, [sp, #104]	; 0x68
 8009764:	4654      	mov	r4, sl
 8009766:	2205      	movs	r2, #5
 8009768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976c:	4851      	ldr	r0, [pc, #324]	; (80098b4 <_svfiprintf_r+0x1ec>)
 800976e:	f7f6 fd6f 	bl	8000250 <memchr>
 8009772:	9a04      	ldr	r2, [sp, #16]
 8009774:	b9d8      	cbnz	r0, 80097ae <_svfiprintf_r+0xe6>
 8009776:	06d0      	lsls	r0, r2, #27
 8009778:	bf44      	itt	mi
 800977a:	2320      	movmi	r3, #32
 800977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009780:	0711      	lsls	r1, r2, #28
 8009782:	bf44      	itt	mi
 8009784:	232b      	movmi	r3, #43	; 0x2b
 8009786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800978a:	f89a 3000 	ldrb.w	r3, [sl]
 800978e:	2b2a      	cmp	r3, #42	; 0x2a
 8009790:	d015      	beq.n	80097be <_svfiprintf_r+0xf6>
 8009792:	9a07      	ldr	r2, [sp, #28]
 8009794:	4654      	mov	r4, sl
 8009796:	2000      	movs	r0, #0
 8009798:	f04f 0c0a 	mov.w	ip, #10
 800979c:	4621      	mov	r1, r4
 800979e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a2:	3b30      	subs	r3, #48	; 0x30
 80097a4:	2b09      	cmp	r3, #9
 80097a6:	d94e      	bls.n	8009846 <_svfiprintf_r+0x17e>
 80097a8:	b1b0      	cbz	r0, 80097d8 <_svfiprintf_r+0x110>
 80097aa:	9207      	str	r2, [sp, #28]
 80097ac:	e014      	b.n	80097d8 <_svfiprintf_r+0x110>
 80097ae:	eba0 0308 	sub.w	r3, r0, r8
 80097b2:	fa09 f303 	lsl.w	r3, r9, r3
 80097b6:	4313      	orrs	r3, r2
 80097b8:	9304      	str	r3, [sp, #16]
 80097ba:	46a2      	mov	sl, r4
 80097bc:	e7d2      	b.n	8009764 <_svfiprintf_r+0x9c>
 80097be:	9b03      	ldr	r3, [sp, #12]
 80097c0:	1d19      	adds	r1, r3, #4
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	9103      	str	r1, [sp, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	bfbb      	ittet	lt
 80097ca:	425b      	neglt	r3, r3
 80097cc:	f042 0202 	orrlt.w	r2, r2, #2
 80097d0:	9307      	strge	r3, [sp, #28]
 80097d2:	9307      	strlt	r3, [sp, #28]
 80097d4:	bfb8      	it	lt
 80097d6:	9204      	strlt	r2, [sp, #16]
 80097d8:	7823      	ldrb	r3, [r4, #0]
 80097da:	2b2e      	cmp	r3, #46	; 0x2e
 80097dc:	d10c      	bne.n	80097f8 <_svfiprintf_r+0x130>
 80097de:	7863      	ldrb	r3, [r4, #1]
 80097e0:	2b2a      	cmp	r3, #42	; 0x2a
 80097e2:	d135      	bne.n	8009850 <_svfiprintf_r+0x188>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	1d1a      	adds	r2, r3, #4
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	9203      	str	r2, [sp, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bfb8      	it	lt
 80097f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80097f4:	3402      	adds	r4, #2
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098c4 <_svfiprintf_r+0x1fc>
 80097fc:	7821      	ldrb	r1, [r4, #0]
 80097fe:	2203      	movs	r2, #3
 8009800:	4650      	mov	r0, sl
 8009802:	f7f6 fd25 	bl	8000250 <memchr>
 8009806:	b140      	cbz	r0, 800981a <_svfiprintf_r+0x152>
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	eba0 000a 	sub.w	r0, r0, sl
 800980e:	fa03 f000 	lsl.w	r0, r3, r0
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	4303      	orrs	r3, r0
 8009816:	3401      	adds	r4, #1
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981e:	4826      	ldr	r0, [pc, #152]	; (80098b8 <_svfiprintf_r+0x1f0>)
 8009820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009824:	2206      	movs	r2, #6
 8009826:	f7f6 fd13 	bl	8000250 <memchr>
 800982a:	2800      	cmp	r0, #0
 800982c:	d038      	beq.n	80098a0 <_svfiprintf_r+0x1d8>
 800982e:	4b23      	ldr	r3, [pc, #140]	; (80098bc <_svfiprintf_r+0x1f4>)
 8009830:	bb1b      	cbnz	r3, 800987a <_svfiprintf_r+0x1b2>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	3307      	adds	r3, #7
 8009836:	f023 0307 	bic.w	r3, r3, #7
 800983a:	3308      	adds	r3, #8
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009840:	4433      	add	r3, r6
 8009842:	9309      	str	r3, [sp, #36]	; 0x24
 8009844:	e767      	b.n	8009716 <_svfiprintf_r+0x4e>
 8009846:	fb0c 3202 	mla	r2, ip, r2, r3
 800984a:	460c      	mov	r4, r1
 800984c:	2001      	movs	r0, #1
 800984e:	e7a5      	b.n	800979c <_svfiprintf_r+0xd4>
 8009850:	2300      	movs	r3, #0
 8009852:	3401      	adds	r4, #1
 8009854:	9305      	str	r3, [sp, #20]
 8009856:	4619      	mov	r1, r3
 8009858:	f04f 0c0a 	mov.w	ip, #10
 800985c:	4620      	mov	r0, r4
 800985e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009862:	3a30      	subs	r2, #48	; 0x30
 8009864:	2a09      	cmp	r2, #9
 8009866:	d903      	bls.n	8009870 <_svfiprintf_r+0x1a8>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0c5      	beq.n	80097f8 <_svfiprintf_r+0x130>
 800986c:	9105      	str	r1, [sp, #20]
 800986e:	e7c3      	b.n	80097f8 <_svfiprintf_r+0x130>
 8009870:	fb0c 2101 	mla	r1, ip, r1, r2
 8009874:	4604      	mov	r4, r0
 8009876:	2301      	movs	r3, #1
 8009878:	e7f0      	b.n	800985c <_svfiprintf_r+0x194>
 800987a:	ab03      	add	r3, sp, #12
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	462a      	mov	r2, r5
 8009880:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <_svfiprintf_r+0x1f8>)
 8009882:	a904      	add	r1, sp, #16
 8009884:	4638      	mov	r0, r7
 8009886:	f3af 8000 	nop.w
 800988a:	1c42      	adds	r2, r0, #1
 800988c:	4606      	mov	r6, r0
 800988e:	d1d6      	bne.n	800983e <_svfiprintf_r+0x176>
 8009890:	89ab      	ldrh	r3, [r5, #12]
 8009892:	065b      	lsls	r3, r3, #25
 8009894:	f53f af2c 	bmi.w	80096f0 <_svfiprintf_r+0x28>
 8009898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800989a:	b01d      	add	sp, #116	; 0x74
 800989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a0:	ab03      	add	r3, sp, #12
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	462a      	mov	r2, r5
 80098a6:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <_svfiprintf_r+0x1f8>)
 80098a8:	a904      	add	r1, sp, #16
 80098aa:	4638      	mov	r0, r7
 80098ac:	f000 f9d4 	bl	8009c58 <_printf_i>
 80098b0:	e7eb      	b.n	800988a <_svfiprintf_r+0x1c2>
 80098b2:	bf00      	nop
 80098b4:	0800a9f1 	.word	0x0800a9f1
 80098b8:	0800a9fb 	.word	0x0800a9fb
 80098bc:	00000000 	.word	0x00000000
 80098c0:	08009611 	.word	0x08009611
 80098c4:	0800a9f7 	.word	0x0800a9f7

080098c8 <__sfputc_r>:
 80098c8:	6893      	ldr	r3, [r2, #8]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	b410      	push	{r4}
 80098d0:	6093      	str	r3, [r2, #8]
 80098d2:	da08      	bge.n	80098e6 <__sfputc_r+0x1e>
 80098d4:	6994      	ldr	r4, [r2, #24]
 80098d6:	42a3      	cmp	r3, r4
 80098d8:	db01      	blt.n	80098de <__sfputc_r+0x16>
 80098da:	290a      	cmp	r1, #10
 80098dc:	d103      	bne.n	80098e6 <__sfputc_r+0x1e>
 80098de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098e2:	f000 baef 	b.w	8009ec4 <__swbuf_r>
 80098e6:	6813      	ldr	r3, [r2, #0]
 80098e8:	1c58      	adds	r0, r3, #1
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	7019      	strb	r1, [r3, #0]
 80098ee:	4608      	mov	r0, r1
 80098f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <__sfputs_r>:
 80098f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f8:	4606      	mov	r6, r0
 80098fa:	460f      	mov	r7, r1
 80098fc:	4614      	mov	r4, r2
 80098fe:	18d5      	adds	r5, r2, r3
 8009900:	42ac      	cmp	r4, r5
 8009902:	d101      	bne.n	8009908 <__sfputs_r+0x12>
 8009904:	2000      	movs	r0, #0
 8009906:	e007      	b.n	8009918 <__sfputs_r+0x22>
 8009908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990c:	463a      	mov	r2, r7
 800990e:	4630      	mov	r0, r6
 8009910:	f7ff ffda 	bl	80098c8 <__sfputc_r>
 8009914:	1c43      	adds	r3, r0, #1
 8009916:	d1f3      	bne.n	8009900 <__sfputs_r+0xa>
 8009918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800991c <_vfiprintf_r>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	460d      	mov	r5, r1
 8009922:	b09d      	sub	sp, #116	; 0x74
 8009924:	4614      	mov	r4, r2
 8009926:	4698      	mov	r8, r3
 8009928:	4606      	mov	r6, r0
 800992a:	b118      	cbz	r0, 8009934 <_vfiprintf_r+0x18>
 800992c:	6983      	ldr	r3, [r0, #24]
 800992e:	b90b      	cbnz	r3, 8009934 <_vfiprintf_r+0x18>
 8009930:	f000 fcaa 	bl	800a288 <__sinit>
 8009934:	4b89      	ldr	r3, [pc, #548]	; (8009b5c <_vfiprintf_r+0x240>)
 8009936:	429d      	cmp	r5, r3
 8009938:	d11b      	bne.n	8009972 <_vfiprintf_r+0x56>
 800993a:	6875      	ldr	r5, [r6, #4]
 800993c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800993e:	07d9      	lsls	r1, r3, #31
 8009940:	d405      	bmi.n	800994e <_vfiprintf_r+0x32>
 8009942:	89ab      	ldrh	r3, [r5, #12]
 8009944:	059a      	lsls	r2, r3, #22
 8009946:	d402      	bmi.n	800994e <_vfiprintf_r+0x32>
 8009948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800994a:	f000 fd3b 	bl	800a3c4 <__retarget_lock_acquire_recursive>
 800994e:	89ab      	ldrh	r3, [r5, #12]
 8009950:	071b      	lsls	r3, r3, #28
 8009952:	d501      	bpl.n	8009958 <_vfiprintf_r+0x3c>
 8009954:	692b      	ldr	r3, [r5, #16]
 8009956:	b9eb      	cbnz	r3, 8009994 <_vfiprintf_r+0x78>
 8009958:	4629      	mov	r1, r5
 800995a:	4630      	mov	r0, r6
 800995c:	f000 fb04 	bl	8009f68 <__swsetup_r>
 8009960:	b1c0      	cbz	r0, 8009994 <_vfiprintf_r+0x78>
 8009962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009964:	07dc      	lsls	r4, r3, #31
 8009966:	d50e      	bpl.n	8009986 <_vfiprintf_r+0x6a>
 8009968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800996c:	b01d      	add	sp, #116	; 0x74
 800996e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009972:	4b7b      	ldr	r3, [pc, #492]	; (8009b60 <_vfiprintf_r+0x244>)
 8009974:	429d      	cmp	r5, r3
 8009976:	d101      	bne.n	800997c <_vfiprintf_r+0x60>
 8009978:	68b5      	ldr	r5, [r6, #8]
 800997a:	e7df      	b.n	800993c <_vfiprintf_r+0x20>
 800997c:	4b79      	ldr	r3, [pc, #484]	; (8009b64 <_vfiprintf_r+0x248>)
 800997e:	429d      	cmp	r5, r3
 8009980:	bf08      	it	eq
 8009982:	68f5      	ldreq	r5, [r6, #12]
 8009984:	e7da      	b.n	800993c <_vfiprintf_r+0x20>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	0598      	lsls	r0, r3, #22
 800998a:	d4ed      	bmi.n	8009968 <_vfiprintf_r+0x4c>
 800998c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800998e:	f000 fd1a 	bl	800a3c6 <__retarget_lock_release_recursive>
 8009992:	e7e9      	b.n	8009968 <_vfiprintf_r+0x4c>
 8009994:	2300      	movs	r3, #0
 8009996:	9309      	str	r3, [sp, #36]	; 0x24
 8009998:	2320      	movs	r3, #32
 800999a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800999e:	f8cd 800c 	str.w	r8, [sp, #12]
 80099a2:	2330      	movs	r3, #48	; 0x30
 80099a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b68 <_vfiprintf_r+0x24c>
 80099a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ac:	f04f 0901 	mov.w	r9, #1
 80099b0:	4623      	mov	r3, r4
 80099b2:	469a      	mov	sl, r3
 80099b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099b8:	b10a      	cbz	r2, 80099be <_vfiprintf_r+0xa2>
 80099ba:	2a25      	cmp	r2, #37	; 0x25
 80099bc:	d1f9      	bne.n	80099b2 <_vfiprintf_r+0x96>
 80099be:	ebba 0b04 	subs.w	fp, sl, r4
 80099c2:	d00b      	beq.n	80099dc <_vfiprintf_r+0xc0>
 80099c4:	465b      	mov	r3, fp
 80099c6:	4622      	mov	r2, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ff93 	bl	80098f6 <__sfputs_r>
 80099d0:	3001      	adds	r0, #1
 80099d2:	f000 80aa 	beq.w	8009b2a <_vfiprintf_r+0x20e>
 80099d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099d8:	445a      	add	r2, fp
 80099da:	9209      	str	r2, [sp, #36]	; 0x24
 80099dc:	f89a 3000 	ldrb.w	r3, [sl]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 80a2 	beq.w	8009b2a <_vfiprintf_r+0x20e>
 80099e6:	2300      	movs	r3, #0
 80099e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f0:	f10a 0a01 	add.w	sl, sl, #1
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	9307      	str	r3, [sp, #28]
 80099f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099fc:	931a      	str	r3, [sp, #104]	; 0x68
 80099fe:	4654      	mov	r4, sl
 8009a00:	2205      	movs	r2, #5
 8009a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a06:	4858      	ldr	r0, [pc, #352]	; (8009b68 <_vfiprintf_r+0x24c>)
 8009a08:	f7f6 fc22 	bl	8000250 <memchr>
 8009a0c:	9a04      	ldr	r2, [sp, #16]
 8009a0e:	b9d8      	cbnz	r0, 8009a48 <_vfiprintf_r+0x12c>
 8009a10:	06d1      	lsls	r1, r2, #27
 8009a12:	bf44      	itt	mi
 8009a14:	2320      	movmi	r3, #32
 8009a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a1a:	0713      	lsls	r3, r2, #28
 8009a1c:	bf44      	itt	mi
 8009a1e:	232b      	movmi	r3, #43	; 0x2b
 8009a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a24:	f89a 3000 	ldrb.w	r3, [sl]
 8009a28:	2b2a      	cmp	r3, #42	; 0x2a
 8009a2a:	d015      	beq.n	8009a58 <_vfiprintf_r+0x13c>
 8009a2c:	9a07      	ldr	r2, [sp, #28]
 8009a2e:	4654      	mov	r4, sl
 8009a30:	2000      	movs	r0, #0
 8009a32:	f04f 0c0a 	mov.w	ip, #10
 8009a36:	4621      	mov	r1, r4
 8009a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a3c:	3b30      	subs	r3, #48	; 0x30
 8009a3e:	2b09      	cmp	r3, #9
 8009a40:	d94e      	bls.n	8009ae0 <_vfiprintf_r+0x1c4>
 8009a42:	b1b0      	cbz	r0, 8009a72 <_vfiprintf_r+0x156>
 8009a44:	9207      	str	r2, [sp, #28]
 8009a46:	e014      	b.n	8009a72 <_vfiprintf_r+0x156>
 8009a48:	eba0 0308 	sub.w	r3, r0, r8
 8009a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a50:	4313      	orrs	r3, r2
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	46a2      	mov	sl, r4
 8009a56:	e7d2      	b.n	80099fe <_vfiprintf_r+0xe2>
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	1d19      	adds	r1, r3, #4
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	9103      	str	r1, [sp, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	bfbb      	ittet	lt
 8009a64:	425b      	neglt	r3, r3
 8009a66:	f042 0202 	orrlt.w	r2, r2, #2
 8009a6a:	9307      	strge	r3, [sp, #28]
 8009a6c:	9307      	strlt	r3, [sp, #28]
 8009a6e:	bfb8      	it	lt
 8009a70:	9204      	strlt	r2, [sp, #16]
 8009a72:	7823      	ldrb	r3, [r4, #0]
 8009a74:	2b2e      	cmp	r3, #46	; 0x2e
 8009a76:	d10c      	bne.n	8009a92 <_vfiprintf_r+0x176>
 8009a78:	7863      	ldrb	r3, [r4, #1]
 8009a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a7c:	d135      	bne.n	8009aea <_vfiprintf_r+0x1ce>
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	1d1a      	adds	r2, r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	9203      	str	r2, [sp, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bfb8      	it	lt
 8009a8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a8e:	3402      	adds	r4, #2
 8009a90:	9305      	str	r3, [sp, #20]
 8009a92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b78 <_vfiprintf_r+0x25c>
 8009a96:	7821      	ldrb	r1, [r4, #0]
 8009a98:	2203      	movs	r2, #3
 8009a9a:	4650      	mov	r0, sl
 8009a9c:	f7f6 fbd8 	bl	8000250 <memchr>
 8009aa0:	b140      	cbz	r0, 8009ab4 <_vfiprintf_r+0x198>
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	eba0 000a 	sub.w	r0, r0, sl
 8009aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	4303      	orrs	r3, r0
 8009ab0:	3401      	adds	r4, #1
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab8:	482c      	ldr	r0, [pc, #176]	; (8009b6c <_vfiprintf_r+0x250>)
 8009aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009abe:	2206      	movs	r2, #6
 8009ac0:	f7f6 fbc6 	bl	8000250 <memchr>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d03f      	beq.n	8009b48 <_vfiprintf_r+0x22c>
 8009ac8:	4b29      	ldr	r3, [pc, #164]	; (8009b70 <_vfiprintf_r+0x254>)
 8009aca:	bb1b      	cbnz	r3, 8009b14 <_vfiprintf_r+0x1f8>
 8009acc:	9b03      	ldr	r3, [sp, #12]
 8009ace:	3307      	adds	r3, #7
 8009ad0:	f023 0307 	bic.w	r3, r3, #7
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	9303      	str	r3, [sp, #12]
 8009ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ada:	443b      	add	r3, r7
 8009adc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ade:	e767      	b.n	80099b0 <_vfiprintf_r+0x94>
 8009ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e7a5      	b.n	8009a36 <_vfiprintf_r+0x11a>
 8009aea:	2300      	movs	r3, #0
 8009aec:	3401      	adds	r4, #1
 8009aee:	9305      	str	r3, [sp, #20]
 8009af0:	4619      	mov	r1, r3
 8009af2:	f04f 0c0a 	mov.w	ip, #10
 8009af6:	4620      	mov	r0, r4
 8009af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009afc:	3a30      	subs	r2, #48	; 0x30
 8009afe:	2a09      	cmp	r2, #9
 8009b00:	d903      	bls.n	8009b0a <_vfiprintf_r+0x1ee>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0c5      	beq.n	8009a92 <_vfiprintf_r+0x176>
 8009b06:	9105      	str	r1, [sp, #20]
 8009b08:	e7c3      	b.n	8009a92 <_vfiprintf_r+0x176>
 8009b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b0e:	4604      	mov	r4, r0
 8009b10:	2301      	movs	r3, #1
 8009b12:	e7f0      	b.n	8009af6 <_vfiprintf_r+0x1da>
 8009b14:	ab03      	add	r3, sp, #12
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	462a      	mov	r2, r5
 8009b1a:	4b16      	ldr	r3, [pc, #88]	; (8009b74 <_vfiprintf_r+0x258>)
 8009b1c:	a904      	add	r1, sp, #16
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f3af 8000 	nop.w
 8009b24:	4607      	mov	r7, r0
 8009b26:	1c78      	adds	r0, r7, #1
 8009b28:	d1d6      	bne.n	8009ad8 <_vfiprintf_r+0x1bc>
 8009b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b2c:	07d9      	lsls	r1, r3, #31
 8009b2e:	d405      	bmi.n	8009b3c <_vfiprintf_r+0x220>
 8009b30:	89ab      	ldrh	r3, [r5, #12]
 8009b32:	059a      	lsls	r2, r3, #22
 8009b34:	d402      	bmi.n	8009b3c <_vfiprintf_r+0x220>
 8009b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b38:	f000 fc45 	bl	800a3c6 <__retarget_lock_release_recursive>
 8009b3c:	89ab      	ldrh	r3, [r5, #12]
 8009b3e:	065b      	lsls	r3, r3, #25
 8009b40:	f53f af12 	bmi.w	8009968 <_vfiprintf_r+0x4c>
 8009b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b46:	e711      	b.n	800996c <_vfiprintf_r+0x50>
 8009b48:	ab03      	add	r3, sp, #12
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <_vfiprintf_r+0x258>)
 8009b50:	a904      	add	r1, sp, #16
 8009b52:	4630      	mov	r0, r6
 8009b54:	f000 f880 	bl	8009c58 <_printf_i>
 8009b58:	e7e4      	b.n	8009b24 <_vfiprintf_r+0x208>
 8009b5a:	bf00      	nop
 8009b5c:	0800aa44 	.word	0x0800aa44
 8009b60:	0800aa64 	.word	0x0800aa64
 8009b64:	0800aa24 	.word	0x0800aa24
 8009b68:	0800a9f1 	.word	0x0800a9f1
 8009b6c:	0800a9fb 	.word	0x0800a9fb
 8009b70:	00000000 	.word	0x00000000
 8009b74:	080098f7 	.word	0x080098f7
 8009b78:	0800a9f7 	.word	0x0800a9f7

08009b7c <_printf_common>:
 8009b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b80:	4616      	mov	r6, r2
 8009b82:	4699      	mov	r9, r3
 8009b84:	688a      	ldr	r2, [r1, #8]
 8009b86:	690b      	ldr	r3, [r1, #16]
 8009b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	bfb8      	it	lt
 8009b90:	4613      	movlt	r3, r2
 8009b92:	6033      	str	r3, [r6, #0]
 8009b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b98:	4607      	mov	r7, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	b10a      	cbz	r2, 8009ba2 <_printf_common+0x26>
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	6033      	str	r3, [r6, #0]
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	0699      	lsls	r1, r3, #26
 8009ba6:	bf42      	ittt	mi
 8009ba8:	6833      	ldrmi	r3, [r6, #0]
 8009baa:	3302      	addmi	r3, #2
 8009bac:	6033      	strmi	r3, [r6, #0]
 8009bae:	6825      	ldr	r5, [r4, #0]
 8009bb0:	f015 0506 	ands.w	r5, r5, #6
 8009bb4:	d106      	bne.n	8009bc4 <_printf_common+0x48>
 8009bb6:	f104 0a19 	add.w	sl, r4, #25
 8009bba:	68e3      	ldr	r3, [r4, #12]
 8009bbc:	6832      	ldr	r2, [r6, #0]
 8009bbe:	1a9b      	subs	r3, r3, r2
 8009bc0:	42ab      	cmp	r3, r5
 8009bc2:	dc26      	bgt.n	8009c12 <_printf_common+0x96>
 8009bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bc8:	1e13      	subs	r3, r2, #0
 8009bca:	6822      	ldr	r2, [r4, #0]
 8009bcc:	bf18      	it	ne
 8009bce:	2301      	movne	r3, #1
 8009bd0:	0692      	lsls	r2, r2, #26
 8009bd2:	d42b      	bmi.n	8009c2c <_printf_common+0xb0>
 8009bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bd8:	4649      	mov	r1, r9
 8009bda:	4638      	mov	r0, r7
 8009bdc:	47c0      	blx	r8
 8009bde:	3001      	adds	r0, #1
 8009be0:	d01e      	beq.n	8009c20 <_printf_common+0xa4>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	68e5      	ldr	r5, [r4, #12]
 8009be6:	6832      	ldr	r2, [r6, #0]
 8009be8:	f003 0306 	and.w	r3, r3, #6
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	bf08      	it	eq
 8009bf0:	1aad      	subeq	r5, r5, r2
 8009bf2:	68a3      	ldr	r3, [r4, #8]
 8009bf4:	6922      	ldr	r2, [r4, #16]
 8009bf6:	bf0c      	ite	eq
 8009bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bfc:	2500      	movne	r5, #0
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	bfc4      	itt	gt
 8009c02:	1a9b      	subgt	r3, r3, r2
 8009c04:	18ed      	addgt	r5, r5, r3
 8009c06:	2600      	movs	r6, #0
 8009c08:	341a      	adds	r4, #26
 8009c0a:	42b5      	cmp	r5, r6
 8009c0c:	d11a      	bne.n	8009c44 <_printf_common+0xc8>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	e008      	b.n	8009c24 <_printf_common+0xa8>
 8009c12:	2301      	movs	r3, #1
 8009c14:	4652      	mov	r2, sl
 8009c16:	4649      	mov	r1, r9
 8009c18:	4638      	mov	r0, r7
 8009c1a:	47c0      	blx	r8
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d103      	bne.n	8009c28 <_printf_common+0xac>
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c28:	3501      	adds	r5, #1
 8009c2a:	e7c6      	b.n	8009bba <_printf_common+0x3e>
 8009c2c:	18e1      	adds	r1, r4, r3
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	2030      	movs	r0, #48	; 0x30
 8009c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c36:	4422      	add	r2, r4
 8009c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c40:	3302      	adds	r3, #2
 8009c42:	e7c7      	b.n	8009bd4 <_printf_common+0x58>
 8009c44:	2301      	movs	r3, #1
 8009c46:	4622      	mov	r2, r4
 8009c48:	4649      	mov	r1, r9
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	47c0      	blx	r8
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d0e6      	beq.n	8009c20 <_printf_common+0xa4>
 8009c52:	3601      	adds	r6, #1
 8009c54:	e7d9      	b.n	8009c0a <_printf_common+0x8e>
	...

08009c58 <_printf_i>:
 8009c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5c:	7e0f      	ldrb	r7, [r1, #24]
 8009c5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c60:	2f78      	cmp	r7, #120	; 0x78
 8009c62:	4691      	mov	r9, r2
 8009c64:	4680      	mov	r8, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	469a      	mov	sl, r3
 8009c6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c6e:	d807      	bhi.n	8009c80 <_printf_i+0x28>
 8009c70:	2f62      	cmp	r7, #98	; 0x62
 8009c72:	d80a      	bhi.n	8009c8a <_printf_i+0x32>
 8009c74:	2f00      	cmp	r7, #0
 8009c76:	f000 80d8 	beq.w	8009e2a <_printf_i+0x1d2>
 8009c7a:	2f58      	cmp	r7, #88	; 0x58
 8009c7c:	f000 80a3 	beq.w	8009dc6 <_printf_i+0x16e>
 8009c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c88:	e03a      	b.n	8009d00 <_printf_i+0xa8>
 8009c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c8e:	2b15      	cmp	r3, #21
 8009c90:	d8f6      	bhi.n	8009c80 <_printf_i+0x28>
 8009c92:	a101      	add	r1, pc, #4	; (adr r1, 8009c98 <_printf_i+0x40>)
 8009c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c98:	08009cf1 	.word	0x08009cf1
 8009c9c:	08009d05 	.word	0x08009d05
 8009ca0:	08009c81 	.word	0x08009c81
 8009ca4:	08009c81 	.word	0x08009c81
 8009ca8:	08009c81 	.word	0x08009c81
 8009cac:	08009c81 	.word	0x08009c81
 8009cb0:	08009d05 	.word	0x08009d05
 8009cb4:	08009c81 	.word	0x08009c81
 8009cb8:	08009c81 	.word	0x08009c81
 8009cbc:	08009c81 	.word	0x08009c81
 8009cc0:	08009c81 	.word	0x08009c81
 8009cc4:	08009e11 	.word	0x08009e11
 8009cc8:	08009d35 	.word	0x08009d35
 8009ccc:	08009df3 	.word	0x08009df3
 8009cd0:	08009c81 	.word	0x08009c81
 8009cd4:	08009c81 	.word	0x08009c81
 8009cd8:	08009e33 	.word	0x08009e33
 8009cdc:	08009c81 	.word	0x08009c81
 8009ce0:	08009d35 	.word	0x08009d35
 8009ce4:	08009c81 	.word	0x08009c81
 8009ce8:	08009c81 	.word	0x08009c81
 8009cec:	08009dfb 	.word	0x08009dfb
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	1d1a      	adds	r2, r3, #4
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	602a      	str	r2, [r5, #0]
 8009cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d00:	2301      	movs	r3, #1
 8009d02:	e0a3      	b.n	8009e4c <_printf_i+0x1f4>
 8009d04:	6820      	ldr	r0, [r4, #0]
 8009d06:	6829      	ldr	r1, [r5, #0]
 8009d08:	0606      	lsls	r6, r0, #24
 8009d0a:	f101 0304 	add.w	r3, r1, #4
 8009d0e:	d50a      	bpl.n	8009d26 <_printf_i+0xce>
 8009d10:	680e      	ldr	r6, [r1, #0]
 8009d12:	602b      	str	r3, [r5, #0]
 8009d14:	2e00      	cmp	r6, #0
 8009d16:	da03      	bge.n	8009d20 <_printf_i+0xc8>
 8009d18:	232d      	movs	r3, #45	; 0x2d
 8009d1a:	4276      	negs	r6, r6
 8009d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d20:	485e      	ldr	r0, [pc, #376]	; (8009e9c <_printf_i+0x244>)
 8009d22:	230a      	movs	r3, #10
 8009d24:	e019      	b.n	8009d5a <_printf_i+0x102>
 8009d26:	680e      	ldr	r6, [r1, #0]
 8009d28:	602b      	str	r3, [r5, #0]
 8009d2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d2e:	bf18      	it	ne
 8009d30:	b236      	sxthne	r6, r6
 8009d32:	e7ef      	b.n	8009d14 <_printf_i+0xbc>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	6820      	ldr	r0, [r4, #0]
 8009d38:	1d19      	adds	r1, r3, #4
 8009d3a:	6029      	str	r1, [r5, #0]
 8009d3c:	0601      	lsls	r1, r0, #24
 8009d3e:	d501      	bpl.n	8009d44 <_printf_i+0xec>
 8009d40:	681e      	ldr	r6, [r3, #0]
 8009d42:	e002      	b.n	8009d4a <_printf_i+0xf2>
 8009d44:	0646      	lsls	r6, r0, #25
 8009d46:	d5fb      	bpl.n	8009d40 <_printf_i+0xe8>
 8009d48:	881e      	ldrh	r6, [r3, #0]
 8009d4a:	4854      	ldr	r0, [pc, #336]	; (8009e9c <_printf_i+0x244>)
 8009d4c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d4e:	bf0c      	ite	eq
 8009d50:	2308      	moveq	r3, #8
 8009d52:	230a      	movne	r3, #10
 8009d54:	2100      	movs	r1, #0
 8009d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d5a:	6865      	ldr	r5, [r4, #4]
 8009d5c:	60a5      	str	r5, [r4, #8]
 8009d5e:	2d00      	cmp	r5, #0
 8009d60:	bfa2      	ittt	ge
 8009d62:	6821      	ldrge	r1, [r4, #0]
 8009d64:	f021 0104 	bicge.w	r1, r1, #4
 8009d68:	6021      	strge	r1, [r4, #0]
 8009d6a:	b90e      	cbnz	r6, 8009d70 <_printf_i+0x118>
 8009d6c:	2d00      	cmp	r5, #0
 8009d6e:	d04d      	beq.n	8009e0c <_printf_i+0x1b4>
 8009d70:	4615      	mov	r5, r2
 8009d72:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d76:	fb03 6711 	mls	r7, r3, r1, r6
 8009d7a:	5dc7      	ldrb	r7, [r0, r7]
 8009d7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d80:	4637      	mov	r7, r6
 8009d82:	42bb      	cmp	r3, r7
 8009d84:	460e      	mov	r6, r1
 8009d86:	d9f4      	bls.n	8009d72 <_printf_i+0x11a>
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d10b      	bne.n	8009da4 <_printf_i+0x14c>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	07de      	lsls	r6, r3, #31
 8009d90:	d508      	bpl.n	8009da4 <_printf_i+0x14c>
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	6861      	ldr	r1, [r4, #4]
 8009d96:	4299      	cmp	r1, r3
 8009d98:	bfde      	ittt	le
 8009d9a:	2330      	movle	r3, #48	; 0x30
 8009d9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009da0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009da4:	1b52      	subs	r2, r2, r5
 8009da6:	6122      	str	r2, [r4, #16]
 8009da8:	f8cd a000 	str.w	sl, [sp]
 8009dac:	464b      	mov	r3, r9
 8009dae:	aa03      	add	r2, sp, #12
 8009db0:	4621      	mov	r1, r4
 8009db2:	4640      	mov	r0, r8
 8009db4:	f7ff fee2 	bl	8009b7c <_printf_common>
 8009db8:	3001      	adds	r0, #1
 8009dba:	d14c      	bne.n	8009e56 <_printf_i+0x1fe>
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc0:	b004      	add	sp, #16
 8009dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc6:	4835      	ldr	r0, [pc, #212]	; (8009e9c <_printf_i+0x244>)
 8009dc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dcc:	6829      	ldr	r1, [r5, #0]
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dd4:	6029      	str	r1, [r5, #0]
 8009dd6:	061d      	lsls	r5, r3, #24
 8009dd8:	d514      	bpl.n	8009e04 <_printf_i+0x1ac>
 8009dda:	07df      	lsls	r7, r3, #31
 8009ddc:	bf44      	itt	mi
 8009dde:	f043 0320 	orrmi.w	r3, r3, #32
 8009de2:	6023      	strmi	r3, [r4, #0]
 8009de4:	b91e      	cbnz	r6, 8009dee <_printf_i+0x196>
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	f023 0320 	bic.w	r3, r3, #32
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	2310      	movs	r3, #16
 8009df0:	e7b0      	b.n	8009d54 <_printf_i+0xfc>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	f043 0320 	orr.w	r3, r3, #32
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	2378      	movs	r3, #120	; 0x78
 8009dfc:	4828      	ldr	r0, [pc, #160]	; (8009ea0 <_printf_i+0x248>)
 8009dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e02:	e7e3      	b.n	8009dcc <_printf_i+0x174>
 8009e04:	0659      	lsls	r1, r3, #25
 8009e06:	bf48      	it	mi
 8009e08:	b2b6      	uxthmi	r6, r6
 8009e0a:	e7e6      	b.n	8009dda <_printf_i+0x182>
 8009e0c:	4615      	mov	r5, r2
 8009e0e:	e7bb      	b.n	8009d88 <_printf_i+0x130>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	6826      	ldr	r6, [r4, #0]
 8009e14:	6961      	ldr	r1, [r4, #20]
 8009e16:	1d18      	adds	r0, r3, #4
 8009e18:	6028      	str	r0, [r5, #0]
 8009e1a:	0635      	lsls	r5, r6, #24
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	d501      	bpl.n	8009e24 <_printf_i+0x1cc>
 8009e20:	6019      	str	r1, [r3, #0]
 8009e22:	e002      	b.n	8009e2a <_printf_i+0x1d2>
 8009e24:	0670      	lsls	r0, r6, #25
 8009e26:	d5fb      	bpl.n	8009e20 <_printf_i+0x1c8>
 8009e28:	8019      	strh	r1, [r3, #0]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	6123      	str	r3, [r4, #16]
 8009e2e:	4615      	mov	r5, r2
 8009e30:	e7ba      	b.n	8009da8 <_printf_i+0x150>
 8009e32:	682b      	ldr	r3, [r5, #0]
 8009e34:	1d1a      	adds	r2, r3, #4
 8009e36:	602a      	str	r2, [r5, #0]
 8009e38:	681d      	ldr	r5, [r3, #0]
 8009e3a:	6862      	ldr	r2, [r4, #4]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f7f6 fa06 	bl	8000250 <memchr>
 8009e44:	b108      	cbz	r0, 8009e4a <_printf_i+0x1f2>
 8009e46:	1b40      	subs	r0, r0, r5
 8009e48:	6060      	str	r0, [r4, #4]
 8009e4a:	6863      	ldr	r3, [r4, #4]
 8009e4c:	6123      	str	r3, [r4, #16]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e54:	e7a8      	b.n	8009da8 <_printf_i+0x150>
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	462a      	mov	r2, r5
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	47d0      	blx	sl
 8009e60:	3001      	adds	r0, #1
 8009e62:	d0ab      	beq.n	8009dbc <_printf_i+0x164>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	079b      	lsls	r3, r3, #30
 8009e68:	d413      	bmi.n	8009e92 <_printf_i+0x23a>
 8009e6a:	68e0      	ldr	r0, [r4, #12]
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	4298      	cmp	r0, r3
 8009e70:	bfb8      	it	lt
 8009e72:	4618      	movlt	r0, r3
 8009e74:	e7a4      	b.n	8009dc0 <_printf_i+0x168>
 8009e76:	2301      	movs	r3, #1
 8009e78:	4632      	mov	r2, r6
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	47d0      	blx	sl
 8009e80:	3001      	adds	r0, #1
 8009e82:	d09b      	beq.n	8009dbc <_printf_i+0x164>
 8009e84:	3501      	adds	r5, #1
 8009e86:	68e3      	ldr	r3, [r4, #12]
 8009e88:	9903      	ldr	r1, [sp, #12]
 8009e8a:	1a5b      	subs	r3, r3, r1
 8009e8c:	42ab      	cmp	r3, r5
 8009e8e:	dcf2      	bgt.n	8009e76 <_printf_i+0x21e>
 8009e90:	e7eb      	b.n	8009e6a <_printf_i+0x212>
 8009e92:	2500      	movs	r5, #0
 8009e94:	f104 0619 	add.w	r6, r4, #25
 8009e98:	e7f5      	b.n	8009e86 <_printf_i+0x22e>
 8009e9a:	bf00      	nop
 8009e9c:	0800aa02 	.word	0x0800aa02
 8009ea0:	0800aa13 	.word	0x0800aa13

08009ea4 <_sbrk_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d06      	ldr	r5, [pc, #24]	; (8009ec0 <_sbrk_r+0x1c>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	602b      	str	r3, [r5, #0]
 8009eb0:	f7f7 fd5c 	bl	800196c <_sbrk>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_sbrk_r+0x1a>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_sbrk_r+0x1a>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	200004f4 	.word	0x200004f4

08009ec4 <__swbuf_r>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	460e      	mov	r6, r1
 8009ec8:	4614      	mov	r4, r2
 8009eca:	4605      	mov	r5, r0
 8009ecc:	b118      	cbz	r0, 8009ed6 <__swbuf_r+0x12>
 8009ece:	6983      	ldr	r3, [r0, #24]
 8009ed0:	b90b      	cbnz	r3, 8009ed6 <__swbuf_r+0x12>
 8009ed2:	f000 f9d9 	bl	800a288 <__sinit>
 8009ed6:	4b21      	ldr	r3, [pc, #132]	; (8009f5c <__swbuf_r+0x98>)
 8009ed8:	429c      	cmp	r4, r3
 8009eda:	d12b      	bne.n	8009f34 <__swbuf_r+0x70>
 8009edc:	686c      	ldr	r4, [r5, #4]
 8009ede:	69a3      	ldr	r3, [r4, #24]
 8009ee0:	60a3      	str	r3, [r4, #8]
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	071a      	lsls	r2, r3, #28
 8009ee6:	d52f      	bpl.n	8009f48 <__swbuf_r+0x84>
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	b36b      	cbz	r3, 8009f48 <__swbuf_r+0x84>
 8009eec:	6923      	ldr	r3, [r4, #16]
 8009eee:	6820      	ldr	r0, [r4, #0]
 8009ef0:	1ac0      	subs	r0, r0, r3
 8009ef2:	6963      	ldr	r3, [r4, #20]
 8009ef4:	b2f6      	uxtb	r6, r6
 8009ef6:	4283      	cmp	r3, r0
 8009ef8:	4637      	mov	r7, r6
 8009efa:	dc04      	bgt.n	8009f06 <__swbuf_r+0x42>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 f92e 	bl	800a160 <_fflush_r>
 8009f04:	bb30      	cbnz	r0, 8009f54 <__swbuf_r+0x90>
 8009f06:	68a3      	ldr	r3, [r4, #8]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	60a3      	str	r3, [r4, #8]
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	6022      	str	r2, [r4, #0]
 8009f12:	701e      	strb	r6, [r3, #0]
 8009f14:	6963      	ldr	r3, [r4, #20]
 8009f16:	3001      	adds	r0, #1
 8009f18:	4283      	cmp	r3, r0
 8009f1a:	d004      	beq.n	8009f26 <__swbuf_r+0x62>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	07db      	lsls	r3, r3, #31
 8009f20:	d506      	bpl.n	8009f30 <__swbuf_r+0x6c>
 8009f22:	2e0a      	cmp	r6, #10
 8009f24:	d104      	bne.n	8009f30 <__swbuf_r+0x6c>
 8009f26:	4621      	mov	r1, r4
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f000 f919 	bl	800a160 <_fflush_r>
 8009f2e:	b988      	cbnz	r0, 8009f54 <__swbuf_r+0x90>
 8009f30:	4638      	mov	r0, r7
 8009f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f34:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <__swbuf_r+0x9c>)
 8009f36:	429c      	cmp	r4, r3
 8009f38:	d101      	bne.n	8009f3e <__swbuf_r+0x7a>
 8009f3a:	68ac      	ldr	r4, [r5, #8]
 8009f3c:	e7cf      	b.n	8009ede <__swbuf_r+0x1a>
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <__swbuf_r+0xa0>)
 8009f40:	429c      	cmp	r4, r3
 8009f42:	bf08      	it	eq
 8009f44:	68ec      	ldreq	r4, [r5, #12]
 8009f46:	e7ca      	b.n	8009ede <__swbuf_r+0x1a>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 f80c 	bl	8009f68 <__swsetup_r>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d0cb      	beq.n	8009eec <__swbuf_r+0x28>
 8009f54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f58:	e7ea      	b.n	8009f30 <__swbuf_r+0x6c>
 8009f5a:	bf00      	nop
 8009f5c:	0800aa44 	.word	0x0800aa44
 8009f60:	0800aa64 	.word	0x0800aa64
 8009f64:	0800aa24 	.word	0x0800aa24

08009f68 <__swsetup_r>:
 8009f68:	4b32      	ldr	r3, [pc, #200]	; (800a034 <__swsetup_r+0xcc>)
 8009f6a:	b570      	push	{r4, r5, r6, lr}
 8009f6c:	681d      	ldr	r5, [r3, #0]
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	b125      	cbz	r5, 8009f7e <__swsetup_r+0x16>
 8009f74:	69ab      	ldr	r3, [r5, #24]
 8009f76:	b913      	cbnz	r3, 8009f7e <__swsetup_r+0x16>
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 f985 	bl	800a288 <__sinit>
 8009f7e:	4b2e      	ldr	r3, [pc, #184]	; (800a038 <__swsetup_r+0xd0>)
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d10f      	bne.n	8009fa4 <__swsetup_r+0x3c>
 8009f84:	686c      	ldr	r4, [r5, #4]
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8c:	0719      	lsls	r1, r3, #28
 8009f8e:	d42c      	bmi.n	8009fea <__swsetup_r+0x82>
 8009f90:	06dd      	lsls	r5, r3, #27
 8009f92:	d411      	bmi.n	8009fb8 <__swsetup_r+0x50>
 8009f94:	2309      	movs	r3, #9
 8009f96:	6033      	str	r3, [r6, #0]
 8009f98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa2:	e03e      	b.n	800a022 <__swsetup_r+0xba>
 8009fa4:	4b25      	ldr	r3, [pc, #148]	; (800a03c <__swsetup_r+0xd4>)
 8009fa6:	429c      	cmp	r4, r3
 8009fa8:	d101      	bne.n	8009fae <__swsetup_r+0x46>
 8009faa:	68ac      	ldr	r4, [r5, #8]
 8009fac:	e7eb      	b.n	8009f86 <__swsetup_r+0x1e>
 8009fae:	4b24      	ldr	r3, [pc, #144]	; (800a040 <__swsetup_r+0xd8>)
 8009fb0:	429c      	cmp	r4, r3
 8009fb2:	bf08      	it	eq
 8009fb4:	68ec      	ldreq	r4, [r5, #12]
 8009fb6:	e7e6      	b.n	8009f86 <__swsetup_r+0x1e>
 8009fb8:	0758      	lsls	r0, r3, #29
 8009fba:	d512      	bpl.n	8009fe2 <__swsetup_r+0x7a>
 8009fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fbe:	b141      	cbz	r1, 8009fd2 <__swsetup_r+0x6a>
 8009fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc4:	4299      	cmp	r1, r3
 8009fc6:	d002      	beq.n	8009fce <__swsetup_r+0x66>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff fa41 	bl	8009450 <_free_r>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6063      	str	r3, [r4, #4]
 8009fde:	6923      	ldr	r3, [r4, #16]
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f043 0308 	orr.w	r3, r3, #8
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	b94b      	cbnz	r3, 800a002 <__swsetup_r+0x9a>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff8:	d003      	beq.n	800a002 <__swsetup_r+0x9a>
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f000 fa09 	bl	800a414 <__smakebuf_r>
 800a002:	89a0      	ldrh	r0, [r4, #12]
 800a004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a008:	f010 0301 	ands.w	r3, r0, #1
 800a00c:	d00a      	beq.n	800a024 <__swsetup_r+0xbc>
 800a00e:	2300      	movs	r3, #0
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	6963      	ldr	r3, [r4, #20]
 800a014:	425b      	negs	r3, r3
 800a016:	61a3      	str	r3, [r4, #24]
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	b943      	cbnz	r3, 800a02e <__swsetup_r+0xc6>
 800a01c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a020:	d1ba      	bne.n	8009f98 <__swsetup_r+0x30>
 800a022:	bd70      	pop	{r4, r5, r6, pc}
 800a024:	0781      	lsls	r1, r0, #30
 800a026:	bf58      	it	pl
 800a028:	6963      	ldrpl	r3, [r4, #20]
 800a02a:	60a3      	str	r3, [r4, #8]
 800a02c:	e7f4      	b.n	800a018 <__swsetup_r+0xb0>
 800a02e:	2000      	movs	r0, #0
 800a030:	e7f7      	b.n	800a022 <__swsetup_r+0xba>
 800a032:	bf00      	nop
 800a034:	200001d0 	.word	0x200001d0
 800a038:	0800aa44 	.word	0x0800aa44
 800a03c:	0800aa64 	.word	0x0800aa64
 800a040:	0800aa24 	.word	0x0800aa24

0800a044 <abort>:
 800a044:	b508      	push	{r3, lr}
 800a046:	2006      	movs	r0, #6
 800a048:	f000 fab0 	bl	800a5ac <raise>
 800a04c:	2001      	movs	r0, #1
 800a04e:	f7f7 fc15 	bl	800187c <_exit>
	...

0800a054 <__sflush_r>:
 800a054:	898a      	ldrh	r2, [r1, #12]
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	4605      	mov	r5, r0
 800a05c:	0710      	lsls	r0, r2, #28
 800a05e:	460c      	mov	r4, r1
 800a060:	d458      	bmi.n	800a114 <__sflush_r+0xc0>
 800a062:	684b      	ldr	r3, [r1, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dc05      	bgt.n	800a074 <__sflush_r+0x20>
 800a068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dc02      	bgt.n	800a074 <__sflush_r+0x20>
 800a06e:	2000      	movs	r0, #0
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a076:	2e00      	cmp	r6, #0
 800a078:	d0f9      	beq.n	800a06e <__sflush_r+0x1a>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a080:	682f      	ldr	r7, [r5, #0]
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	d032      	beq.n	800a0ec <__sflush_r+0x98>
 800a086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	075a      	lsls	r2, r3, #29
 800a08c:	d505      	bpl.n	800a09a <__sflush_r+0x46>
 800a08e:	6863      	ldr	r3, [r4, #4]
 800a090:	1ac0      	subs	r0, r0, r3
 800a092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a094:	b10b      	cbz	r3, 800a09a <__sflush_r+0x46>
 800a096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a098:	1ac0      	subs	r0, r0, r3
 800a09a:	2300      	movs	r3, #0
 800a09c:	4602      	mov	r2, r0
 800a09e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0a0:	6a21      	ldr	r1, [r4, #32]
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b0      	blx	r6
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	d106      	bne.n	800a0ba <__sflush_r+0x66>
 800a0ac:	6829      	ldr	r1, [r5, #0]
 800a0ae:	291d      	cmp	r1, #29
 800a0b0:	d82c      	bhi.n	800a10c <__sflush_r+0xb8>
 800a0b2:	4a2a      	ldr	r2, [pc, #168]	; (800a15c <__sflush_r+0x108>)
 800a0b4:	40ca      	lsrs	r2, r1
 800a0b6:	07d6      	lsls	r6, r2, #31
 800a0b8:	d528      	bpl.n	800a10c <__sflush_r+0xb8>
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	6062      	str	r2, [r4, #4]
 800a0be:	04d9      	lsls	r1, r3, #19
 800a0c0:	6922      	ldr	r2, [r4, #16]
 800a0c2:	6022      	str	r2, [r4, #0]
 800a0c4:	d504      	bpl.n	800a0d0 <__sflush_r+0x7c>
 800a0c6:	1c42      	adds	r2, r0, #1
 800a0c8:	d101      	bne.n	800a0ce <__sflush_r+0x7a>
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	b903      	cbnz	r3, 800a0d0 <__sflush_r+0x7c>
 800a0ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a0d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d2:	602f      	str	r7, [r5, #0]
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	d0ca      	beq.n	800a06e <__sflush_r+0x1a>
 800a0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0dc:	4299      	cmp	r1, r3
 800a0de:	d002      	beq.n	800a0e6 <__sflush_r+0x92>
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f7ff f9b5 	bl	8009450 <_free_r>
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0ea:	e7c1      	b.n	800a070 <__sflush_r+0x1c>
 800a0ec:	6a21      	ldr	r1, [r4, #32]
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	1c41      	adds	r1, r0, #1
 800a0f6:	d1c7      	bne.n	800a088 <__sflush_r+0x34>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0c4      	beq.n	800a088 <__sflush_r+0x34>
 800a0fe:	2b1d      	cmp	r3, #29
 800a100:	d001      	beq.n	800a106 <__sflush_r+0xb2>
 800a102:	2b16      	cmp	r3, #22
 800a104:	d101      	bne.n	800a10a <__sflush_r+0xb6>
 800a106:	602f      	str	r7, [r5, #0]
 800a108:	e7b1      	b.n	800a06e <__sflush_r+0x1a>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a110:	81a3      	strh	r3, [r4, #12]
 800a112:	e7ad      	b.n	800a070 <__sflush_r+0x1c>
 800a114:	690f      	ldr	r7, [r1, #16]
 800a116:	2f00      	cmp	r7, #0
 800a118:	d0a9      	beq.n	800a06e <__sflush_r+0x1a>
 800a11a:	0793      	lsls	r3, r2, #30
 800a11c:	680e      	ldr	r6, [r1, #0]
 800a11e:	bf08      	it	eq
 800a120:	694b      	ldreq	r3, [r1, #20]
 800a122:	600f      	str	r7, [r1, #0]
 800a124:	bf18      	it	ne
 800a126:	2300      	movne	r3, #0
 800a128:	eba6 0807 	sub.w	r8, r6, r7
 800a12c:	608b      	str	r3, [r1, #8]
 800a12e:	f1b8 0f00 	cmp.w	r8, #0
 800a132:	dd9c      	ble.n	800a06e <__sflush_r+0x1a>
 800a134:	6a21      	ldr	r1, [r4, #32]
 800a136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a138:	4643      	mov	r3, r8
 800a13a:	463a      	mov	r2, r7
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b0      	blx	r6
 800a140:	2800      	cmp	r0, #0
 800a142:	dc06      	bgt.n	800a152 <__sflush_r+0xfe>
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a150:	e78e      	b.n	800a070 <__sflush_r+0x1c>
 800a152:	4407      	add	r7, r0
 800a154:	eba8 0800 	sub.w	r8, r8, r0
 800a158:	e7e9      	b.n	800a12e <__sflush_r+0xda>
 800a15a:	bf00      	nop
 800a15c:	20400001 	.word	0x20400001

0800a160 <_fflush_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	4605      	mov	r5, r0
 800a166:	460c      	mov	r4, r1
 800a168:	b913      	cbnz	r3, 800a170 <_fflush_r+0x10>
 800a16a:	2500      	movs	r5, #0
 800a16c:	4628      	mov	r0, r5
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	b118      	cbz	r0, 800a17a <_fflush_r+0x1a>
 800a172:	6983      	ldr	r3, [r0, #24]
 800a174:	b90b      	cbnz	r3, 800a17a <_fflush_r+0x1a>
 800a176:	f000 f887 	bl	800a288 <__sinit>
 800a17a:	4b14      	ldr	r3, [pc, #80]	; (800a1cc <_fflush_r+0x6c>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	d11b      	bne.n	800a1b8 <_fflush_r+0x58>
 800a180:	686c      	ldr	r4, [r5, #4]
 800a182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0ef      	beq.n	800a16a <_fflush_r+0xa>
 800a18a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a18c:	07d0      	lsls	r0, r2, #31
 800a18e:	d404      	bmi.n	800a19a <_fflush_r+0x3a>
 800a190:	0599      	lsls	r1, r3, #22
 800a192:	d402      	bmi.n	800a19a <_fflush_r+0x3a>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f000 f915 	bl	800a3c4 <__retarget_lock_acquire_recursive>
 800a19a:	4628      	mov	r0, r5
 800a19c:	4621      	mov	r1, r4
 800a19e:	f7ff ff59 	bl	800a054 <__sflush_r>
 800a1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a4:	07da      	lsls	r2, r3, #31
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	d4e0      	bmi.n	800a16c <_fflush_r+0xc>
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	059b      	lsls	r3, r3, #22
 800a1ae:	d4dd      	bmi.n	800a16c <_fflush_r+0xc>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1b2:	f000 f908 	bl	800a3c6 <__retarget_lock_release_recursive>
 800a1b6:	e7d9      	b.n	800a16c <_fflush_r+0xc>
 800a1b8:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <_fflush_r+0x70>)
 800a1ba:	429c      	cmp	r4, r3
 800a1bc:	d101      	bne.n	800a1c2 <_fflush_r+0x62>
 800a1be:	68ac      	ldr	r4, [r5, #8]
 800a1c0:	e7df      	b.n	800a182 <_fflush_r+0x22>
 800a1c2:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <_fflush_r+0x74>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	bf08      	it	eq
 800a1c8:	68ec      	ldreq	r4, [r5, #12]
 800a1ca:	e7da      	b.n	800a182 <_fflush_r+0x22>
 800a1cc:	0800aa44 	.word	0x0800aa44
 800a1d0:	0800aa64 	.word	0x0800aa64
 800a1d4:	0800aa24 	.word	0x0800aa24

0800a1d8 <std>:
 800a1d8:	2300      	movs	r3, #0
 800a1da:	b510      	push	{r4, lr}
 800a1dc:	4604      	mov	r4, r0
 800a1de:	e9c0 3300 	strd	r3, r3, [r0]
 800a1e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1e6:	6083      	str	r3, [r0, #8]
 800a1e8:	8181      	strh	r1, [r0, #12]
 800a1ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a1ec:	81c2      	strh	r2, [r0, #14]
 800a1ee:	6183      	str	r3, [r0, #24]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	2208      	movs	r2, #8
 800a1f4:	305c      	adds	r0, #92	; 0x5c
 800a1f6:	f7fe ffcf 	bl	8009198 <memset>
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <std+0x38>)
 800a1fc:	6263      	str	r3, [r4, #36]	; 0x24
 800a1fe:	4b05      	ldr	r3, [pc, #20]	; (800a214 <std+0x3c>)
 800a200:	62a3      	str	r3, [r4, #40]	; 0x28
 800a202:	4b05      	ldr	r3, [pc, #20]	; (800a218 <std+0x40>)
 800a204:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a206:	4b05      	ldr	r3, [pc, #20]	; (800a21c <std+0x44>)
 800a208:	6224      	str	r4, [r4, #32]
 800a20a:	6323      	str	r3, [r4, #48]	; 0x30
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	bf00      	nop
 800a210:	0800a5e5 	.word	0x0800a5e5
 800a214:	0800a607 	.word	0x0800a607
 800a218:	0800a63f 	.word	0x0800a63f
 800a21c:	0800a663 	.word	0x0800a663

0800a220 <_cleanup_r>:
 800a220:	4901      	ldr	r1, [pc, #4]	; (800a228 <_cleanup_r+0x8>)
 800a222:	f000 b8af 	b.w	800a384 <_fwalk_reent>
 800a226:	bf00      	nop
 800a228:	0800a161 	.word	0x0800a161

0800a22c <__sfmoreglue>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	2268      	movs	r2, #104	; 0x68
 800a230:	1e4d      	subs	r5, r1, #1
 800a232:	4355      	muls	r5, r2
 800a234:	460e      	mov	r6, r1
 800a236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a23a:	f7ff f975 	bl	8009528 <_malloc_r>
 800a23e:	4604      	mov	r4, r0
 800a240:	b140      	cbz	r0, 800a254 <__sfmoreglue+0x28>
 800a242:	2100      	movs	r1, #0
 800a244:	e9c0 1600 	strd	r1, r6, [r0]
 800a248:	300c      	adds	r0, #12
 800a24a:	60a0      	str	r0, [r4, #8]
 800a24c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a250:	f7fe ffa2 	bl	8009198 <memset>
 800a254:	4620      	mov	r0, r4
 800a256:	bd70      	pop	{r4, r5, r6, pc}

0800a258 <__sfp_lock_acquire>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__sfp_lock_acquire+0x8>)
 800a25a:	f000 b8b3 	b.w	800a3c4 <__retarget_lock_acquire_recursive>
 800a25e:	bf00      	nop
 800a260:	200004f1 	.word	0x200004f1

0800a264 <__sfp_lock_release>:
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <__sfp_lock_release+0x8>)
 800a266:	f000 b8ae 	b.w	800a3c6 <__retarget_lock_release_recursive>
 800a26a:	bf00      	nop
 800a26c:	200004f1 	.word	0x200004f1

0800a270 <__sinit_lock_acquire>:
 800a270:	4801      	ldr	r0, [pc, #4]	; (800a278 <__sinit_lock_acquire+0x8>)
 800a272:	f000 b8a7 	b.w	800a3c4 <__retarget_lock_acquire_recursive>
 800a276:	bf00      	nop
 800a278:	200004f2 	.word	0x200004f2

0800a27c <__sinit_lock_release>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__sinit_lock_release+0x8>)
 800a27e:	f000 b8a2 	b.w	800a3c6 <__retarget_lock_release_recursive>
 800a282:	bf00      	nop
 800a284:	200004f2 	.word	0x200004f2

0800a288 <__sinit>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	4604      	mov	r4, r0
 800a28c:	f7ff fff0 	bl	800a270 <__sinit_lock_acquire>
 800a290:	69a3      	ldr	r3, [r4, #24]
 800a292:	b11b      	cbz	r3, 800a29c <__sinit+0x14>
 800a294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a298:	f7ff bff0 	b.w	800a27c <__sinit_lock_release>
 800a29c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a2a2:	4b13      	ldr	r3, [pc, #76]	; (800a2f0 <__sinit+0x68>)
 800a2a4:	4a13      	ldr	r2, [pc, #76]	; (800a2f4 <__sinit+0x6c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	bf04      	itt	eq
 800a2ae:	2301      	moveq	r3, #1
 800a2b0:	61a3      	streq	r3, [r4, #24]
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 f820 	bl	800a2f8 <__sfp>
 800a2b8:	6060      	str	r0, [r4, #4]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 f81c 	bl	800a2f8 <__sfp>
 800a2c0:	60a0      	str	r0, [r4, #8]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 f818 	bl	800a2f8 <__sfp>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	60e0      	str	r0, [r4, #12]
 800a2cc:	2104      	movs	r1, #4
 800a2ce:	6860      	ldr	r0, [r4, #4]
 800a2d0:	f7ff ff82 	bl	800a1d8 <std>
 800a2d4:	68a0      	ldr	r0, [r4, #8]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	2109      	movs	r1, #9
 800a2da:	f7ff ff7d 	bl	800a1d8 <std>
 800a2de:	68e0      	ldr	r0, [r4, #12]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	2112      	movs	r1, #18
 800a2e4:	f7ff ff78 	bl	800a1d8 <std>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	61a3      	str	r3, [r4, #24]
 800a2ec:	e7d2      	b.n	800a294 <__sinit+0xc>
 800a2ee:	bf00      	nop
 800a2f0:	0800a83c 	.word	0x0800a83c
 800a2f4:	0800a221 	.word	0x0800a221

0800a2f8 <__sfp>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	4607      	mov	r7, r0
 800a2fc:	f7ff ffac 	bl	800a258 <__sfp_lock_acquire>
 800a300:	4b1e      	ldr	r3, [pc, #120]	; (800a37c <__sfp+0x84>)
 800a302:	681e      	ldr	r6, [r3, #0]
 800a304:	69b3      	ldr	r3, [r6, #24]
 800a306:	b913      	cbnz	r3, 800a30e <__sfp+0x16>
 800a308:	4630      	mov	r0, r6
 800a30a:	f7ff ffbd 	bl	800a288 <__sinit>
 800a30e:	3648      	adds	r6, #72	; 0x48
 800a310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a314:	3b01      	subs	r3, #1
 800a316:	d503      	bpl.n	800a320 <__sfp+0x28>
 800a318:	6833      	ldr	r3, [r6, #0]
 800a31a:	b30b      	cbz	r3, 800a360 <__sfp+0x68>
 800a31c:	6836      	ldr	r6, [r6, #0]
 800a31e:	e7f7      	b.n	800a310 <__sfp+0x18>
 800a320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a324:	b9d5      	cbnz	r5, 800a35c <__sfp+0x64>
 800a326:	4b16      	ldr	r3, [pc, #88]	; (800a380 <__sfp+0x88>)
 800a328:	60e3      	str	r3, [r4, #12]
 800a32a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a32e:	6665      	str	r5, [r4, #100]	; 0x64
 800a330:	f000 f847 	bl	800a3c2 <__retarget_lock_init_recursive>
 800a334:	f7ff ff96 	bl	800a264 <__sfp_lock_release>
 800a338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a33c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a340:	6025      	str	r5, [r4, #0]
 800a342:	61a5      	str	r5, [r4, #24]
 800a344:	2208      	movs	r2, #8
 800a346:	4629      	mov	r1, r5
 800a348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a34c:	f7fe ff24 	bl	8009198 <memset>
 800a350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a358:	4620      	mov	r0, r4
 800a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a35c:	3468      	adds	r4, #104	; 0x68
 800a35e:	e7d9      	b.n	800a314 <__sfp+0x1c>
 800a360:	2104      	movs	r1, #4
 800a362:	4638      	mov	r0, r7
 800a364:	f7ff ff62 	bl	800a22c <__sfmoreglue>
 800a368:	4604      	mov	r4, r0
 800a36a:	6030      	str	r0, [r6, #0]
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d1d5      	bne.n	800a31c <__sfp+0x24>
 800a370:	f7ff ff78 	bl	800a264 <__sfp_lock_release>
 800a374:	230c      	movs	r3, #12
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	e7ee      	b.n	800a358 <__sfp+0x60>
 800a37a:	bf00      	nop
 800a37c:	0800a83c 	.word	0x0800a83c
 800a380:	ffff0001 	.word	0xffff0001

0800a384 <_fwalk_reent>:
 800a384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a388:	4606      	mov	r6, r0
 800a38a:	4688      	mov	r8, r1
 800a38c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a390:	2700      	movs	r7, #0
 800a392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a396:	f1b9 0901 	subs.w	r9, r9, #1
 800a39a:	d505      	bpl.n	800a3a8 <_fwalk_reent+0x24>
 800a39c:	6824      	ldr	r4, [r4, #0]
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	d1f7      	bne.n	800a392 <_fwalk_reent+0xe>
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a8:	89ab      	ldrh	r3, [r5, #12]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d907      	bls.n	800a3be <_fwalk_reent+0x3a>
 800a3ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	d003      	beq.n	800a3be <_fwalk_reent+0x3a>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	47c0      	blx	r8
 800a3bc:	4307      	orrs	r7, r0
 800a3be:	3568      	adds	r5, #104	; 0x68
 800a3c0:	e7e9      	b.n	800a396 <_fwalk_reent+0x12>

0800a3c2 <__retarget_lock_init_recursive>:
 800a3c2:	4770      	bx	lr

0800a3c4 <__retarget_lock_acquire_recursive>:
 800a3c4:	4770      	bx	lr

0800a3c6 <__retarget_lock_release_recursive>:
 800a3c6:	4770      	bx	lr

0800a3c8 <__swhatbuf_r>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	460e      	mov	r6, r1
 800a3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d0:	2900      	cmp	r1, #0
 800a3d2:	b096      	sub	sp, #88	; 0x58
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	461d      	mov	r5, r3
 800a3d8:	da08      	bge.n	800a3ec <__swhatbuf_r+0x24>
 800a3da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	602a      	str	r2, [r5, #0]
 800a3e2:	061a      	lsls	r2, r3, #24
 800a3e4:	d410      	bmi.n	800a408 <__swhatbuf_r+0x40>
 800a3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ea:	e00e      	b.n	800a40a <__swhatbuf_r+0x42>
 800a3ec:	466a      	mov	r2, sp
 800a3ee:	f000 f95f 	bl	800a6b0 <_fstat_r>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	dbf1      	blt.n	800a3da <__swhatbuf_r+0x12>
 800a3f6:	9a01      	ldr	r2, [sp, #4]
 800a3f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a400:	425a      	negs	r2, r3
 800a402:	415a      	adcs	r2, r3
 800a404:	602a      	str	r2, [r5, #0]
 800a406:	e7ee      	b.n	800a3e6 <__swhatbuf_r+0x1e>
 800a408:	2340      	movs	r3, #64	; 0x40
 800a40a:	2000      	movs	r0, #0
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	b016      	add	sp, #88	; 0x58
 800a410:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a414 <__smakebuf_r>:
 800a414:	898b      	ldrh	r3, [r1, #12]
 800a416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a418:	079d      	lsls	r5, r3, #30
 800a41a:	4606      	mov	r6, r0
 800a41c:	460c      	mov	r4, r1
 800a41e:	d507      	bpl.n	800a430 <__smakebuf_r+0x1c>
 800a420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	2301      	movs	r3, #1
 800a42a:	6163      	str	r3, [r4, #20]
 800a42c:	b002      	add	sp, #8
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	ab01      	add	r3, sp, #4
 800a432:	466a      	mov	r2, sp
 800a434:	f7ff ffc8 	bl	800a3c8 <__swhatbuf_r>
 800a438:	9900      	ldr	r1, [sp, #0]
 800a43a:	4605      	mov	r5, r0
 800a43c:	4630      	mov	r0, r6
 800a43e:	f7ff f873 	bl	8009528 <_malloc_r>
 800a442:	b948      	cbnz	r0, 800a458 <__smakebuf_r+0x44>
 800a444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a448:	059a      	lsls	r2, r3, #22
 800a44a:	d4ef      	bmi.n	800a42c <__smakebuf_r+0x18>
 800a44c:	f023 0303 	bic.w	r3, r3, #3
 800a450:	f043 0302 	orr.w	r3, r3, #2
 800a454:	81a3      	strh	r3, [r4, #12]
 800a456:	e7e3      	b.n	800a420 <__smakebuf_r+0xc>
 800a458:	4b0d      	ldr	r3, [pc, #52]	; (800a490 <__smakebuf_r+0x7c>)
 800a45a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	6020      	str	r0, [r4, #0]
 800a460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	9b00      	ldr	r3, [sp, #0]
 800a468:	6163      	str	r3, [r4, #20]
 800a46a:	9b01      	ldr	r3, [sp, #4]
 800a46c:	6120      	str	r0, [r4, #16]
 800a46e:	b15b      	cbz	r3, 800a488 <__smakebuf_r+0x74>
 800a470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a474:	4630      	mov	r0, r6
 800a476:	f000 f92d 	bl	800a6d4 <_isatty_r>
 800a47a:	b128      	cbz	r0, 800a488 <__smakebuf_r+0x74>
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	f023 0303 	bic.w	r3, r3, #3
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	89a0      	ldrh	r0, [r4, #12]
 800a48a:	4305      	orrs	r5, r0
 800a48c:	81a5      	strh	r5, [r4, #12]
 800a48e:	e7cd      	b.n	800a42c <__smakebuf_r+0x18>
 800a490:	0800a221 	.word	0x0800a221

0800a494 <memcpy>:
 800a494:	440a      	add	r2, r1
 800a496:	4291      	cmp	r1, r2
 800a498:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a49c:	d100      	bne.n	800a4a0 <memcpy+0xc>
 800a49e:	4770      	bx	lr
 800a4a0:	b510      	push	{r4, lr}
 800a4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4aa:	4291      	cmp	r1, r2
 800a4ac:	d1f9      	bne.n	800a4a2 <memcpy+0xe>
 800a4ae:	bd10      	pop	{r4, pc}

0800a4b0 <memmove>:
 800a4b0:	4288      	cmp	r0, r1
 800a4b2:	b510      	push	{r4, lr}
 800a4b4:	eb01 0402 	add.w	r4, r1, r2
 800a4b8:	d902      	bls.n	800a4c0 <memmove+0x10>
 800a4ba:	4284      	cmp	r4, r0
 800a4bc:	4623      	mov	r3, r4
 800a4be:	d807      	bhi.n	800a4d0 <memmove+0x20>
 800a4c0:	1e43      	subs	r3, r0, #1
 800a4c2:	42a1      	cmp	r1, r4
 800a4c4:	d008      	beq.n	800a4d8 <memmove+0x28>
 800a4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4ce:	e7f8      	b.n	800a4c2 <memmove+0x12>
 800a4d0:	4402      	add	r2, r0
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	428a      	cmp	r2, r1
 800a4d6:	d100      	bne.n	800a4da <memmove+0x2a>
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4e2:	e7f7      	b.n	800a4d4 <memmove+0x24>

0800a4e4 <__malloc_lock>:
 800a4e4:	4801      	ldr	r0, [pc, #4]	; (800a4ec <__malloc_lock+0x8>)
 800a4e6:	f7ff bf6d 	b.w	800a3c4 <__retarget_lock_acquire_recursive>
 800a4ea:	bf00      	nop
 800a4ec:	200004f0 	.word	0x200004f0

0800a4f0 <__malloc_unlock>:
 800a4f0:	4801      	ldr	r0, [pc, #4]	; (800a4f8 <__malloc_unlock+0x8>)
 800a4f2:	f7ff bf68 	b.w	800a3c6 <__retarget_lock_release_recursive>
 800a4f6:	bf00      	nop
 800a4f8:	200004f0 	.word	0x200004f0

0800a4fc <_realloc_r>:
 800a4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a500:	4680      	mov	r8, r0
 800a502:	4614      	mov	r4, r2
 800a504:	460e      	mov	r6, r1
 800a506:	b921      	cbnz	r1, 800a512 <_realloc_r+0x16>
 800a508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50c:	4611      	mov	r1, r2
 800a50e:	f7ff b80b 	b.w	8009528 <_malloc_r>
 800a512:	b92a      	cbnz	r2, 800a520 <_realloc_r+0x24>
 800a514:	f7fe ff9c 	bl	8009450 <_free_r>
 800a518:	4625      	mov	r5, r4
 800a51a:	4628      	mov	r0, r5
 800a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a520:	f000 f8fa 	bl	800a718 <_malloc_usable_size_r>
 800a524:	4284      	cmp	r4, r0
 800a526:	4607      	mov	r7, r0
 800a528:	d802      	bhi.n	800a530 <_realloc_r+0x34>
 800a52a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a52e:	d812      	bhi.n	800a556 <_realloc_r+0x5a>
 800a530:	4621      	mov	r1, r4
 800a532:	4640      	mov	r0, r8
 800a534:	f7fe fff8 	bl	8009528 <_malloc_r>
 800a538:	4605      	mov	r5, r0
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d0ed      	beq.n	800a51a <_realloc_r+0x1e>
 800a53e:	42bc      	cmp	r4, r7
 800a540:	4622      	mov	r2, r4
 800a542:	4631      	mov	r1, r6
 800a544:	bf28      	it	cs
 800a546:	463a      	movcs	r2, r7
 800a548:	f7ff ffa4 	bl	800a494 <memcpy>
 800a54c:	4631      	mov	r1, r6
 800a54e:	4640      	mov	r0, r8
 800a550:	f7fe ff7e 	bl	8009450 <_free_r>
 800a554:	e7e1      	b.n	800a51a <_realloc_r+0x1e>
 800a556:	4635      	mov	r5, r6
 800a558:	e7df      	b.n	800a51a <_realloc_r+0x1e>

0800a55a <_raise_r>:
 800a55a:	291f      	cmp	r1, #31
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4604      	mov	r4, r0
 800a560:	460d      	mov	r5, r1
 800a562:	d904      	bls.n	800a56e <_raise_r+0x14>
 800a564:	2316      	movs	r3, #22
 800a566:	6003      	str	r3, [r0, #0]
 800a568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a570:	b112      	cbz	r2, 800a578 <_raise_r+0x1e>
 800a572:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a576:	b94b      	cbnz	r3, 800a58c <_raise_r+0x32>
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 f831 	bl	800a5e0 <_getpid_r>
 800a57e:	462a      	mov	r2, r5
 800a580:	4601      	mov	r1, r0
 800a582:	4620      	mov	r0, r4
 800a584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a588:	f000 b818 	b.w	800a5bc <_kill_r>
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d00a      	beq.n	800a5a6 <_raise_r+0x4c>
 800a590:	1c59      	adds	r1, r3, #1
 800a592:	d103      	bne.n	800a59c <_raise_r+0x42>
 800a594:	2316      	movs	r3, #22
 800a596:	6003      	str	r3, [r0, #0]
 800a598:	2001      	movs	r0, #1
 800a59a:	e7e7      	b.n	800a56c <_raise_r+0x12>
 800a59c:	2400      	movs	r4, #0
 800a59e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	4798      	blx	r3
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e7e0      	b.n	800a56c <_raise_r+0x12>
	...

0800a5ac <raise>:
 800a5ac:	4b02      	ldr	r3, [pc, #8]	; (800a5b8 <raise+0xc>)
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	f7ff bfd2 	b.w	800a55a <_raise_r>
 800a5b6:	bf00      	nop
 800a5b8:	200001d0 	.word	0x200001d0

0800a5bc <_kill_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	4d07      	ldr	r5, [pc, #28]	; (800a5dc <_kill_r+0x20>)
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	4608      	mov	r0, r1
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	602b      	str	r3, [r5, #0]
 800a5ca:	f7f7 f947 	bl	800185c <_kill>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	d102      	bne.n	800a5d8 <_kill_r+0x1c>
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	b103      	cbz	r3, 800a5d8 <_kill_r+0x1c>
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	bd38      	pop	{r3, r4, r5, pc}
 800a5da:	bf00      	nop
 800a5dc:	200004f4 	.word	0x200004f4

0800a5e0 <_getpid_r>:
 800a5e0:	f7f7 b934 	b.w	800184c <_getpid>

0800a5e4 <__sread>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ec:	f000 f89c 	bl	800a728 <_read_r>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	bfab      	itete	ge
 800a5f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5f8:	181b      	addge	r3, r3, r0
 800a5fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5fe:	bfac      	ite	ge
 800a600:	6563      	strge	r3, [r4, #84]	; 0x54
 800a602:	81a3      	strhlt	r3, [r4, #12]
 800a604:	bd10      	pop	{r4, pc}

0800a606 <__swrite>:
 800a606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60a:	461f      	mov	r7, r3
 800a60c:	898b      	ldrh	r3, [r1, #12]
 800a60e:	05db      	lsls	r3, r3, #23
 800a610:	4605      	mov	r5, r0
 800a612:	460c      	mov	r4, r1
 800a614:	4616      	mov	r6, r2
 800a616:	d505      	bpl.n	800a624 <__swrite+0x1e>
 800a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61c:	2302      	movs	r3, #2
 800a61e:	2200      	movs	r2, #0
 800a620:	f000 f868 	bl	800a6f4 <_lseek_r>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a62a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	4632      	mov	r2, r6
 800a632:	463b      	mov	r3, r7
 800a634:	4628      	mov	r0, r5
 800a636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a63a:	f000 b817 	b.w	800a66c <_write_r>

0800a63e <__sseek>:
 800a63e:	b510      	push	{r4, lr}
 800a640:	460c      	mov	r4, r1
 800a642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a646:	f000 f855 	bl	800a6f4 <_lseek_r>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	bf15      	itete	ne
 800a650:	6560      	strne	r0, [r4, #84]	; 0x54
 800a652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a65a:	81a3      	strheq	r3, [r4, #12]
 800a65c:	bf18      	it	ne
 800a65e:	81a3      	strhne	r3, [r4, #12]
 800a660:	bd10      	pop	{r4, pc}

0800a662 <__sclose>:
 800a662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a666:	f000 b813 	b.w	800a690 <_close_r>
	...

0800a66c <_write_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	; (800a68c <_write_r+0x20>)
 800a670:	4604      	mov	r4, r0
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7f7 f925 	bl	80018ca <_write>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_write_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_write_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	200004f4 	.word	0x200004f4

0800a690 <_close_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d06      	ldr	r5, [pc, #24]	; (800a6ac <_close_r+0x1c>)
 800a694:	2300      	movs	r3, #0
 800a696:	4604      	mov	r4, r0
 800a698:	4608      	mov	r0, r1
 800a69a:	602b      	str	r3, [r5, #0]
 800a69c:	f7f7 f931 	bl	8001902 <_close>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d102      	bne.n	800a6aa <_close_r+0x1a>
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	b103      	cbz	r3, 800a6aa <_close_r+0x1a>
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	200004f4 	.word	0x200004f4

0800a6b0 <_fstat_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d07      	ldr	r5, [pc, #28]	; (800a6d0 <_fstat_r+0x20>)
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	602b      	str	r3, [r5, #0]
 800a6be:	f7f7 f92c 	bl	800191a <_fstat>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d102      	bne.n	800a6cc <_fstat_r+0x1c>
 800a6c6:	682b      	ldr	r3, [r5, #0]
 800a6c8:	b103      	cbz	r3, 800a6cc <_fstat_r+0x1c>
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	bd38      	pop	{r3, r4, r5, pc}
 800a6ce:	bf00      	nop
 800a6d0:	200004f4 	.word	0x200004f4

0800a6d4 <_isatty_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4d06      	ldr	r5, [pc, #24]	; (800a6f0 <_isatty_r+0x1c>)
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4604      	mov	r4, r0
 800a6dc:	4608      	mov	r0, r1
 800a6de:	602b      	str	r3, [r5, #0]
 800a6e0:	f7f7 f92b 	bl	800193a <_isatty>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_isatty_r+0x1a>
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_isatty_r+0x1a>
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	200004f4 	.word	0x200004f4

0800a6f4 <_lseek_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d07      	ldr	r5, [pc, #28]	; (800a714 <_lseek_r+0x20>)
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	2200      	movs	r2, #0
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	f7f7 f924 	bl	8001950 <_lseek>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_lseek_r+0x1e>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_lseek_r+0x1e>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	200004f4 	.word	0x200004f4

0800a718 <_malloc_usable_size_r>:
 800a718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71c:	1f18      	subs	r0, r3, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfbc      	itt	lt
 800a722:	580b      	ldrlt	r3, [r1, r0]
 800a724:	18c0      	addlt	r0, r0, r3
 800a726:	4770      	bx	lr

0800a728 <_read_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	; (800a748 <_read_r+0x20>)
 800a72c:	4604      	mov	r4, r0
 800a72e:	4608      	mov	r0, r1
 800a730:	4611      	mov	r1, r2
 800a732:	2200      	movs	r2, #0
 800a734:	602a      	str	r2, [r5, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	f7f7 f8aa 	bl	8001890 <_read>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d102      	bne.n	800a746 <_read_r+0x1e>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	b103      	cbz	r3, 800a746 <_read_r+0x1e>
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	200004f4 	.word	0x200004f4

0800a74c <_init>:
 800a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74e:	bf00      	nop
 800a750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a752:	bc08      	pop	{r3}
 800a754:	469e      	mov	lr, r3
 800a756:	4770      	bx	lr

0800a758 <_fini>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	bf00      	nop
 800a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75e:	bc08      	pop	{r3}
 800a760:	469e      	mov	lr, r3
 800a762:	4770      	bx	lr

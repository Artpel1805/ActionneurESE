
ActionneurESE_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f04  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007420  08007420  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007420  08007420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007428  08007428  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  08007538  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08007538  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001543f  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2e  00000000  00000000  00035577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  000381a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00039328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c6f  00000000  00000000  0003a370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158a2  00000000  00000000  00061fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd52f  00000000  00000000  00077881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174db0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005308  00000000  00000000  00174e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	080070cc 	.word	0x080070cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	080070cc 	.word	0x080070cc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <get_ccr_value>:

#include "tim.h"
#include "asservissement.h"
#include "power_module.h"

int get_ccr_value(int rapport_cyclique){
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if(rapport_cyclique > 100){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b64      	cmp	r3, #100	; 0x64
 8000600:	dd02      	ble.n	8000608 <get_ccr_value+0x14>
		return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e012      	b.n	800062e <get_ccr_value+0x3a>
	}
	if(rapport_cyclique<0){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	da02      	bge.n	8000614 <get_ccr_value+0x20>
		return -1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	e00c      	b.n	800062e <get_ccr_value+0x3a>
	}
	int arr = TIM1 -> ARR;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <get_ccr_value+0x48>)
 8000616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000618:	60fb      	str	r3, [r7, #12]
	return (rapport_cyclique * arr) / 100;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	fb02 f303 	mul.w	r3, r2, r3
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <get_ccr_value+0x4c>)
 8000624:	fb82 1203 	smull	r1, r2, r2, r3
 8000628:	1152      	asrs	r2, r2, #5
 800062a:	17db      	asrs	r3, r3, #31
 800062c:	1ad3      	subs	r3, r2, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40012c00 	.word	0x40012c00
 8000640:	51eb851f 	.word	0x51eb851f

08000644 <change_ccr>:


void change_ccr(int rapport_cyclique){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	int goalCCR1 = get_ccr_value(rapport_cyclique);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffd1 	bl	80005f4 <get_ccr_value>
 8000652:	60f8      	str	r0, [r7, #12]
	if(goalCCR1 == -1){
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065a:	d02d      	beq.n	80006b8 <change_ccr+0x74>
		return;
	}
	if( goalCCR1 > TIM1 -> CCR1){
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <change_ccr+0x7c>)
 800065e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	429a      	cmp	r2, r3
 8000664:	d211      	bcs.n	800068a <change_ccr+0x46>
		while(TIM1 -> CCR1 != goalCCR1){
 8000666:	e00a      	b.n	800067e <change_ccr+0x3a>
			TIM1 -> CCR1 ++;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <change_ccr+0x7c>)
 800066a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066c:	3201      	adds	r2, #1
 800066e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1 -> CCR2 --;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <change_ccr+0x7c>)
 8000672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000674:	3a01      	subs	r2, #1
 8000676:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 8000678:	2032      	movs	r0, #50	; 0x32
 800067a:	f000 fe01 	bl	8001280 <HAL_Delay>
		while(TIM1 -> CCR1 != goalCCR1){
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <change_ccr+0x7c>)
 8000680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	429a      	cmp	r2, r3
 8000686:	d1ef      	bne.n	8000668 <change_ccr+0x24>
		}
		return;
 8000688:	e017      	b.n	80006ba <change_ccr+0x76>
	}
	if( goalCCR1 < TIM1 -> CCR1){
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <change_ccr+0x7c>)
 800068c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	d912      	bls.n	80006ba <change_ccr+0x76>
		while(TIM1 -> CCR1 != goalCCR1){
 8000694:	e00a      	b.n	80006ac <change_ccr+0x68>
			TIM1 -> CCR1 --;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <change_ccr+0x7c>)
 8000698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800069a:	3a01      	subs	r2, #1
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1 -> CCR2 ++;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <change_ccr+0x7c>)
 80006a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006a2:	3201      	adds	r2, #1
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 80006a6:	2032      	movs	r0, #50	; 0x32
 80006a8:	f000 fdea 	bl	8001280 <HAL_Delay>
		while(TIM1 -> CCR1 != goalCCR1){
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <change_ccr+0x7c>)
 80006ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d1ef      	bne.n	8000696 <change_ccr+0x52>
		}
		return;
 80006b6:	e000      	b.n	80006ba <change_ccr+0x76>
		return;
 80006b8:	bf00      	nop
	}
}
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40012c00 	.word	0x40012c00

080006c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <MX_GPIO_Init+0xe4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a32      	ldr	r2, [pc, #200]	; (80007a8 <MX_GPIO_Init+0xe4>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <MX_GPIO_Init+0xe4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_GPIO_Init+0xe4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a2c      	ldr	r2, [pc, #176]	; (80007a8 <MX_GPIO_Init+0xe4>)
 80006f8:	f043 0320 	orr.w	r3, r3, #32
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_GPIO_Init+0xe4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0320 	and.w	r3, r3, #32
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_GPIO_Init+0xe4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xe4>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_GPIO_Init+0xe4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2108      	movs	r1, #8
 8000726:	4821      	ldr	r0, [pc, #132]	; (80007ac <MX_GPIO_Init+0xe8>)
 8000728:	f001 f91e 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2120      	movs	r1, #32
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f001 f918 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4817      	ldr	r0, [pc, #92]	; (80007ac <MX_GPIO_Init+0xe8>)
 8000750:	f000 ff88 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000754:	2308      	movs	r3, #8
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4810      	ldr	r0, [pc, #64]	; (80007ac <MX_GPIO_Init+0xe8>)
 800076c:	f000 ff7a 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000770:	2320      	movs	r3, #32
 8000772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f000 ff6b 	bl	8001664 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2101      	movs	r1, #1
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f000 fe71 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f000 fe88 	bl	80014ae <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000800 	.word	0x48000800

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09e      	sub	sp, #120	; 0x78
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fcee 	bl	800119e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f92d 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f7ff ff7d 	bl	80006c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007ca:	f000 fb15 	bl	8000df8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80007ce:	f000 fc11 	bl	8000ff4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	memset(argv,0,MAX_ARGS*sizeof(char*));
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2224      	movs	r2, #36	; 0x24
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 fb8d 	bl	8005ef8 <memset>
	memset(cmdBuffer,0,CMD_BUFFER_SIZE*sizeof(char));
 80007de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e2:	2240      	movs	r2, #64	; 0x40
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 fb86 	bl	8005ef8 <memset>
 80007ec:	4b78      	ldr	r3, [pc, #480]	; (80009d0 <main+0x220>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,0,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,0,UART_TX_BUFFER_SIZE*sizeof(char));
 80007f2:	2240      	movs	r2, #64	; 0x40
 80007f4:	2100      	movs	r1, #0
 80007f6:	4877      	ldr	r0, [pc, #476]	; (80009d4 <main+0x224>)
 80007f8:	f005 fb7e 	bl	8005ef8 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4974      	ldr	r1, [pc, #464]	; (80009d0 <main+0x220>)
 8000800:	4875      	ldr	r0, [pc, #468]	; (80009d8 <main+0x228>)
 8000802:	f003 fbbb 	bl	8003f7c <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000806:	200a      	movs	r0, #10
 8000808:	f000 fd3a 	bl	8001280 <HAL_Delay>

	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	2266      	movs	r2, #102	; 0x66
 8000812:	4972      	ldr	r1, [pc, #456]	; (80009dc <main+0x22c>)
 8000814:	4870      	ldr	r0, [pc, #448]	; (80009d8 <main+0x228>)
 8000816:	f003 fb1b 	bl	8003e50 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	2218      	movs	r2, #24
 8000820:	496f      	ldr	r1, [pc, #444]	; (80009e0 <main+0x230>)
 8000822:	486d      	ldr	r0, [pc, #436]	; (80009d8 <main+0x228>)
 8000824:	f003 fb14 	bl	8003e50 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000828:	4b6e      	ldr	r3, [pc, #440]	; (80009e4 <main+0x234>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d056      	beq.n	80008de <main+0x12e>
			switch(uartRxBuffer[0]){
 8000830:	4b67      	ldr	r3, [pc, #412]	; (80009d0 <main+0x220>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b0d      	cmp	r3, #13
 8000836:	d002      	beq.n	800083e <main+0x8e>
 8000838:	2b7f      	cmp	r3, #127	; 0x7f
 800083a:	d02d      	beq.n	8000898 <main+0xe8>
 800083c:	e03c      	b.n	80008b8 <main+0x108>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	2203      	movs	r2, #3
 8000844:	4968      	ldr	r1, [pc, #416]	; (80009e8 <main+0x238>)
 8000846:	4864      	ldr	r0, [pc, #400]	; (80009d8 <main+0x228>)
 8000848:	f003 fb02 	bl	8003e50 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 800084c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000852:	4413      	add	r3, r2
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, "=");//
 800085c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000860:	4962      	ldr	r1, [pc, #392]	; (80009ec <main+0x23c>)
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fb50 	bl	8005f08 <strtok>
 8000868:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 800086a:	e00d      	b.n	8000888 <main+0xd8>
					argv[argc++] = token;
 800086c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	673a      	str	r2, [r7, #112]	; 0x70
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	3378      	adds	r3, #120	; 0x78
 8000876:	443b      	add	r3, r7
 8000878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800087a:	f843 2c74 	str.w	r2, [r3, #-116]
					token = strtok(NULL, " ");
 800087e:	495c      	ldr	r1, [pc, #368]	; (80009f0 <main+0x240>)
 8000880:	2000      	movs	r0, #0
 8000882:	f005 fb41 	bl	8005f08 <strtok>
 8000886:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 8000888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ee      	bne.n	800086c <main+0xbc>
				}
				idx_cmd = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 8000896:	e01f      	b.n	80008d8 <main+0x128>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8000898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	677a      	str	r2, [r7, #116]	; 0x74
 800089e:	3378      	adds	r3, #120	; 0x78
 80008a0:	443b      	add	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	2201      	movs	r2, #1
 80008ae:	4948      	ldr	r1, [pc, #288]	; (80009d0 <main+0x220>)
 80008b0:	4849      	ldr	r0, [pc, #292]	; (80009d8 <main+0x228>)
 80008b2:	f003 facd 	bl	8003e50 <HAL_UART_Transmit>
				break;
 80008b6:	e00f      	b.n	80008d8 <main+0x128>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80008b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	677a      	str	r2, [r7, #116]	; 0x74
 80008be:	4a44      	ldr	r2, [pc, #272]	; (80009d0 <main+0x220>)
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	3378      	adds	r3, #120	; 0x78
 80008c4:	443b      	add	r3, r7
 80008c6:	f803 2c50 	strb.w	r2, [r3, #-80]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	2201      	movs	r2, #1
 80008d0:	493f      	ldr	r1, [pc, #252]	; (80009d0 <main+0x220>)
 80008d2:	4841      	ldr	r0, [pc, #260]	; (80009d8 <main+0x228>)
 80008d4:	f003 fabc 	bl	8003e50 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80008d8:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <main+0x234>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 80008de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0a1      	beq.n	8000828 <main+0x78>

			if(strcmp(argv[0],"speed")==0){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4943      	ldr	r1, [pc, #268]	; (80009f4 <main+0x244>)
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fc99 	bl	8000220 <strcmp>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d117      	bne.n	8000924 <main+0x174>
				if(strlen(argv[1])==2)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc9c 	bl	8000234 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d108      	bne.n	8000914 <main+0x164>
				{
					change_ccr(atoi(argv[1]));
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4618      	mov	r0, r3
 8000906:	f005 fac9 	bl	8005e9c <atoi>
 800090a:	4603      	mov	r3, r0
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe99 	bl	8000644 <change_ccr>
 8000912:	e052      	b.n	80009ba <main+0x20a>
				}
				else {
					HAL_UART_Transmit(&huart2, vitesseNotFound, sizeof(vitesseNotFound), HAL_MAX_DELAY);                      }
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	2217      	movs	r2, #23
 800091a:	4937      	ldr	r1, [pc, #220]	; (80009f8 <main+0x248>)
 800091c:	482e      	ldr	r0, [pc, #184]	; (80009d8 <main+0x228>)
 800091e:	f003 fa97 	bl	8003e50 <HAL_UART_Transmit>
 8000922:	e04a      	b.n	80009ba <main+0x20a>

			}
			else if(strcmp(argv[0],"start")==0)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4935      	ldr	r1, [pc, #212]	; (80009fc <main+0x24c>)
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fc79 	bl	8000220 <strcmp>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d109      	bne.n	8000948 <main+0x198>
			{
				start_module();
 8000934:	f000 f8da 	bl	8000aec <start_module>
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	220d      	movs	r2, #13
 800093e:	4930      	ldr	r1, [pc, #192]	; (8000a00 <main+0x250>)
 8000940:	4825      	ldr	r0, [pc, #148]	; (80009d8 <main+0x228>)
 8000942:	f003 fa85 	bl	8003e50 <HAL_UART_Transmit>
 8000946:	e038      	b.n	80009ba <main+0x20a>

			}
			else if(strcmp(argv[0],"stop")==0)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	492e      	ldr	r1, [pc, #184]	; (8000a04 <main+0x254>)
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc67 	bl	8000220 <strcmp>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d109      	bne.n	800096c <main+0x1bc>
			{
				stop_module();
 8000958:	f000 f8ee 	bl	8000b38 <stop_module>
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	220e      	movs	r2, #14
 8000962:	4929      	ldr	r1, [pc, #164]	; (8000a08 <main+0x258>)
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <main+0x228>)
 8000966:	f003 fa73 	bl	8003e50 <HAL_UART_Transmit>
 800096a:	e026      	b.n	80009ba <main+0x20a>
			}
			else if(strcmp(argv[0],"pinout")==0)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4927      	ldr	r1, [pc, #156]	; (8000a0c <main+0x25c>)
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fc55 	bl	8000220 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d107      	bne.n	800098c <main+0x1dc>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	2227      	movs	r2, #39	; 0x27
 8000982:	4923      	ldr	r1, [pc, #140]	; (8000a10 <main+0x260>)
 8000984:	4814      	ldr	r0, [pc, #80]	; (80009d8 <main+0x228>)
 8000986:	f003 fa63 	bl	8003e50 <HAL_UART_Transmit>
 800098a:	e016      	b.n	80009ba <main+0x20a>
			}
			else if(strcmp(argv[0],"help")==0)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4921      	ldr	r1, [pc, #132]	; (8000a14 <main+0x264>)
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc45 	bl	8000220 <strcmp>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d107      	bne.n	80009ac <main+0x1fc>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	2221      	movs	r2, #33	; 0x21
 80009a2:	491d      	ldr	r1, [pc, #116]	; (8000a18 <main+0x268>)
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <main+0x228>)
 80009a6:	f003 fa53 	bl	8003e50 <HAL_UART_Transmit>
 80009aa:	e006      	b.n	80009ba <main+0x20a>
			}

			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	2214      	movs	r2, #20
 80009b2:	491a      	ldr	r1, [pc, #104]	; (8000a1c <main+0x26c>)
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <main+0x228>)
 80009b6:	f003 fa4b 	bl	8003e50 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	2218      	movs	r2, #24
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <main+0x230>)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <main+0x228>)
 80009c4:	f003 fa44 	bl	8003e50 <HAL_UART_Transmit>
			newCmdReady = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 80009cc:	e72c      	b.n	8000828 <main+0x78>
 80009ce:	bf00      	nop
 80009d0:	20000128 	.word	0x20000128
 80009d4:	2000012c 	.word	0x2000012c
 80009d8:	200001bc 	.word	0x200001bc
 80009dc:	20000018 	.word	0x20000018
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000124 	.word	0x20000124
 80009e8:	20000080 	.word	0x20000080
 80009ec:	080070e4 	.word	0x080070e4
 80009f0:	080070e8 	.word	0x080070e8
 80009f4:	080070ec 	.word	0x080070ec
 80009f8:	08007180 	.word	0x08007180
 80009fc:	080070f4 	.word	0x080070f4
 8000a00:	08007114 	.word	0x08007114
 8000a04:	080070fc 	.word	0x080070fc
 8000a08:	08007124 	.word	0x08007124
 8000a0c:	08007104 	.word	0x08007104
 8000a10:	08007134 	.word	0x08007134
 8000a14:	0800710c 	.word	0x0800710c
 8000a18:	0800715c 	.word	0x0800715c
 8000a1c:	20000084 	.word	0x20000084

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	2238      	movs	r2, #56	; 0x38
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 fa62 	bl	8005ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 ffcc 	bl	80019e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a50:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a56:	2303      	movs	r3, #3
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a5e:	2355      	movs	r3, #85	; 0x55
 8000a60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f868 	bl	8001b48 <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000a7e:	f000 f82f 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2303      	movs	r3, #3
 8000a88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2104      	movs	r1, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fb6c 	bl	8002178 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000aa6:	f000 f81b 	bl	8000ae0 <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	; 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_UART_RxCpltCallback+0x20>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <HAL_UART_RxCpltCallback+0x24>)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <HAL_UART_RxCpltCallback+0x28>)
 8000ac8:	f003 fa58 	bl	8003f7c <HAL_UART_Receive_IT>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000124 	.word	0x20000124
 8000ad8:	20000128 	.word	0x20000128
 8000adc:	200001bc 	.word	0x200001bc

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <start_module>:
#include "power_module.h"
#include "main.h"
#include "tim.h"


void start_module(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2108      	movs	r1, #8
 8000af4:	480e      	ldr	r0, [pc, #56]	; (8000b30 <start_module+0x44>)
 8000af6:	f000 ff37 	bl	8001968 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 fbc0 	bl	8001280 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2108      	movs	r1, #8
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <start_module+0x44>)
 8000b06:	f000 ff2f 	bl	8001968 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <start_module+0x48>)
 8000b0e:	f001 fff5 	bl	8002afc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000b12:	2100      	movs	r1, #0
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <start_module+0x48>)
 8000b16:	f002 feab 	bl	8003870 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <start_module+0x48>)
 8000b1e:	f001 ffed 	bl	8002afc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b22:	2104      	movs	r1, #4
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <start_module+0x48>)
 8000b26:	f002 fea3 	bl	8003870 <HAL_TIMEx_PWMN_Start>

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	48000800 	.word	0x48000800
 8000b34:	20000170 	.word	0x20000170

08000b38 <stop_module>:

void stop_module(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <stop_module+0x28>)
 8000b40:	f002 f8ee 	bl	8002d20 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000b44:	2100      	movs	r1, #0
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <stop_module+0x28>)
 8000b48:	f002 ff54 	bl	80039f4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <stop_module+0x28>)
 8000b50:	f002 f8e6 	bl	8002d20 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000b54:	2104      	movs	r1, #4
 8000b56:	4802      	ldr	r0, [pc, #8]	; (8000b60 <stop_module+0x28>)
 8000b58:	f002 ff4c 	bl	80039f4 <HAL_TIMEx_PWMN_Stop>

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000170 	.word	0x20000170

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6613      	str	r3, [r2, #96]	; 0x60
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x54>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2005      	movs	r0, #5
 8000ba0:	f000 fc6b 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ba4:	2005      	movs	r0, #5
 8000ba6:	f000 fc82 	bl	80014ae <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000baa:	f000 ffbd 	bl	8001b28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 fb1c 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <USART2_IRQHandler+0x10>)
 8000c26:	f003 f9ff 	bl	8004028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001bc 	.word	0x200001bc

08000c34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	start_module(); // Don't forget to put a lower priority as SySTick
 8000c38:	f7ff ff58 	bl	8000aec <start_module>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c40:	f000 feaa 	bl	8001998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_kill>:

int _kill(int pid, int sig)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c62:	f005 f91f 	bl	8005ea4 <__errno>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2216      	movs	r2, #22
 8000c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_exit>:

void _exit (int status)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ffe7 	bl	8000c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c8a:	e7fe      	b.n	8000c8a <_exit+0x12>

08000c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
	}

return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e009      	b.n	8000cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf1      	blt.n	8000cd8 <_write+0x12>
	}
	return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
	return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f005 f884 	bl	8005ea4 <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20020000 	.word	0x20020000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	2000016c 	.word	0x2000016c
 8000dd0:	20000260 	.word	0x20000260

08000dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b098      	sub	sp, #96	; 0x60
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2234      	movs	r2, #52	; 0x34
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 f867 	bl	8005ef8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e2a:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e2c:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <MX_TIM1_Init+0x148>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8000e30:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e32:	2209      	movs	r2, #9
 8000e34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e38:	2220      	movs	r2, #32
 8000e3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000e3c:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e3e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000e42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e4a:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e56:	4839      	ldr	r0, [pc, #228]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e58:	f001 fdf8 	bl	8002a4c <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f7ff fe3d 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	4830      	ldr	r0, [pc, #192]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000e7a:	f002 fe19 	bl	8003ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e84:	f7ff fe2c 	bl	8000ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 614;
 8000e8c:	f240 2366 	movw	r3, #614	; 0x266
 8000e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e92:	2300      	movs	r3, #0
 8000e94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e96:	2300      	movs	r3, #0
 8000e98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4823      	ldr	r0, [pc, #140]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000eb0:	f001 ffd2 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000eba:	f7ff fe11 	bl	8000ae0 <Error_Handler>
  }
  sConfigOC.Pulse = 410;
 8000ebe:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec8:	2204      	movs	r2, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481b      	ldr	r0, [pc, #108]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000ece:	f001 ffc3 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000ed8:	f7ff fe02 	bl	8000ae0 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8000edc:	4817      	ldr	r0, [pc, #92]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000ede:	f002 ff2f 	bl	8003d40 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8000eee:	23d2      	movs	r3, #210	; 0xd2
 8000ef0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000f20:	f002 fe5c 	bl	8003bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000f2a:	f7ff fdd9 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_TIM1_Init+0x144>)
 8000f30:	f000 f828 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000f34:	bf00      	nop
 8000f36:	3760      	adds	r7, #96	; 0x60
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000170 	.word	0x20000170
 8000f40:	40012c00 	.word	0x40012c00

08000f44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_TIM_PWM_MspInit+0x38>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10b      	bne.n	8000f6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f60:	6613      	str	r3, [r2, #96]	; 0x60
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40012c00 	.word	0x40012c00
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11d      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000fbe:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f000 fb41 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <MX_USART2_UART_Init+0x94>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_USART2_UART_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_USART2_UART_Init+0x90>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_USART2_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_USART2_UART_Init+0x90>)
 800103e:	f002 feb7 	bl	8003db0 <HAL_UART_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001048:	f7ff fd4a 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001050:	f004 fe59 	bl	8005d06 <HAL_UARTEx_SetTxFifoThreshold>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800105a:	f7ff fd41 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001062:	f004 fe8e 	bl	8005d82 <HAL_UARTEx_SetRxFifoThreshold>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800106c:	f7ff fd38 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_USART2_UART_Init+0x90>)
 8001072:	f004 fe0f 	bl	8005c94 <HAL_UARTEx_DisableFifoMode>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800107c:	f7ff fd30 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001bc 	.word	0x200001bc
 8001088:	40004400 	.word	0x40004400

0800108c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09e      	sub	sp, #120	; 0x78
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2254      	movs	r2, #84	; 0x54
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 ff23 	bl	8005ef8 <memset>
  if(uartHandle->Instance==USART2)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a23      	ldr	r2, [pc, #140]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d13e      	bne.n	800113a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010bc:	2302      	movs	r3, #2
 80010be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fa71 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d4:	f7ff fd04 	bl	8000ae0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_UART_MspInit+0xbc>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010dc:	4a1a      	ldr	r2, [pc, #104]	; (8001148 <HAL_UART_MspInit+0xbc>)
 80010de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e2:	6593      	str	r3, [r2, #88]	; 0x58
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_UART_MspInit+0xbc>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_UART_MspInit+0xbc>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <HAL_UART_MspInit+0xbc>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_UART_MspInit+0xbc>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001108:	230c      	movs	r3, #12
 800110a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001118:	2307      	movs	r3, #7
 800111a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f000 fa9d 	bl	8001664 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2101      	movs	r1, #1
 800112e:	2026      	movs	r0, #38	; 0x26
 8001130:	f000 f9a3 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001134:	2026      	movs	r0, #38	; 0x26
 8001136:	f000 f9ba 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3778      	adds	r7, #120	; 0x78
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40004400 	.word	0x40004400
 8001148:	40021000 	.word	0x40021000

0800114c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0b      	ldr	r4, [pc, #44]	; (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001176:	f7ff fe2d 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f004 fe99 	bl	8005eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117e:	f7ff fb17 	bl	80007b0 <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   r0, =_estack
 8001184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001190:	08007430 	.word	0x08007430
  ldr r2, =_sbss
 8001194:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001198:	20000260 	.word	0x20000260

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>

0800119e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f95b 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f80e 	bl	80011d0 <HAL_InitTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	e001      	b.n	80011c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c0:	f7ff fcd0 	bl	8000b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c4:	79fb      	ldrb	r3, [r7, #7]

}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_InitTick+0x68>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d022      	beq.n	800122a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_InitTick+0x6c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_InitTick+0x68>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f966 	bl	80014ca <HAL_SYSTICK_Config>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10f      	bne.n	8001224 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	d809      	bhi.n	800121e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120a:	2200      	movs	r2, #0
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	f04f 30ff 	mov.w	r0, #4294967295
 8001212:	f000 f932 	bl	800147a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_InitTick+0x70>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e007      	b.n	800122e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e004      	b.n	800122e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200000a0 	.word	0x200000a0
 800123c:	20000098 	.word	0x20000098
 8001240:	2000009c 	.word	0x2000009c

08001244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x1c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x20>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4413      	add	r3, r2
 8001252:	4a03      	ldr	r2, [pc, #12]	; (8001260 <HAL_IncTick+0x1c>)
 8001254:	6013      	str	r3, [r2, #0]
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	2000024c 	.word	0x2000024c
 8001264:	200000a0 	.word	0x200000a0

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000024c 	.word	0x2000024c

08001280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff ffee 	bl	8001268 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001298:	d004      	beq.n	80012a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_Delay+0x40>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a4:	bf00      	nop
 80012a6:	f7ff ffdf 	bl	8001268 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d8f7      	bhi.n	80012a6 <HAL_Delay+0x26>
  {
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200000a0 	.word	0x200000a0

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff40 	bl	800130c <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff33 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa4 	bl	8001420 <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d005      	beq.n	8001506 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e037      	b.n	8001576 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020e 	bic.w	r2, r2, #14
 8001514:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001524:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f003 021f 	and.w	r2, r3, #31
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001552:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00c      	beq.n	8001576 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800156a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001574:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d00d      	beq.n	80015c8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2204      	movs	r2, #4
 80015b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e047      	b.n	8001658 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020e 	bic.w	r2, r2, #14
 80015d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001614:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001636:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	4798      	blx	r3
    }
  }
  return status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001672:	e15a      	b.n	800192a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 814c 	beq.w	8001924 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d005      	beq.n	80016a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d130      	bne.n	8001706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016da:	2201      	movs	r2, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	f003 0201 	and.w	r2, r3, #1
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b03      	cmp	r3, #3
 8001710:	d017      	beq.n	8001742 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d123      	bne.n	8001796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	220f      	movs	r2, #15
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	6939      	ldr	r1, [r7, #16]
 8001792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0203 	and.w	r2, r3, #3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80a6 	beq.w	8001924 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_GPIO_Init+0x2e4>)
 80017da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017dc:	4a5a      	ldr	r2, [pc, #360]	; (8001948 <HAL_GPIO_Init+0x2e4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6613      	str	r3, [r2, #96]	; 0x60
 80017e4:	4b58      	ldr	r3, [pc, #352]	; (8001948 <HAL_GPIO_Init+0x2e4>)
 80017e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f0:	4a56      	ldr	r2, [pc, #344]	; (800194c <HAL_GPIO_Init+0x2e8>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800181a:	d01f      	beq.n	800185c <HAL_GPIO_Init+0x1f8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a4c      	ldr	r2, [pc, #304]	; (8001950 <HAL_GPIO_Init+0x2ec>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d019      	beq.n	8001858 <HAL_GPIO_Init+0x1f4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <HAL_GPIO_Init+0x2f0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d013      	beq.n	8001854 <HAL_GPIO_Init+0x1f0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_GPIO_Init+0x2f4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x1ec>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a49      	ldr	r2, [pc, #292]	; (800195c <HAL_GPIO_Init+0x2f8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x1e8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a48      	ldr	r2, [pc, #288]	; (8001960 <HAL_GPIO_Init+0x2fc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001844:	2305      	movs	r3, #5
 8001846:	e00a      	b.n	800185e <HAL_GPIO_Init+0x1fa>
 8001848:	2306      	movs	r3, #6
 800184a:	e008      	b.n	800185e <HAL_GPIO_Init+0x1fa>
 800184c:	2304      	movs	r3, #4
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x1fa>
 8001850:	2303      	movs	r3, #3
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1fa>
 8001854:	2302      	movs	r3, #2
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1fa>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1fa>
 800185c:	2300      	movs	r3, #0
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800186e:	4937      	ldr	r1, [pc, #220]	; (800194c <HAL_GPIO_Init+0x2e8>)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <HAL_GPIO_Init+0x300>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <HAL_GPIO_Init+0x300>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018a6:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_GPIO_Init+0x300>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ca:	4a26      	ldr	r2, [pc, #152]	; (8001964 <HAL_GPIO_Init+0x300>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_GPIO_Init+0x300>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f4:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_GPIO_Init+0x300>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_GPIO_Init+0x300>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800191e:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_GPIO_Init+0x300>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	f47f ae9d 	bne.w	8001674 <HAL_GPIO_Init+0x10>
  }
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	48000400 	.word	0x48000400
 8001954:	48000800 	.word	0x48000800
 8001958:	48000c00 	.word	0x48000c00
 800195c:	48001000 	.word	0x48001000
 8001960:	48001400 	.word	0x48001400
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
 8001974:	4613      	mov	r3, r2
 8001976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001978:	787b      	ldrb	r3, [r7, #1]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001984:	e002      	b.n	800198c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f806 	bl	80019c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d141      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	d131      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a02:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a14:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2232      	movs	r2, #50	; 0x32
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a3f      	ldr	r2, [pc, #252]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	0c9b      	lsrs	r3, r3, #18
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a32:	e002      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d102      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f2      	bne.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a4e:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d158      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e057      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a66:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a70:	e04d      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a78:	d141      	bne.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d131      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a8e:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2232      	movs	r2, #50	; 0x32
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	0c9b      	lsrs	r3, r3, #18
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001abe:	e002      	b.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d102      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f2      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d112      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e011      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001afc:	e007      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	20000098 	.word	0x20000098
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b36:	6093      	str	r3, [r2, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40007000 	.word	0x40007000

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e306      	b.n	8002168 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d075      	beq.n	8001c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4b97      	ldr	r3, [pc, #604]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b70:	4b94      	ldr	r3, [pc, #592]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3e>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_OscConfig+0x44>
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05b      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d157      	bne.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e2e1      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x74>
 8001bae:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a84      	ldr	r2, [pc, #528]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x98>
 8001bc6:	4b7f      	ldr	r3, [pc, #508]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7e      	ldr	r2, [pc, #504]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b7c      	ldr	r3, [pc, #496]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a7b      	ldr	r2, [pc, #492]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001be0:	4b78      	ldr	r3, [pc, #480]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a77      	ldr	r2, [pc, #476]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b75      	ldr	r3, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a74      	ldr	r2, [pc, #464]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff fb32 	bl	8001268 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fb2e 	bl	8001268 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e2a6      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fb1e 	bl	8001268 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fb1a 	bl	8001268 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e292      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c42:	4b60      	ldr	r3, [pc, #384]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5e:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0x136>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_OscConfig+0x13c>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d11f      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x154>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e265      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	4946      	ldr	r1, [pc, #280]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cb0:	4b45      	ldr	r3, [pc, #276]	; (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fa8b 	bl	80011d0 <HAL_InitTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d043      	beq.n	8001d48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e251      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3c      	ldr	r2, [pc, #240]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fac6 	bl	8001268 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fac2 	bl	8001268 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e23a      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	061b      	lsls	r3, r3, #24
 8001d0c:	492d      	ldr	r1, [pc, #180]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
 8001d12:	e01a      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff faa2 	bl	8001268 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff fa9e 	bl	8001268 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e216      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1e0>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d041      	beq.n	8001dda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d64:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fa7b 	bl	8001268 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d76:	f7ff fa77 	bl	8001268 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1ef      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0ef      	beq.n	8001d76 <HAL_RCC_OscConfig+0x22e>
 8001d96:	e020      	b.n	8001dda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa5e 	bl	8001268 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dae:	e00d      	b.n	8001dcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fa5a 	bl	8001268 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d906      	bls.n	8001dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1d2      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1ea      	bne.n	8001db0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80a6 	beq.w	8001f34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dec:	4b84      	ldr	r3, [pc, #528]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2b4>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x2b6>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00d      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a7e      	ldr	r2, [pc, #504]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1e:	4b79      	ldr	r3, [pc, #484]	; (8002004 <HAL_RCC_OscConfig+0x4bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x4bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x4bc>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fa17 	bl	8001268 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff fa13 	bl	8001268 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e18b      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e50:	4b6c      	ldr	r3, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x4bc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <HAL_RCC_OscConfig+0x32e>
 8001e64:	4b66      	ldr	r3, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a65      	ldr	r2, [pc, #404]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	e024      	b.n	8001ec0 <HAL_RCC_OscConfig+0x378>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d110      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x358>
 8001e7e:	4b60      	ldr	r3, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e84:	4a5e      	ldr	r2, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8e:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	4a5a      	ldr	r2, [pc, #360]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x378>
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d016      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f9ce 	bl	8001268 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7ff f9ca 	bl	8001268 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e140      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ed      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x388>
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f9b7 	bl	8001268 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff f9b3 	bl	8001268 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e129      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ed      	bne.n	8001efe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a34      	ldr	r2, [pc, #208]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03c      	beq.n	8001fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f4e:	4a2c      	ldr	r2, [pc, #176]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff f986 	bl	8001268 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f60:	f7ff f982 	bl	8001268 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0fa      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ef      	beq.n	8001f60 <HAL_RCC_OscConfig+0x418>
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7ff f969 	bl	8001268 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f9a:	f7ff f965 	bl	8001268 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0dd      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ef      	bne.n	8001f9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80d1 	beq.w	8002166 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	f000 808b 	beq.w	80020e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d15e      	bne.n	8002098 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f93f 	bl	8001268 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	e00c      	b.n	8002008 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff f93b 	bl	8001268 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d905      	bls.n	8002008 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0b3      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ec      	bne.n	8001fee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002014:	4b56      	ldr	r3, [pc, #344]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4b56      	ldr	r3, [pc, #344]	; (8002174 <HAL_RCC_OscConfig+0x62c>)
 800201a:	4013      	ands	r3, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6a11      	ldr	r1, [r2, #32]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002024:	3a01      	subs	r2, #1
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800202e:	0212      	lsls	r2, r2, #8
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002036:	0852      	lsrs	r2, r2, #1
 8002038:	3a01      	subs	r2, #1
 800203a:	0552      	lsls	r2, r2, #21
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002042:	0852      	lsrs	r2, r2, #1
 8002044:	3a01      	subs	r2, #1
 8002046:	0652      	lsls	r2, r2, #25
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800204e:	06d2      	lsls	r2, r2, #27
 8002050:	430a      	orrs	r2, r1
 8002052:	4947      	ldr	r1, [pc, #284]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 8002054:	4313      	orrs	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b45      	ldr	r3, [pc, #276]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a44      	ldr	r2, [pc, #272]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 800205e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002062:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002064:	4b42      	ldr	r3, [pc, #264]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a41      	ldr	r2, [pc, #260]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 800206a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f8fa 	bl	8001268 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7ff f8f6 	bl	8001268 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e06e      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x530>
 8002096:	e066      	b.n	8002166 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 800209e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a31      	ldr	r2, [pc, #196]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 80020b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f8d2 	bl	8001268 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f8ce 	bl	8001268 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e046      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x580>
 80020e6:	e03e      	b.n	8002166 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e039      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_OscConfig+0x628>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	429a      	cmp	r2, r3
 8002106:	d12c      	bne.n	8002162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	3b01      	subs	r3, #1
 8002114:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d123      	bne.n	8002162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d11b      	bne.n	8002162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d113      	bne.n	8002162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	3b01      	subs	r3, #1
 8002148:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d109      	bne.n	8002162 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	019f800c 	.word	0x019f800c

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e11e      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b8e      	ldr	r3, [pc, #568]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	498c      	ldr	r1, [pc, #560]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b8a      	ldr	r3, [pc, #552]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e106      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d073      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d129      	bne.n	8002228 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d4:	4b81      	ldr	r3, [pc, #516]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0f4      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021e4:	f000 f99e 	bl	8002524 <RCC_GetSysClockFreqFromPLLSource>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4a7c      	ldr	r2, [pc, #496]	; (80023e0 <HAL_RCC_ClockConfig+0x268>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d93f      	bls.n	8002272 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021f2:	4b7a      	ldr	r3, [pc, #488]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002206:	2b00      	cmp	r3, #0
 8002208:	d033      	beq.n	8002272 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d12f      	bne.n	8002272 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002212:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221a:	4a70      	ldr	r2, [pc, #448]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 800221c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e024      	b.n	8002272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0c6      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002240:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0be      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002250:	f000 f8ce 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8002254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4a61      	ldr	r2, [pc, #388]	; (80023e0 <HAL_RCC_ClockConfig+0x268>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d909      	bls.n	8002272 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002266:	4a5d      	ldr	r2, [pc, #372]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4957      	ldr	r1, [pc, #348]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002284:	f7fe fff0 	bl	8001268 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7fe ffec 	bl	8001268 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e095      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a42      	ldr	r2, [pc, #264]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022e4:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022ec:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4936      	ldr	r1, [pc, #216]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
 8002306:	e008      	b.n	800231a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b80      	cmp	r3, #128	; 0x80
 800230c:	d105      	bne.n	800231a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800230e:	4b33      	ldr	r3, [pc, #204]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4a32      	ldr	r2, [pc, #200]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002318:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d21d      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 020f 	bic.w	r2, r3, #15
 8002330:	4929      	ldr	r1, [pc, #164]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002338:	f7fe ff96 	bl	8001268 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7fe ff92 	bl	8001268 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e03b      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d1ed      	bne.n	8002340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4917      	ldr	r1, [pc, #92]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490f      	ldr	r1, [pc, #60]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a2:	f000 f825 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490c      	ldr	r1, [pc, #48]	; (80023e4 <HAL_RCC_ClockConfig+0x26c>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x270>)
 80023c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x274>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe ff02 	bl	80011d0 <HAL_InitTick>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	04c4b400 	.word	0x04c4b400
 80023e4:	08007198 	.word	0x08007198
 80023e8:	20000098 	.word	0x20000098
 80023ec:	2000009c 	.word	0x2000009c

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d102      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	e047      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d102      	bne.n	800241a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e03e      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800241a:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d136      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3301      	adds	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d10c      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002444:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244e:	68d2      	ldr	r2, [r2, #12]
 8002450:	0a12      	lsrs	r2, r2, #8
 8002452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
      break;
 800245c:	e00c      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800245e:	4a13      	ldr	r2, [pc, #76]	; (80024ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002468:	68d2      	ldr	r2, [r2, #12]
 800246a:	0a12      	lsrs	r2, r2, #8
 800246c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
      break;
 8002476:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0e5b      	lsrs	r3, r3, #25
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	3301      	adds	r3, #1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	e001      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002498:	693b      	ldr	r3, [r7, #16]
}
 800249a:	4618      	mov	r0, r3
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	00f42400 	.word	0x00f42400
 80024b0:	016e3600 	.word	0x016e3600

080024b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000098 	.word	0x20000098

080024cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024d0:	f7ff fff0 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4904      	ldr	r1, [pc, #16]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	080071a8 	.word	0x080071a8

080024f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024fc:	f7ff ffda 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0adb      	lsrs	r3, r3, #11
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4904      	ldr	r1, [pc, #16]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x28>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	080071a8 	.word	0x080071a8

08002524 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3301      	adds	r3, #1
 8002540:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d10c      	bne.n	8002562 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002548:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002552:	68d2      	ldr	r2, [r2, #12]
 8002554:	0a12      	lsrs	r2, r2, #8
 8002556:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
    break;
 8002560:	e00c      	b.n	800257c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800256c:	68d2      	ldr	r2, [r2, #12]
 800256e:	0a12      	lsrs	r2, r2, #8
 8002570:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    break;
 800257a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0e5b      	lsrs	r3, r3, #25
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	3301      	adds	r3, #1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002596:	687b      	ldr	r3, [r7, #4]
}
 8002598:	4618      	mov	r0, r3
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40021000 	.word	0x40021000
 80025a8:	016e3600 	.word	0x016e3600
 80025ac:	00f42400 	.word	0x00f42400

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b8:	2300      	movs	r3, #0
 80025ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025bc:	2300      	movs	r3, #0
 80025be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8098 	beq.w	80026fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	4a3f      	ldr	r2, [pc, #252]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a39      	ldr	r2, [pc, #228]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002606:	f7fe fe2f 	bl	8001268 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800260c:	e009      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7fe fe2b 	bl	8001268 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d902      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	74fb      	strb	r3, [r7, #19]
        break;
 8002620:	e005      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ef      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d159      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01e      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	d019      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800265c:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	4a1f      	ldr	r2, [pc, #124]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800267c:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe fdeb 	bl	8001268 <HAL_GetTick>
 8002692:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002694:	e00b      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe fde7 	bl	8001268 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d902      	bls.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	74fb      	strb	r3, [r7, #19]
            break;
 80026ac:	e006      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ec      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10b      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	4903      	ldr	r1, [pc, #12]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026d8:	e008      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	74bb      	strb	r3, [r7, #18]
 80026de:	e005      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ec:	7c7b      	ldrb	r3, [r7, #17]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d105      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	4aa6      	ldr	r2, [pc, #664]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800270a:	4ba1      	ldr	r3, [pc, #644]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	f023 0203 	bic.w	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	499d      	ldr	r1, [pc, #628]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800272c:	4b98      	ldr	r3, [pc, #608]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 020c 	bic.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4995      	ldr	r1, [pc, #596]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800274e:	4b90      	ldr	r3, [pc, #576]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	498c      	ldr	r1, [pc, #560]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002770:	4b87      	ldr	r3, [pc, #540]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4984      	ldr	r1, [pc, #528]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002792:	4b7f      	ldr	r3, [pc, #508]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	497b      	ldr	r1, [pc, #492]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027b4:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	4973      	ldr	r1, [pc, #460]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d6:	4b6e      	ldr	r3, [pc, #440]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	496a      	ldr	r1, [pc, #424]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f8:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4962      	ldr	r1, [pc, #392]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800281a:	4b5d      	ldr	r3, [pc, #372]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	4959      	ldr	r1, [pc, #356]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800283c:	4b54      	ldr	r3, [pc, #336]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002842:	f023 0203 	bic.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	4951      	ldr	r1, [pc, #324]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285e:	4b4c      	ldr	r3, [pc, #304]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	4948      	ldr	r1, [pc, #288]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4940      	ldr	r1, [pc, #256]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289e:	d105      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a0:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a3a      	ldr	r2, [pc, #232]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	4932      	ldr	r1, [pc, #200]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d6:	d105      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	4924      	ldr	r1, [pc, #144]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290e:	d105      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d015      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002946:	d105      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002952:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d019      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297e:	d109      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a02      	ldr	r2, [pc, #8]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298a:	60d3      	str	r3, [r2, #12]
 800298c:	e002      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4926      	ldr	r1, [pc, #152]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029be:	d105      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029c0:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	4918      	ldr	r1, [pc, #96]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	490a      	ldr	r1, [pc, #40]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e049      	b.n	8002af2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe fa66 	bl	8000f44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f000 faf8 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_TIM_PWM_Start+0x24>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e03c      	b.n	8002b9a <HAL_TIM_PWM_Start+0x9e>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d109      	bne.n	8002b3a <HAL_TIM_PWM_Start+0x3e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e02f      	b.n	8002b9a <HAL_TIM_PWM_Start+0x9e>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d109      	bne.n	8002b54 <HAL_TIM_PWM_Start+0x58>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e022      	b.n	8002b9a <HAL_TIM_PWM_Start+0x9e>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d109      	bne.n	8002b6e <HAL_TIM_PWM_Start+0x72>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e015      	b.n	8002b9a <HAL_TIM_PWM_Start+0x9e>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d109      	bne.n	8002b88 <HAL_TIM_PWM_Start+0x8c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e008      	b.n	8002b9a <HAL_TIM_PWM_Start+0x9e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0a6      	b.n	8002cf0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_PWM_Start+0xb6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb0:	e023      	b.n	8002bfa <HAL_TIM_PWM_Start+0xfe>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0xc6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc0:	e01b      	b.n	8002bfa <HAL_TIM_PWM_Start+0xfe>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start+0xd6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd0:	e013      	b.n	8002bfa <HAL_TIM_PWM_Start+0xfe>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0xe6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002be0:	e00b      	b.n	8002bfa <HAL_TIM_PWM_Start+0xfe>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0xf6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf0:	e003      	b.n	8002bfa <HAL_TIM_PWM_Start+0xfe>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	6839      	ldr	r1, [r7, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fe0e 	bl	8003824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3a      	ldr	r2, [pc, #232]	; (8002cf8 <HAL_TIM_PWM_Start+0x1fc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d018      	beq.n	8002c44 <HAL_TIM_PWM_Start+0x148>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a39      	ldr	r2, [pc, #228]	; (8002cfc <HAL_TIM_PWM_Start+0x200>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <HAL_TIM_PWM_Start+0x148>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <HAL_TIM_PWM_Start+0x204>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00e      	beq.n	8002c44 <HAL_TIM_PWM_Start+0x148>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a36      	ldr	r2, [pc, #216]	; (8002d04 <HAL_TIM_PWM_Start+0x208>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_TIM_PWM_Start+0x148>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_TIM_PWM_Start+0x20c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_TIM_PWM_Start+0x148>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <HAL_TIM_PWM_Start+0x210>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_TIM_PWM_Start+0x14c>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_TIM_PWM_Start+0x14e>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <HAL_TIM_PWM_Start+0x1fc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <HAL_TIM_PWM_Start+0x1b2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d01d      	beq.n	8002cae <HAL_TIM_PWM_Start+0x1b2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <HAL_TIM_PWM_Start+0x214>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d018      	beq.n	8002cae <HAL_TIM_PWM_Start+0x1b2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_TIM_PWM_Start+0x218>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_TIM_PWM_Start+0x1b2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <HAL_TIM_PWM_Start+0x21c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00e      	beq.n	8002cae <HAL_TIM_PWM_Start+0x1b2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_TIM_PWM_Start+0x200>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_TIM_PWM_Start+0x1b2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_TIM_PWM_Start+0x204>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_TIM_PWM_Start+0x1b2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <HAL_TIM_PWM_Start+0x210>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d115      	bne.n	8002cda <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_TIM_PWM_Start+0x220>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d015      	beq.n	8002cec <HAL_TIM_PWM_Start+0x1f0>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d011      	beq.n	8002cec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd8:	e008      	b.n	8002cec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e000      	b.n	8002cee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40013400 	.word	0x40013400
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800
 8002d0c:	40015000 	.word	0x40015000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	00010007 	.word	0x00010007

08002d20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fd76 	bl	8003824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <HAL_TIM_PWM_Stop+0x120>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_TIM_PWM_Stop+0x54>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3f      	ldr	r2, [pc, #252]	; (8002e44 <HAL_TIM_PWM_Stop+0x124>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_TIM_PWM_Stop+0x54>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <HAL_TIM_PWM_Stop+0x128>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_TIM_PWM_Stop+0x54>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a3c      	ldr	r2, [pc, #240]	; (8002e4c <HAL_TIM_PWM_Stop+0x12c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_TIM_PWM_Stop+0x54>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a3a      	ldr	r2, [pc, #232]	; (8002e50 <HAL_TIM_PWM_Stop+0x130>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_TIM_PWM_Stop+0x54>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a39      	ldr	r2, [pc, #228]	; (8002e54 <HAL_TIM_PWM_Stop+0x134>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_TIM_PWM_Stop+0x58>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_TIM_PWM_Stop+0x5a>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d017      	beq.n	8002dae <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <HAL_TIM_PWM_Stop+0x8e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	f244 4344 	movw	r3, #17476	; 0x4444
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d107      	bne.n	8002dae <HAL_TIM_PWM_Stop+0x8e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <HAL_TIM_PWM_Stop+0xbe>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	f244 4344 	movw	r3, #17476	; 0x4444
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <HAL_TIM_PWM_Stop+0xbe>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <HAL_TIM_PWM_Stop+0xce>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	e023      	b.n	8002e36 <HAL_TIM_PWM_Stop+0x116>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_PWM_Stop+0xde>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dfc:	e01b      	b.n	8002e36 <HAL_TIM_PWM_Stop+0x116>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_PWM_Stop+0xee>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e0c:	e013      	b.n	8002e36 <HAL_TIM_PWM_Stop+0x116>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Stop+0xfe>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e1c:	e00b      	b.n	8002e36 <HAL_TIM_PWM_Stop+0x116>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Stop+0x10e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e2c:	e003      	b.n	8002e36 <HAL_TIM_PWM_Stop+0x116>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40013400 	.word	0x40013400
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40014400 	.word	0x40014400
 8002e50:	40014800 	.word	0x40014800
 8002e54:	40015000 	.word	0x40015000

08002e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0ff      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b14      	cmp	r3, #20
 8002e82:	f200 80f0 	bhi.w	8003066 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e86:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002ee1 	.word	0x08002ee1
 8002e90:	08003067 	.word	0x08003067
 8002e94:	08003067 	.word	0x08003067
 8002e98:	08003067 	.word	0x08003067
 8002e9c:	08002f21 	.word	0x08002f21
 8002ea0:	08003067 	.word	0x08003067
 8002ea4:	08003067 	.word	0x08003067
 8002ea8:	08003067 	.word	0x08003067
 8002eac:	08002f63 	.word	0x08002f63
 8002eb0:	08003067 	.word	0x08003067
 8002eb4:	08003067 	.word	0x08003067
 8002eb8:	08003067 	.word	0x08003067
 8002ebc:	08002fa3 	.word	0x08002fa3
 8002ec0:	08003067 	.word	0x08003067
 8002ec4:	08003067 	.word	0x08003067
 8002ec8:	08003067 	.word	0x08003067
 8002ecc:	08002fe5 	.word	0x08002fe5
 8002ed0:	08003067 	.word	0x08003067
 8002ed4:	08003067 	.word	0x08003067
 8002ed8:	08003067 	.word	0x08003067
 8002edc:	08003025 	.word	0x08003025
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f972 	bl	80031d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	619a      	str	r2, [r3, #24]
      break;
 8002f1e:	e0a5      	b.n	800306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f9ec 	bl	8003304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	619a      	str	r2, [r3, #24]
      break;
 8002f60:	e084      	b.n	800306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fa5f 	bl	800342c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0208 	orr.w	r2, r2, #8
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0204 	bic.w	r2, r2, #4
 8002f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
      break;
 8002fa0:	e064      	b.n	800306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fad1 	bl	8003550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	021a      	lsls	r2, r3, #8
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	61da      	str	r2, [r3, #28]
      break;
 8002fe2:	e043      	b.n	800306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fb44 	bl	8003678 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0204 	bic.w	r2, r2, #4
 800300e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003022:	e023      	b.n	800306c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb8e 	bl	800374c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	021a      	lsls	r2, r3, #8
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003064:	e002      	b.n	800306c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
      break;
 800306a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop

08003080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a46      	ldr	r2, [pc, #280]	; (80031ac <TIM_Base_SetConfig+0x12c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d017      	beq.n	80030c8 <TIM_Base_SetConfig+0x48>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d013      	beq.n	80030c8 <TIM_Base_SetConfig+0x48>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <TIM_Base_SetConfig+0x130>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00f      	beq.n	80030c8 <TIM_Base_SetConfig+0x48>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <TIM_Base_SetConfig+0x134>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00b      	beq.n	80030c8 <TIM_Base_SetConfig+0x48>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a41      	ldr	r2, [pc, #260]	; (80031b8 <TIM_Base_SetConfig+0x138>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <TIM_Base_SetConfig+0x48>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a40      	ldr	r2, [pc, #256]	; (80031bc <TIM_Base_SetConfig+0x13c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d003      	beq.n	80030c8 <TIM_Base_SetConfig+0x48>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3f      	ldr	r2, [pc, #252]	; (80031c0 <TIM_Base_SetConfig+0x140>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d108      	bne.n	80030da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a33      	ldr	r2, [pc, #204]	; (80031ac <TIM_Base_SetConfig+0x12c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d023      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e8:	d01f      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <TIM_Base_SetConfig+0x130>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01b      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <TIM_Base_SetConfig+0x134>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d017      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2e      	ldr	r2, [pc, #184]	; (80031b8 <TIM_Base_SetConfig+0x138>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2d      	ldr	r2, [pc, #180]	; (80031bc <TIM_Base_SetConfig+0x13c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00f      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <TIM_Base_SetConfig+0x144>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00b      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <TIM_Base_SetConfig+0x148>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <TIM_Base_SetConfig+0x14c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d003      	beq.n	800312a <TIM_Base_SetConfig+0xaa>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <TIM_Base_SetConfig+0x140>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d108      	bne.n	800313c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <TIM_Base_SetConfig+0x12c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <TIM_Base_SetConfig+0x110>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <TIM_Base_SetConfig+0x13c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00f      	beq.n	8003190 <TIM_Base_SetConfig+0x110>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <TIM_Base_SetConfig+0x144>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00b      	beq.n	8003190 <TIM_Base_SetConfig+0x110>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a13      	ldr	r2, [pc, #76]	; (80031c8 <TIM_Base_SetConfig+0x148>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <TIM_Base_SetConfig+0x110>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <TIM_Base_SetConfig+0x14c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0x110>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <TIM_Base_SetConfig+0x140>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d103      	bne.n	8003198 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	615a      	str	r2, [r3, #20]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40013400 	.word	0x40013400
 80031c0:	40015000 	.word	0x40015000
 80031c4:	40014000 	.word	0x40014000
 80031c8:	40014400 	.word	0x40014400
 80031cc:	40014800 	.word	0x40014800

080031d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f023 0201 	bic.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f023 0302 	bic.w	r3, r3, #2
 800321c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a30      	ldr	r2, [pc, #192]	; (80032ec <TIM_OC1_SetConfig+0x11c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <TIM_OC1_SetConfig+0x88>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <TIM_OC1_SetConfig+0x120>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00f      	beq.n	8003258 <TIM_OC1_SetConfig+0x88>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <TIM_OC1_SetConfig+0x124>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00b      	beq.n	8003258 <TIM_OC1_SetConfig+0x88>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a2d      	ldr	r2, [pc, #180]	; (80032f8 <TIM_OC1_SetConfig+0x128>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d007      	beq.n	8003258 <TIM_OC1_SetConfig+0x88>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2c      	ldr	r2, [pc, #176]	; (80032fc <TIM_OC1_SetConfig+0x12c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d003      	beq.n	8003258 <TIM_OC1_SetConfig+0x88>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <TIM_OC1_SetConfig+0x130>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d10c      	bne.n	8003272 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f023 0308 	bic.w	r3, r3, #8
 800325e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <TIM_OC1_SetConfig+0x11c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <TIM_OC1_SetConfig+0xd2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <TIM_OC1_SetConfig+0x120>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00f      	beq.n	80032a2 <TIM_OC1_SetConfig+0xd2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <TIM_OC1_SetConfig+0x124>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00b      	beq.n	80032a2 <TIM_OC1_SetConfig+0xd2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <TIM_OC1_SetConfig+0x128>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <TIM_OC1_SetConfig+0xd2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <TIM_OC1_SetConfig+0x12c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_OC1_SetConfig+0xd2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <TIM_OC1_SetConfig+0x130>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d111      	bne.n	80032c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	621a      	str	r2, [r3, #32]
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40013400 	.word	0x40013400
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40014400 	.word	0x40014400
 80032fc:	40014800 	.word	0x40014800
 8003300:	40015000 	.word	0x40015000

08003304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f023 0210 	bic.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f023 0320 	bic.w	r3, r3, #32
 8003352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <TIM_OC2_SetConfig+0x110>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <TIM_OC2_SetConfig+0x74>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <TIM_OC2_SetConfig+0x114>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_OC2_SetConfig+0x74>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a2a      	ldr	r2, [pc, #168]	; (800341c <TIM_OC2_SetConfig+0x118>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d10d      	bne.n	8003394 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800337e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <TIM_OC2_SetConfig+0x110>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <TIM_OC2_SetConfig+0xc0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <TIM_OC2_SetConfig+0x114>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00f      	beq.n	80033c4 <TIM_OC2_SetConfig+0xc0>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <TIM_OC2_SetConfig+0x11c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_OC2_SetConfig+0xc0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <TIM_OC2_SetConfig+0x120>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_OC2_SetConfig+0xc0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <TIM_OC2_SetConfig+0x124>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_OC2_SetConfig+0xc0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <TIM_OC2_SetConfig+0x118>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d113      	bne.n	80033ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40013400 	.word	0x40013400
 800341c:	40015000 	.word	0x40015000
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800

0800342c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <TIM_OC3_SetConfig+0x10c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <TIM_OC3_SetConfig+0x72>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2a      	ldr	r2, [pc, #168]	; (800353c <TIM_OC3_SetConfig+0x110>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_OC3_SetConfig+0x72>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a29      	ldr	r2, [pc, #164]	; (8003540 <TIM_OC3_SetConfig+0x114>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10d      	bne.n	80034ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <TIM_OC3_SetConfig+0x10c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <TIM_OC3_SetConfig+0xbe>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	; (800353c <TIM_OC3_SetConfig+0x110>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00f      	beq.n	80034ea <TIM_OC3_SetConfig+0xbe>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <TIM_OC3_SetConfig+0x118>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00b      	beq.n	80034ea <TIM_OC3_SetConfig+0xbe>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <TIM_OC3_SetConfig+0x11c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_OC3_SetConfig+0xbe>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <TIM_OC3_SetConfig+0x120>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_OC3_SetConfig+0xbe>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a16      	ldr	r2, [pc, #88]	; (8003540 <TIM_OC3_SetConfig+0x114>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d113      	bne.n	8003512 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	621a      	str	r2, [r3, #32]
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40013400 	.word	0x40013400
 8003540:	40015000 	.word	0x40015000
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800

08003550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800359e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	031b      	lsls	r3, r3, #12
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <TIM_OC4_SetConfig+0x110>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <TIM_OC4_SetConfig+0x74>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <TIM_OC4_SetConfig+0x114>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_OC4_SetConfig+0x74>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a2a      	ldr	r2, [pc, #168]	; (8003668 <TIM_OC4_SetConfig+0x118>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10d      	bne.n	80035e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	031b      	lsls	r3, r3, #12
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <TIM_OC4_SetConfig+0x110>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <TIM_OC4_SetConfig+0xc0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <TIM_OC4_SetConfig+0x114>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00f      	beq.n	8003610 <TIM_OC4_SetConfig+0xc0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1e      	ldr	r2, [pc, #120]	; (800366c <TIM_OC4_SetConfig+0x11c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00b      	beq.n	8003610 <TIM_OC4_SetConfig+0xc0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <TIM_OC4_SetConfig+0x120>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <TIM_OC4_SetConfig+0xc0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <TIM_OC4_SetConfig+0x124>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_OC4_SetConfig+0xc0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <TIM_OC4_SetConfig+0x118>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d113      	bne.n	8003638 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003616:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800361e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	019b      	lsls	r3, r3, #6
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40013400 	.word	0x40013400
 8003668:	40015000 	.word	0x40015000
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800

08003678 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a19      	ldr	r2, [pc, #100]	; (8003734 <TIM_OC5_SetConfig+0xbc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <TIM_OC5_SetConfig+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a18      	ldr	r2, [pc, #96]	; (8003738 <TIM_OC5_SetConfig+0xc0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00f      	beq.n	80036fa <TIM_OC5_SetConfig+0x82>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a17      	ldr	r2, [pc, #92]	; (800373c <TIM_OC5_SetConfig+0xc4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00b      	beq.n	80036fa <TIM_OC5_SetConfig+0x82>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a16      	ldr	r2, [pc, #88]	; (8003740 <TIM_OC5_SetConfig+0xc8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_OC5_SetConfig+0x82>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <TIM_OC5_SetConfig+0xcc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_OC5_SetConfig+0x82>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <TIM_OC5_SetConfig+0xd0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d109      	bne.n	800370e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003700:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40013400 	.word	0x40013400
 800373c:	40014000 	.word	0x40014000
 8003740:	40014400 	.word	0x40014400
 8003744:	40014800 	.word	0x40014800
 8003748:	40015000 	.word	0x40015000

0800374c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	051b      	lsls	r3, r3, #20
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a1a      	ldr	r2, [pc, #104]	; (800380c <TIM_OC6_SetConfig+0xc0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <TIM_OC6_SetConfig+0x84>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a19      	ldr	r2, [pc, #100]	; (8003810 <TIM_OC6_SetConfig+0xc4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00f      	beq.n	80037d0 <TIM_OC6_SetConfig+0x84>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a18      	ldr	r2, [pc, #96]	; (8003814 <TIM_OC6_SetConfig+0xc8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_OC6_SetConfig+0x84>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a17      	ldr	r2, [pc, #92]	; (8003818 <TIM_OC6_SetConfig+0xcc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_OC6_SetConfig+0x84>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a16      	ldr	r2, [pc, #88]	; (800381c <TIM_OC6_SetConfig+0xd0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_OC6_SetConfig+0x84>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <TIM_OC6_SetConfig+0xd4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d109      	bne.n	80037e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	029b      	lsls	r3, r3, #10
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40013400 	.word	0x40013400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800
 8003820:	40015000 	.word	0x40015000

08003824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	2201      	movs	r2, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	431a      	orrs	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_TIMEx_PWMN_Start+0x24>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e022      	b.n	80038da <HAL_TIMEx_PWMN_Start+0x6a>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b04      	cmp	r3, #4
 8003898:	d109      	bne.n	80038ae <HAL_TIMEx_PWMN_Start+0x3e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e015      	b.n	80038da <HAL_TIMEx_PWMN_Start+0x6a>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d109      	bne.n	80038c8 <HAL_TIMEx_PWMN_Start+0x58>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e008      	b.n	80038da <HAL_TIMEx_PWMN_Start+0x6a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e073      	b.n	80039ca <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d104      	bne.n	80038f2 <HAL_TIMEx_PWMN_Start+0x82>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f0:	e013      	b.n	800391a <HAL_TIMEx_PWMN_Start+0xaa>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d104      	bne.n	8003902 <HAL_TIMEx_PWMN_Start+0x92>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003900:	e00b      	b.n	800391a <HAL_TIMEx_PWMN_Start+0xaa>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d104      	bne.n	8003912 <HAL_TIMEx_PWMN_Start+0xa2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003910:	e003      	b.n	800391a <HAL_TIMEx_PWMN_Start+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2204      	movs	r2, #4
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa1f 	bl	8003d66 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003936:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <HAL_TIMEx_PWMN_Start+0x164>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x118>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d01d      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x118>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <HAL_TIMEx_PWMN_Start+0x168>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x118>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a20      	ldr	r2, [pc, #128]	; (80039dc <HAL_TIMEx_PWMN_Start+0x16c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x118>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <HAL_TIMEx_PWMN_Start+0x170>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x118>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <HAL_TIMEx_PWMN_Start+0x174>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x118>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <HAL_TIMEx_PWMN_Start+0x178>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_TIMEx_PWMN_Start+0x118>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <HAL_TIMEx_PWMN_Start+0x17c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d115      	bne.n	80039b4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <HAL_TIMEx_PWMN_Start+0x180>)
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b06      	cmp	r3, #6
 8003998:	d015      	beq.n	80039c6 <HAL_TIMEx_PWMN_Start+0x156>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d011      	beq.n	80039c6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b2:	e008      	b.n	80039c6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e000      	b.n	80039c8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40013400 	.word	0x40013400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40015000 	.word	0x40015000
 80039f0:	00010007 	.word	0x00010007

080039f4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f9ad 	bl	8003d66 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a1a      	ldr	r2, [r3, #32]
 8003a12:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10f      	bne.n	8003a3c <HAL_TIMEx_PWMN_Stop+0x48>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a1a      	ldr	r2, [r3, #32]
 8003a22:	f244 4344 	movw	r3, #17476	; 0x4444
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIMEx_PWMN_Stop+0x48>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <HAL_TIMEx_PWMN_Stop+0x78>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6a1a      	ldr	r2, [r3, #32]
 8003a52:	f244 4344 	movw	r3, #17476	; 0x4444
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_TIMEx_PWMN_Stop+0x78>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <HAL_TIMEx_PWMN_Stop+0x88>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7a:	e013      	b.n	8003aa4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d104      	bne.n	8003a8c <HAL_TIMEx_PWMN_Stop+0x98>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a8a:	e00b      	b.n	8003aa4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d104      	bne.n	8003a9c <HAL_TIMEx_PWMN_Stop+0xa8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a9a:	e003      	b.n	8003aa4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e074      	b.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a34      	ldr	r2, [pc, #208]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a21      	ldr	r2, [pc, #132]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d01d      	beq.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a11      	ldr	r2, [pc, #68]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d10c      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40015000 	.word	0x40015000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40014000 	.word	0x40014000

08003bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e096      	b.n	8003d26 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2d      	ldr	r2, [pc, #180]	; (8003d38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d106      	bne.n	8003c9e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a24      	ldr	r2, [pc, #144]	; (8003d34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d12b      	bne.n	8003d14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	051b      	lsls	r3, r3, #20
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d106      	bne.n	8003d14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40013400 	.word	0x40013400
 8003d3c:	40015000 	.word	0x40015000

08003d40 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b087      	sub	sp, #28
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2204      	movs	r2, #4
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	401a      	ands	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	621a      	str	r2, [r3, #32]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e042      	b.n	8003e48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fd f959 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2224      	movs	r2, #36	; 0x24
 8003dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fc50 	bl	8004698 <UART_SetConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e022      	b.n	8003e48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 ff40 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 ffc7 	bl	8004dd4 <UART_CheckIdleState>
 8003e46:	4603      	mov	r3, r0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	f040 8083 	bne.w	8003f72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_UART_Transmit+0x28>
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e07b      	b.n	8003f74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Transmit+0x3a>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e074      	b.n	8003f74 <HAL_UART_Transmit+0x124>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2221      	movs	r2, #33	; 0x21
 8003e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea2:	f7fd f9e1 	bl	8001268 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	88fa      	ldrh	r2, [r7, #6]
 8003eb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	d108      	bne.n	8003ed4 <HAL_UART_Transmit+0x84>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ee4:	e02c      	b.n	8003f40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2200      	movs	r2, #0
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 ffba 	bl	8004e6a <UART_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e039      	b.n	8003f74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e007      	b.n	8003f2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1cc      	bne.n	8003ee6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2200      	movs	r2, #0
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 ff87 	bl	8004e6a <UART_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e006      	b.n	8003f74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d142      	bne.n	800401a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_UART_Receive_IT+0x24>
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e03b      	b.n	800401c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Receive_IT+0x36>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e034      	b.n	800401c <HAL_UART_Receive_IT+0xa0>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_UART_Receive_IT+0xa8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01f      	beq.n	800400a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d018      	beq.n	800400a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	623b      	str	r3, [r7, #32]
 8003ff8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	69f9      	ldr	r1, [r7, #28]
 8003ffc:	6a3a      	ldr	r2, [r7, #32]
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	61bb      	str	r3, [r7, #24]
   return(result);
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e6      	bne.n	8003fd8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	461a      	mov	r2, r3
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fff3 	bl	8004ffc <UART_Start_Receive_IT>
 8004016:	4603      	mov	r3, r0
 8004018:	e000      	b.n	800401c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3728      	adds	r7, #40	; 0x28
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40008000 	.word	0x40008000

08004028 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b0ba      	sub	sp, #232	; 0xe8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800404e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004052:	f640 030f 	movw	r3, #2063	; 0x80f
 8004056:	4013      	ands	r3, r2
 8004058:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800405c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11b      	bne.n	800409c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800407c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 82d6 	beq.w	800463e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
      }
      return;
 800409a:	e2d0      	b.n	800463e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800409c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 811f 	beq.w	80042e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80040a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80040aa:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <HAL_UART_IRQHandler+0x2b0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80040b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040b6:	4b89      	ldr	r3, [pc, #548]	; (80042dc <HAL_UART_IRQHandler+0x2b4>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8112 	beq.w	80042e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d011      	beq.n	80040f0 <HAL_UART_IRQHandler+0xc8>
 80040cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2201      	movs	r2, #1
 80040de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d011      	beq.n	8004120 <HAL_UART_IRQHandler+0xf8>
 80040fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2202      	movs	r2, #2
 800410e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004116:	f043 0204 	orr.w	r2, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d011      	beq.n	8004150 <HAL_UART_IRQHandler+0x128>
 800412c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2204      	movs	r2, #4
 800413e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004146:	f043 0202 	orr.w	r2, r3, #2
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d017      	beq.n	800418c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004168:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800416c:	4b5a      	ldr	r3, [pc, #360]	; (80042d8 <HAL_UART_IRQHandler+0x2b0>)
 800416e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2208      	movs	r2, #8
 800417a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004182:	f043 0208 	orr.w	r2, r3, #8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800418c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004194:	2b00      	cmp	r3, #0
 8004196:	d012      	beq.n	80041be <HAL_UART_IRQHandler+0x196>
 8004198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00c      	beq.n	80041be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 823c 	beq.w	8004642 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d013      	beq.n	80041fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d005      	beq.n	8004222 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800421a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04f      	beq.n	80042c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f001 f814 	bl	8005250 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d141      	bne.n	80042ba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800424c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004262:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800426e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800427a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1d9      	bne.n	8004236 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d013      	beq.n	80042b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <HAL_UART_IRQHandler+0x2b8>)
 8004290:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd f97c 	bl	8001594 <HAL_DMA_Abort_IT>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d017      	beq.n	80042d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80042ac:	4610      	mov	r0, r2
 80042ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b0:	e00f      	b.n	80042d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f9da 	bl	800466c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b8:	e00b      	b.n	80042d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f9d6 	bl	800466c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c0:	e007      	b.n	80042d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9d2 	bl	800466c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80042d0:	e1b7      	b.n	8004642 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d2:	bf00      	nop
    return;
 80042d4:	e1b5      	b.n	8004642 <HAL_UART_IRQHandler+0x61a>
 80042d6:	bf00      	nop
 80042d8:	10000001 	.word	0x10000001
 80042dc:	04000120 	.word	0x04000120
 80042e0:	0800531d 	.word	0x0800531d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	f040 814a 	bne.w	8004582 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8143 	beq.w	8004582 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 813c 	beq.w	8004582 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2210      	movs	r2, #16
 8004310:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	f040 80b5 	bne.w	800448c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800432e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8187 	beq.w	8004646 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800433e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004342:	429a      	cmp	r2, r3
 8004344:	f080 817f 	bcs.w	8004646 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800434e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 8086 	bne.w	8004470 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800437c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800438e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004392:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800439a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1da      	bne.n	8004364 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3308      	adds	r3, #8
 80043b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e1      	bne.n	80043ae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3308      	adds	r3, #8
 80043f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800440e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800441c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e3      	bne.n	80043ea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004440:	f023 0310 	bic.w	r3, r3, #16
 8004444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004452:	65bb      	str	r3, [r7, #88]	; 0x58
 8004454:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e4      	bne.n	8004430 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd f839 	bl	80014e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800447c:	b29b      	uxth	r3, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	b29b      	uxth	r3, r3
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f8fb 	bl	8004680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800448a:	e0dc      	b.n	8004646 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004498:	b29b      	uxth	r3, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80ce 	beq.w	800464a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80044ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80c9 	beq.w	800464a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044da:	647b      	str	r3, [r7, #68]	; 0x44
 80044dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e4      	bne.n	80044b8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3308      	adds	r3, #8
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	623b      	str	r3, [r7, #32]
   return(result);
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3308      	adds	r3, #8
 8004512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004516:	633a      	str	r2, [r7, #48]	; 0x30
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e1      	bne.n	80044ee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	60fb      	str	r3, [r7, #12]
   return(result);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0310 	bic.w	r3, r3, #16
 8004552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	69b9      	ldr	r1, [r7, #24]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	617b      	str	r3, [r7, #20]
   return(result);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e4      	bne.n	800453e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f880 	bl	8004680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004580:	e063      	b.n	800464a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00e      	beq.n	80045ac <HAL_UART_IRQHandler+0x584>
 800458e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fb57 	bl	8005c58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045aa:	e051      	b.n	8004650 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80045ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d014      	beq.n	80045e2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80045b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80045c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d03a      	beq.n	800464e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
    }
    return;
 80045e0:	e035      	b.n	800464e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_UART_IRQHandler+0x5da>
 80045ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fea4 	bl	8005348 <UART_EndTransmit_IT>
    return;
 8004600:	e026      	b.n	8004650 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_UART_IRQHandler+0x5fa>
 800460e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004612:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 fb30 	bl	8005c80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004620:	e016      	b.n	8004650 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d010      	beq.n	8004650 <HAL_UART_IRQHandler+0x628>
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004632:	2b00      	cmp	r3, #0
 8004634:	da0c      	bge.n	8004650 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 fb18 	bl	8005c6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800463c:	e008      	b.n	8004650 <HAL_UART_IRQHandler+0x628>
      return;
 800463e:	bf00      	nop
 8004640:	e006      	b.n	8004650 <HAL_UART_IRQHandler+0x628>
    return;
 8004642:	bf00      	nop
 8004644:	e004      	b.n	8004650 <HAL_UART_IRQHandler+0x628>
      return;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <HAL_UART_IRQHandler+0x628>
      return;
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <HAL_UART_IRQHandler+0x628>
    return;
 800464e:	bf00      	nop
  }
}
 8004650:	37e8      	adds	r7, #232	; 0xe8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop

08004658 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800469c:	b08c      	sub	sp, #48	; 0x30
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4313      	orrs	r3, r2
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4baa      	ldr	r3, [pc, #680]	; (8004970 <UART_SetConfig+0x2d8>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a9f      	ldr	r2, [pc, #636]	; (8004974 <UART_SetConfig+0x2dc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004700:	4313      	orrs	r3, r2
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800470e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004718:	430b      	orrs	r3, r1
 800471a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	f023 010f 	bic.w	r1, r3, #15
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a90      	ldr	r2, [pc, #576]	; (8004978 <UART_SetConfig+0x2e0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d125      	bne.n	8004788 <UART_SetConfig+0xf0>
 800473c:	4b8f      	ldr	r3, [pc, #572]	; (800497c <UART_SetConfig+0x2e4>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b03      	cmp	r3, #3
 8004748:	d81a      	bhi.n	8004780 <UART_SetConfig+0xe8>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0xb8>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004761 	.word	0x08004761
 8004754:	08004771 	.word	0x08004771
 8004758:	08004769 	.word	0x08004769
 800475c:	08004779 	.word	0x08004779
 8004760:	2301      	movs	r3, #1
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004766:	e116      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004768:	2302      	movs	r3, #2
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476e:	e112      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004770:	2304      	movs	r3, #4
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004776:	e10e      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004778:	2308      	movs	r3, #8
 800477a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800477e:	e10a      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004780:	2310      	movs	r3, #16
 8004782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004786:	e106      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7c      	ldr	r2, [pc, #496]	; (8004980 <UART_SetConfig+0x2e8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d138      	bne.n	8004804 <UART_SetConfig+0x16c>
 8004792:	4b7a      	ldr	r3, [pc, #488]	; (800497c <UART_SetConfig+0x2e4>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d82d      	bhi.n	80047fc <UART_SetConfig+0x164>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x110>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	080047fd 	.word	0x080047fd
 80047b0:	080047fd 	.word	0x080047fd
 80047b4:	080047fd 	.word	0x080047fd
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	080047fd 	.word	0x080047fd
 80047c0:	080047fd 	.word	0x080047fd
 80047c4:	080047fd 	.word	0x080047fd
 80047c8:	080047e5 	.word	0x080047e5
 80047cc:	080047fd 	.word	0x080047fd
 80047d0:	080047fd 	.word	0x080047fd
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	080047f5 	.word	0x080047f5
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e2:	e0d8      	b.n	8004996 <UART_SetConfig+0x2fe>
 80047e4:	2302      	movs	r3, #2
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ea:	e0d4      	b.n	8004996 <UART_SetConfig+0x2fe>
 80047ec:	2304      	movs	r3, #4
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f2:	e0d0      	b.n	8004996 <UART_SetConfig+0x2fe>
 80047f4:	2308      	movs	r3, #8
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fa:	e0cc      	b.n	8004996 <UART_SetConfig+0x2fe>
 80047fc:	2310      	movs	r3, #16
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e0c8      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <UART_SetConfig+0x2ec>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d125      	bne.n	800485a <UART_SetConfig+0x1c2>
 800480e:	4b5b      	ldr	r3, [pc, #364]	; (800497c <UART_SetConfig+0x2e4>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004818:	2b30      	cmp	r3, #48	; 0x30
 800481a:	d016      	beq.n	800484a <UART_SetConfig+0x1b2>
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d818      	bhi.n	8004852 <UART_SetConfig+0x1ba>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d00a      	beq.n	800483a <UART_SetConfig+0x1a2>
 8004824:	2b20      	cmp	r3, #32
 8004826:	d814      	bhi.n	8004852 <UART_SetConfig+0x1ba>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <UART_SetConfig+0x19a>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d008      	beq.n	8004842 <UART_SetConfig+0x1aa>
 8004830:	e00f      	b.n	8004852 <UART_SetConfig+0x1ba>
 8004832:	2300      	movs	r3, #0
 8004834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004838:	e0ad      	b.n	8004996 <UART_SetConfig+0x2fe>
 800483a:	2302      	movs	r3, #2
 800483c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004840:	e0a9      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004842:	2304      	movs	r3, #4
 8004844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004848:	e0a5      	b.n	8004996 <UART_SetConfig+0x2fe>
 800484a:	2308      	movs	r3, #8
 800484c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004850:	e0a1      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004852:	2310      	movs	r3, #16
 8004854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004858:	e09d      	b.n	8004996 <UART_SetConfig+0x2fe>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a4a      	ldr	r2, [pc, #296]	; (8004988 <UART_SetConfig+0x2f0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d125      	bne.n	80048b0 <UART_SetConfig+0x218>
 8004864:	4b45      	ldr	r3, [pc, #276]	; (800497c <UART_SetConfig+0x2e4>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800486e:	2bc0      	cmp	r3, #192	; 0xc0
 8004870:	d016      	beq.n	80048a0 <UART_SetConfig+0x208>
 8004872:	2bc0      	cmp	r3, #192	; 0xc0
 8004874:	d818      	bhi.n	80048a8 <UART_SetConfig+0x210>
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d00a      	beq.n	8004890 <UART_SetConfig+0x1f8>
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d814      	bhi.n	80048a8 <UART_SetConfig+0x210>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <UART_SetConfig+0x1f0>
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d008      	beq.n	8004898 <UART_SetConfig+0x200>
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x210>
 8004888:	2300      	movs	r3, #0
 800488a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488e:	e082      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004890:	2302      	movs	r3, #2
 8004892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004896:	e07e      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489e:	e07a      	b.n	8004996 <UART_SetConfig+0x2fe>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a6:	e076      	b.n	8004996 <UART_SetConfig+0x2fe>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ae:	e072      	b.n	8004996 <UART_SetConfig+0x2fe>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a35      	ldr	r2, [pc, #212]	; (800498c <UART_SetConfig+0x2f4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d12a      	bne.n	8004910 <UART_SetConfig+0x278>
 80048ba:	4b30      	ldr	r3, [pc, #192]	; (800497c <UART_SetConfig+0x2e4>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c8:	d01a      	beq.n	8004900 <UART_SetConfig+0x268>
 80048ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ce:	d81b      	bhi.n	8004908 <UART_SetConfig+0x270>
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d4:	d00c      	beq.n	80048f0 <UART_SetConfig+0x258>
 80048d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048da:	d815      	bhi.n	8004908 <UART_SetConfig+0x270>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <UART_SetConfig+0x250>
 80048e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e4:	d008      	beq.n	80048f8 <UART_SetConfig+0x260>
 80048e6:	e00f      	b.n	8004908 <UART_SetConfig+0x270>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ee:	e052      	b.n	8004996 <UART_SetConfig+0x2fe>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f6:	e04e      	b.n	8004996 <UART_SetConfig+0x2fe>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fe:	e04a      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004906:	e046      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490e:	e042      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a17      	ldr	r2, [pc, #92]	; (8004974 <UART_SetConfig+0x2dc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d13a      	bne.n	8004990 <UART_SetConfig+0x2f8>
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <UART_SetConfig+0x2e4>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004928:	d01a      	beq.n	8004960 <UART_SetConfig+0x2c8>
 800492a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800492e:	d81b      	bhi.n	8004968 <UART_SetConfig+0x2d0>
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004934:	d00c      	beq.n	8004950 <UART_SetConfig+0x2b8>
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493a:	d815      	bhi.n	8004968 <UART_SetConfig+0x2d0>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <UART_SetConfig+0x2b0>
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d008      	beq.n	8004958 <UART_SetConfig+0x2c0>
 8004946:	e00f      	b.n	8004968 <UART_SetConfig+0x2d0>
 8004948:	2300      	movs	r3, #0
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494e:	e022      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004950:	2302      	movs	r3, #2
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004956:	e01e      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004958:	2304      	movs	r3, #4
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495e:	e01a      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004960:	2308      	movs	r3, #8
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004966:	e016      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004968:	2310      	movs	r3, #16
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496e:	e012      	b.n	8004996 <UART_SetConfig+0x2fe>
 8004970:	cfff69f3 	.word	0xcfff69f3
 8004974:	40008000 	.word	0x40008000
 8004978:	40013800 	.word	0x40013800
 800497c:	40021000 	.word	0x40021000
 8004980:	40004400 	.word	0x40004400
 8004984:	40004800 	.word	0x40004800
 8004988:	40004c00 	.word	0x40004c00
 800498c:	40005000 	.word	0x40005000
 8004990:	2310      	movs	r3, #16
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4aae      	ldr	r2, [pc, #696]	; (8004c54 <UART_SetConfig+0x5bc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	f040 8097 	bne.w	8004ad0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d823      	bhi.n	80049f2 <UART_SetConfig+0x35a>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x318>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049f3 	.word	0x080049f3
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049f3 	.word	0x080049f3
 80049c0:	080049e3 	.word	0x080049e3
 80049c4:	080049f3 	.word	0x080049f3
 80049c8:	080049f3 	.word	0x080049f3
 80049cc:	080049f3 	.word	0x080049f3
 80049d0:	080049eb 	.word	0x080049eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fd fd7a 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 80049d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049da:	e010      	b.n	80049fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049dc:	4b9e      	ldr	r3, [pc, #632]	; (8004c58 <UART_SetConfig+0x5c0>)
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049e0:	e00d      	b.n	80049fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e2:	f7fd fd05 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049e8:	e009      	b.n	80049fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049f0:	e005      	b.n	80049fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8130 	beq.w	8004c66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	4a94      	ldr	r2, [pc, #592]	; (8004c5c <UART_SetConfig+0x5c4>)
 8004a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a10:	461a      	mov	r2, r3
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d305      	bcc.n	8004a36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d903      	bls.n	8004a3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a3c:	e113      	b.n	8004c66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	2200      	movs	r2, #0
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	60fa      	str	r2, [r7, #12]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	4a84      	ldr	r2, [pc, #528]	; (8004c5c <UART_SetConfig+0x5c4>)
 8004a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2200      	movs	r2, #0
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a60:	f7fb fc46 	bl	80002f0 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	020b      	lsls	r3, r1, #8
 8004a76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a7a:	0202      	lsls	r2, r0, #8
 8004a7c:	6979      	ldr	r1, [r7, #20]
 8004a7e:	6849      	ldr	r1, [r1, #4]
 8004a80:	0849      	lsrs	r1, r1, #1
 8004a82:	2000      	movs	r0, #0
 8004a84:	460c      	mov	r4, r1
 8004a86:	4605      	mov	r5, r0
 8004a88:	eb12 0804 	adds.w	r8, r2, r4
 8004a8c:	eb43 0905 	adc.w	r9, r3, r5
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	469a      	mov	sl, r3
 8004a98:	4693      	mov	fp, r2
 8004a9a:	4652      	mov	r2, sl
 8004a9c:	465b      	mov	r3, fp
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	f7fb fc25 	bl	80002f0 <__aeabi_uldivmod>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4613      	mov	r3, r2
 8004aac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab4:	d308      	bcc.n	8004ac8 <UART_SetConfig+0x430>
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abc:	d204      	bcs.n	8004ac8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e0ce      	b.n	8004c66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ace:	e0ca      	b.n	8004c66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad8:	d166      	bne.n	8004ba8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d827      	bhi.n	8004b32 <UART_SetConfig+0x49a>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x450>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b23 	.word	0x08004b23
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b33 	.word	0x08004b33
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fd fcde 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8004b10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b12:	e014      	b.n	8004b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7fd fcf0 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b1a:	e010      	b.n	8004b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b4e      	ldr	r3, [pc, #312]	; (8004c58 <UART_SetConfig+0x5c0>)
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b20:	e00d      	b.n	8004b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7fd fc65 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8004b26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b28:	e009      	b.n	8004b3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b30:	e005      	b.n	8004b3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8090 	beq.w	8004c66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	4a44      	ldr	r2, [pc, #272]	; (8004c5c <UART_SetConfig+0x5c4>)
 8004b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b58:	005a      	lsls	r2, r3, #1
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	441a      	add	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	d916      	bls.n	8004ba0 <UART_SetConfig+0x508>
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d212      	bcs.n	8004ba0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f023 030f 	bic.w	r3, r3, #15
 8004b82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	8bfb      	ldrh	r3, [r7, #30]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	8bfa      	ldrh	r2, [r7, #30]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	e062      	b.n	8004c66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ba6:	e05e      	b.n	8004c66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d828      	bhi.n	8004c02 <UART_SetConfig+0x56a>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x520>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004bed 	.word	0x08004bed
 8004bc4:	08004c03 	.word	0x08004c03
 8004bc8:	08004bf3 	.word	0x08004bf3
 8004bcc:	08004c03 	.word	0x08004c03
 8004bd0:	08004c03 	.word	0x08004c03
 8004bd4:	08004c03 	.word	0x08004c03
 8004bd8:	08004bfb 	.word	0x08004bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fd fc76 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8004be0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004be2:	e014      	b.n	8004c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be4:	f7fd fc88 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
 8004be8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bea:	e010      	b.n	8004c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bec:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <UART_SetConfig+0x5c0>)
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bf0:	e00d      	b.n	8004c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf2:	f7fd fbfd 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bf8:	e009      	b.n	8004c0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c00:	e005      	b.n	8004c0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d028      	beq.n	8004c66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <UART_SetConfig+0x5c4>)
 8004c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	441a      	add	r2, r3
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	d910      	bls.n	8004c60 <UART_SetConfig+0x5c8>
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c44:	d20c      	bcs.n	8004c60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60da      	str	r2, [r3, #12]
 8004c50:	e009      	b.n	8004c66 <UART_SetConfig+0x5ce>
 8004c52:	bf00      	nop
 8004c54:	40008000 	.word	0x40008000
 8004c58:	00f42400 	.word	0x00f42400
 8004c5c:	080071b0 	.word	0x080071b0
      }
      else
      {
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004c82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3730      	adds	r7, #48	; 0x30
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d10a      	bne.n	8004da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de4:	f7fc fa40 	bl	8001268 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d10e      	bne.n	8004e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f82f 	bl	8004e6a <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e025      	b.n	8004e62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d10e      	bne.n	8004e42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f819 	bl	8004e6a <UART_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e00f      	b.n	8004e62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b09c      	sub	sp, #112	; 0x70
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	4613      	mov	r3, r2
 8004e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7a:	e0a9      	b.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	f000 80a5 	beq.w	8004fd0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fc f9ef 	bl	8001268 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d140      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ebc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e6      	bne.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3308      	adds	r3, #8
 8004eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eee:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ef0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e069      	b.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d051      	beq.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3a:	d149      	bne.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
 8004f66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e6      	bne.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	613b      	str	r3, [r7, #16]
   return(result);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f98:	623a      	str	r2, [r7, #32]
 8004f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	69f9      	ldr	r1, [r7, #28]
 8004f9e:	6a3a      	ldr	r2, [r7, #32]
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e5      	bne.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e010      	b.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	f43f af46 	beq.w	8004e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3770      	adds	r7, #112	; 0x70
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b0a3      	sub	sp, #140	; 0x8c
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	d10e      	bne.n	800504e <UART_Start_Receive_IT+0x52>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d105      	bne.n	8005044 <UART_Start_Receive_IT+0x48>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800503e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005042:	e02d      	b.n	80050a0 <UART_Start_Receive_IT+0xa4>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	22ff      	movs	r2, #255	; 0xff
 8005048:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800504c:	e028      	b.n	80050a0 <UART_Start_Receive_IT+0xa4>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <UART_Start_Receive_IT+0x76>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <UART_Start_Receive_IT+0x6c>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	22ff      	movs	r2, #255	; 0xff
 8005062:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005066:	e01b      	b.n	80050a0 <UART_Start_Receive_IT+0xa4>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	227f      	movs	r2, #127	; 0x7f
 800506c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005070:	e016      	b.n	80050a0 <UART_Start_Receive_IT+0xa4>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800507a:	d10d      	bne.n	8005098 <UART_Start_Receive_IT+0x9c>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d104      	bne.n	800508e <UART_Start_Receive_IT+0x92>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	227f      	movs	r2, #127	; 0x7f
 8005088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800508c:	e008      	b.n	80050a0 <UART_Start_Receive_IT+0xa4>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	223f      	movs	r2, #63	; 0x3f
 8005092:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005096:	e003      	b.n	80050a0 <UART_Start_Receive_IT+0xa4>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2222      	movs	r2, #34	; 0x22
 80050ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3308      	adds	r3, #8
 80050b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80050c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80050d4:	673a      	str	r2, [r7, #112]	; 0x70
 80050d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80050da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80050e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e3      	bne.n	80050b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f0:	d153      	bne.n	800519a <UART_Start_Receive_IT+0x19e>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80050f8:	88fa      	ldrh	r2, [r7, #6]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d34d      	bcc.n	800519a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d107      	bne.n	8005118 <UART_Start_Receive_IT+0x11c>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a4b      	ldr	r2, [pc, #300]	; (8005240 <UART_Start_Receive_IT+0x244>)
 8005114:	671a      	str	r2, [r3, #112]	; 0x70
 8005116:	e002      	b.n	800511e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a4a      	ldr	r2, [pc, #296]	; (8005244 <UART_Start_Receive_IT+0x248>)
 800511c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01a      	beq.n	8005164 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800513c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005142:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005152:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005156:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800515e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e4      	bne.n	800512e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3308      	adds	r3, #8
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3308      	adds	r3, #8
 8005182:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005184:	64ba      	str	r2, [r7, #72]	; 0x48
 8005186:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800518a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e5      	bne.n	8005164 <UART_Start_Receive_IT+0x168>
 8005198:	e04a      	b.n	8005230 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a2:	d107      	bne.n	80051b4 <UART_Start_Receive_IT+0x1b8>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d103      	bne.n	80051b4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a26      	ldr	r2, [pc, #152]	; (8005248 <UART_Start_Receive_IT+0x24c>)
 80051b0:	671a      	str	r2, [r3, #112]	; 0x70
 80051b2:	e002      	b.n	80051ba <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a25      	ldr	r2, [pc, #148]	; (800524c <UART_Start_Receive_IT+0x250>)
 80051b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d019      	beq.n	80051fe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80051de:	677b      	str	r3, [r7, #116]	; 0x74
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e6      	bne.n	80051ca <UART_Start_Receive_IT+0x1ce>
 80051fc:	e018      	b.n	8005230 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	613b      	str	r3, [r7, #16]
   return(result);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f043 0320 	orr.w	r3, r3, #32
 8005212:	67bb      	str	r3, [r7, #120]	; 0x78
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800521c:	623b      	str	r3, [r7, #32]
 800521e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	69f9      	ldr	r1, [r7, #28]
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	61bb      	str	r3, [r7, #24]
   return(result);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e6      	bne.n	80051fe <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	378c      	adds	r7, #140	; 0x8c
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	08005959 	.word	0x08005959
 8005244:	08005661 	.word	0x08005661
 8005248:	080054ff 	.word	0x080054ff
 800524c:	0800539f 	.word	0x0800539f

08005250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b095      	sub	sp, #84	; 0x54
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800526c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005276:	643b      	str	r3, [r7, #64]	; 0x40
 8005278:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800527c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	61fb      	str	r3, [r7, #28]
   return(result);
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e3      	bne.n	800528a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d118      	bne.n	80052fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f023 0310 	bic.w	r3, r3, #16
 80052de:	647b      	str	r3, [r7, #68]	; 0x44
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6979      	ldr	r1, [r7, #20]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	613b      	str	r3, [r7, #16]
   return(result);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e6      	bne.n	80052ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005310:	bf00      	nop
 8005312:	3754      	adds	r7, #84	; 0x54
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff f996 	bl	800466c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	60bb      	str	r3, [r7, #8]
   return(result);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6979      	ldr	r1, [r7, #20]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	613b      	str	r3, [r7, #16]
   return(result);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff f961 	bl	8004658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005396:	bf00      	nop
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b096      	sub	sp, #88	; 0x58
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80053ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	2b22      	cmp	r3, #34	; 0x22
 80053b8:	f040 8095 	bne.w	80054e6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053c6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80053ca:	b2d9      	uxtb	r1, r3
 80053cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	400a      	ands	r2, r1
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d178      	bne.n	80054f6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
 8005424:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e6      	bne.n	8005404 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	623b      	str	r3, [r7, #32]
   return(result);
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3308      	adds	r3, #8
 8005454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005456:	633a      	str	r2, [r7, #48]	; 0x30
 8005458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800545c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e5      	bne.n	8005436 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d12e      	bne.n	80054de <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	60fb      	str	r3, [r7, #12]
   return(result);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0310 	bic.w	r3, r3, #16
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	69b9      	ldr	r1, [r7, #24]
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	617b      	str	r3, [r7, #20]
   return(result);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d103      	bne.n	80054ce <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2210      	movs	r2, #16
 80054cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff f8d2 	bl	8004680 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054dc:	e00b      	b.n	80054f6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fb fae8 	bl	8000ab4 <HAL_UART_RxCpltCallback>
}
 80054e4:	e007      	b.n	80054f6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0208 	orr.w	r2, r2, #8
 80054f4:	619a      	str	r2, [r3, #24]
}
 80054f6:	bf00      	nop
 80054f8:	3758      	adds	r7, #88	; 0x58
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b096      	sub	sp, #88	; 0x58
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800550c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	2b22      	cmp	r3, #34	; 0x22
 8005518:	f040 8095 	bne.w	8005646 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800552c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005530:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005534:	4013      	ands	r3, r2
 8005536:	b29a      	uxth	r2, r3
 8005538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005540:	1c9a      	adds	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d178      	bne.n	8005656 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005582:	643b      	str	r3, [r7, #64]	; 0x40
 8005584:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e6      	bne.n	8005564 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d12e      	bne.n	800563e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f023 0310 	bic.w	r3, r3, #16
 80055fa:	647b      	str	r3, [r7, #68]	; 0x44
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	461a      	mov	r2, r3
 8005602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6979      	ldr	r1, [r7, #20]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	613b      	str	r3, [r7, #16]
   return(result);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e6      	bne.n	80055e6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b10      	cmp	r3, #16
 8005624:	d103      	bne.n	800562e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2210      	movs	r2, #16
 800562c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff f822 	bl	8004680 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800563c:	e00b      	b.n	8005656 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fb fa38 	bl	8000ab4 <HAL_UART_RxCpltCallback>
}
 8005644:	e007      	b.n	8005656 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699a      	ldr	r2, [r3, #24]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0208 	orr.w	r2, r2, #8
 8005654:	619a      	str	r2, [r3, #24]
}
 8005656:	bf00      	nop
 8005658:	3758      	adds	r7, #88	; 0x58
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b0a6      	sub	sp, #152	; 0x98
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800566e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	2b22      	cmp	r3, #34	; 0x22
 8005698:	f040 814f 	bne.w	800593a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056a6:	e0f6      	b.n	8005896 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056b2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80056b6:	b2d9      	uxtb	r1, r3
 80056b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	400a      	ands	r2, r1
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d053      	beq.n	80057a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d011      	beq.n	800572a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800570a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005720:	f043 0201 	orr.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800572a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2202      	movs	r2, #2
 8005748:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005750:	f043 0204 	orr.w	r2, r3, #4
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d011      	beq.n	800578a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005766:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2204      	movs	r2, #4
 8005778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005780:	f043 0202 	orr.w	r2, r3, #2
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d006      	beq.n	80057a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fe ff69 	bl	800466c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d173      	bne.n	8005896 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80057bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80057d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80057de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e4      	bne.n	80057ae <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80057f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005808:	657a      	str	r2, [r7, #84]	; 0x54
 800580a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800580e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e3      	bne.n	80057e4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800582e:	2b01      	cmp	r3, #1
 8005830:	d12e      	bne.n	8005890 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	67bb      	str	r3, [r7, #120]	; 0x78
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005856:	643b      	str	r3, [r7, #64]	; 0x40
 8005858:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800585c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e6      	bne.n	8005838 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b10      	cmp	r3, #16
 8005876:	d103      	bne.n	8005880 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2210      	movs	r2, #16
 800587e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fe fef9 	bl	8004680 <HAL_UARTEx_RxEventCallback>
 800588e:	e002      	b.n	8005896 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7fb f90f 	bl	8000ab4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005896:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <UART_RxISR_8BIT_FIFOEN+0x24c>
 800589e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f47f aefe 	bne.w	80056a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058b6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d045      	beq.n	800594a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80058c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d23e      	bcs.n	800594a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	61fb      	str	r3, [r7, #28]
   return(result);
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058e2:	673b      	str	r3, [r7, #112]	; 0x70
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80058ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a14      	ldr	r2, [pc, #80]	; (8005954 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005904:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	60bb      	str	r3, [r7, #8]
   return(result);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f043 0320 	orr.w	r3, r3, #32
 800591a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6979      	ldr	r1, [r7, #20]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	613b      	str	r3, [r7, #16]
   return(result);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e6      	bne.n	8005906 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005938:	e007      	b.n	800594a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0208 	orr.w	r2, r2, #8
 8005948:	619a      	str	r2, [r3, #24]
}
 800594a:	bf00      	nop
 800594c:	3798      	adds	r7, #152	; 0x98
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	0800539f 	.word	0x0800539f

08005958 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b0a8      	sub	sp, #160	; 0xa0
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005966:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	2b22      	cmp	r3, #34	; 0x22
 8005990:	f040 8153 	bne.w	8005c3a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800599a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800599e:	e0fa      	b.n	8005b96 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80059b2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80059b6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059ba:	4013      	ands	r3, r2
 80059bc:	b29a      	uxth	r2, r3
 80059be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	1c9a      	adds	r2, r3, #2
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d053      	beq.n	8005a9e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d011      	beq.n	8005a26 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2201      	movs	r2, #1
 8005a14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a1c:	f043 0201 	orr.w	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d011      	beq.n	8005a56 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2202      	movs	r2, #2
 8005a44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4c:	f043 0204 	orr.w	r2, r3, #4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d011      	beq.n	8005a86 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2204      	movs	r2, #4
 8005a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7c:	f043 0202 	orr.w	r2, r3, #2
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d006      	beq.n	8005a9e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fe fdeb 	bl	800466c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d175      	bne.n	8005b96 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ace:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ad2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e4      	bne.n	8005aaa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3308      	adds	r3, #8
 8005b04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b08:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e1      	bne.n	8005ae0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d12e      	bne.n	8005b90 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	f023 0310 	bic.w	r3, r3, #16
 8005b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b56:	647b      	str	r3, [r7, #68]	; 0x44
 8005b58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e6      	bne.n	8005b38 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d103      	bne.n	8005b80 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fe fd79 	bl	8004680 <HAL_UARTEx_RxEventCallback>
 8005b8e:	e002      	b.n	8005b96 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fa ff8f 	bl	8000ab4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b96:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d006      	beq.n	8005bac <UART_RxISR_16BIT_FIFOEN+0x254>
 8005b9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f47f aefa 	bne.w	80059a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bb2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005bb6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d045      	beq.n	8005c4a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005bc4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d23e      	bcs.n	8005c4a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	623b      	str	r3, [r7, #32]
   return(result);
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be2:	677b      	str	r3, [r7, #116]	; 0x74
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005bec:	633a      	str	r2, [r7, #48]	; 0x30
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e5      	bne.n	8005bcc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005c04:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f043 0320 	orr.w	r3, r3, #32
 8005c1a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	617b      	str	r3, [r7, #20]
   return(result);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e6      	bne.n	8005c06 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c38:	e007      	b.n	8005c4a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0208 	orr.w	r2, r2, #8
 8005c48:	619a      	str	r2, [r3, #24]
}
 8005c4a:	bf00      	nop
 8005c4c:	37a0      	adds	r7, #160	; 0xa0
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	080054ff 	.word	0x080054ff

08005c58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_UARTEx_DisableFifoMode+0x16>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e027      	b.n	8005cfa <HAL_UARTEx_DisableFifoMode+0x66>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2224      	movs	r2, #36	; 0x24
 8005cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e02d      	b.n	8005d7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2224      	movs	r2, #36	; 0x24
 8005d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f850 	bl	8005e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e02d      	b.n	8005df6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2224      	movs	r2, #36	; 0x24
 8005da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f812 	bl	8005e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d108      	bne.n	8005e22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e20:	e031      	b.n	8005e86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e22:	2308      	movs	r3, #8
 8005e24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e26:	2308      	movs	r3, #8
 8005e28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	0e5b      	lsrs	r3, r3, #25
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	0f5b      	lsrs	r3, r3, #29
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e4a:	7bbb      	ldrb	r3, [r7, #14]
 8005e4c:	7b3a      	ldrb	r2, [r7, #12]
 8005e4e:	4911      	ldr	r1, [pc, #68]	; (8005e94 <UARTEx_SetNbDataToProcess+0x94>)
 8005e50:	5c8a      	ldrb	r2, [r1, r2]
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e56:	7b3a      	ldrb	r2, [r7, #12]
 8005e58:	490f      	ldr	r1, [pc, #60]	; (8005e98 <UARTEx_SetNbDataToProcess+0x98>)
 8005e5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	7b7a      	ldrb	r2, [r7, #13]
 8005e6c:	4909      	ldr	r1, [pc, #36]	; (8005e94 <UARTEx_SetNbDataToProcess+0x94>)
 8005e6e:	5c8a      	ldrb	r2, [r1, r2]
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e74:	7b7a      	ldrb	r2, [r7, #13]
 8005e76:	4908      	ldr	r1, [pc, #32]	; (8005e98 <UARTEx_SetNbDataToProcess+0x98>)
 8005e78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	080071c8 	.word	0x080071c8
 8005e98:	080071d0 	.word	0x080071d0

08005e9c <atoi>:
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	f000 b910 	b.w	80060c4 <strtol>

08005ea4 <__errno>:
 8005ea4:	4b01      	ldr	r3, [pc, #4]	; (8005eac <__errno+0x8>)
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	200000a4 	.word	0x200000a4

08005eb0 <__libc_init_array>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	4d0d      	ldr	r5, [pc, #52]	; (8005ee8 <__libc_init_array+0x38>)
 8005eb4:	4c0d      	ldr	r4, [pc, #52]	; (8005eec <__libc_init_array+0x3c>)
 8005eb6:	1b64      	subs	r4, r4, r5
 8005eb8:	10a4      	asrs	r4, r4, #2
 8005eba:	2600      	movs	r6, #0
 8005ebc:	42a6      	cmp	r6, r4
 8005ebe:	d109      	bne.n	8005ed4 <__libc_init_array+0x24>
 8005ec0:	4d0b      	ldr	r5, [pc, #44]	; (8005ef0 <__libc_init_array+0x40>)
 8005ec2:	4c0c      	ldr	r4, [pc, #48]	; (8005ef4 <__libc_init_array+0x44>)
 8005ec4:	f001 f902 	bl	80070cc <_init>
 8005ec8:	1b64      	subs	r4, r4, r5
 8005eca:	10a4      	asrs	r4, r4, #2
 8005ecc:	2600      	movs	r6, #0
 8005ece:	42a6      	cmp	r6, r4
 8005ed0:	d105      	bne.n	8005ede <__libc_init_array+0x2e>
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed8:	4798      	blx	r3
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7ee      	b.n	8005ebc <__libc_init_array+0xc>
 8005ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee2:	4798      	blx	r3
 8005ee4:	3601      	adds	r6, #1
 8005ee6:	e7f2      	b.n	8005ece <__libc_init_array+0x1e>
 8005ee8:	08007428 	.word	0x08007428
 8005eec:	08007428 	.word	0x08007428
 8005ef0:	08007428 	.word	0x08007428
 8005ef4:	0800742c 	.word	0x0800742c

08005ef8 <memset>:
 8005ef8:	4402      	add	r2, r0
 8005efa:	4603      	mov	r3, r0
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d100      	bne.n	8005f02 <memset+0xa>
 8005f00:	4770      	bx	lr
 8005f02:	f803 1b01 	strb.w	r1, [r3], #1
 8005f06:	e7f9      	b.n	8005efc <memset+0x4>

08005f08 <strtok>:
 8005f08:	4b16      	ldr	r3, [pc, #88]	; (8005f64 <strtok+0x5c>)
 8005f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f0c:	681e      	ldr	r6, [r3, #0]
 8005f0e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005f10:	4605      	mov	r5, r0
 8005f12:	b9fc      	cbnz	r4, 8005f54 <strtok+0x4c>
 8005f14:	2050      	movs	r0, #80	; 0x50
 8005f16:	9101      	str	r1, [sp, #4]
 8005f18:	f000 f90e 	bl	8006138 <malloc>
 8005f1c:	9901      	ldr	r1, [sp, #4]
 8005f1e:	65b0      	str	r0, [r6, #88]	; 0x58
 8005f20:	4602      	mov	r2, r0
 8005f22:	b920      	cbnz	r0, 8005f2e <strtok+0x26>
 8005f24:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <strtok+0x60>)
 8005f26:	4811      	ldr	r0, [pc, #68]	; (8005f6c <strtok+0x64>)
 8005f28:	2157      	movs	r1, #87	; 0x57
 8005f2a:	f000 f8d5 	bl	80060d8 <__assert_func>
 8005f2e:	e9c0 4400 	strd	r4, r4, [r0]
 8005f32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005f36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005f3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005f3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005f42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005f46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005f4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005f4e:	6184      	str	r4, [r0, #24]
 8005f50:	7704      	strb	r4, [r0, #28]
 8005f52:	6244      	str	r4, [r0, #36]	; 0x24
 8005f54:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005f56:	2301      	movs	r3, #1
 8005f58:	4628      	mov	r0, r5
 8005f5a:	b002      	add	sp, #8
 8005f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f60:	f000 b806 	b.w	8005f70 <__strtok_r>
 8005f64:	200000a4 	.word	0x200000a4
 8005f68:	080071dc 	.word	0x080071dc
 8005f6c:	080071f3 	.word	0x080071f3

08005f70 <__strtok_r>:
 8005f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f72:	b908      	cbnz	r0, 8005f78 <__strtok_r+0x8>
 8005f74:	6810      	ldr	r0, [r2, #0]
 8005f76:	b188      	cbz	r0, 8005f9c <__strtok_r+0x2c>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005f80:	460f      	mov	r7, r1
 8005f82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005f86:	b91e      	cbnz	r6, 8005f90 <__strtok_r+0x20>
 8005f88:	b965      	cbnz	r5, 8005fa4 <__strtok_r+0x34>
 8005f8a:	6015      	str	r5, [r2, #0]
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	e005      	b.n	8005f9c <__strtok_r+0x2c>
 8005f90:	42b5      	cmp	r5, r6
 8005f92:	d1f6      	bne.n	8005f82 <__strtok_r+0x12>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1f0      	bne.n	8005f7a <__strtok_r+0xa>
 8005f98:	6014      	str	r4, [r2, #0]
 8005f9a:	7003      	strb	r3, [r0, #0]
 8005f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9e:	461c      	mov	r4, r3
 8005fa0:	e00c      	b.n	8005fbc <__strtok_r+0x4c>
 8005fa2:	b915      	cbnz	r5, 8005faa <__strtok_r+0x3a>
 8005fa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005fa8:	460e      	mov	r6, r1
 8005faa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005fae:	42ab      	cmp	r3, r5
 8005fb0:	d1f7      	bne.n	8005fa2 <__strtok_r+0x32>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f3      	beq.n	8005f9e <__strtok_r+0x2e>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005fbc:	6014      	str	r4, [r2, #0]
 8005fbe:	e7ed      	b.n	8005f9c <__strtok_r+0x2c>

08005fc0 <_strtol_l.constprop.0>:
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc6:	d001      	beq.n	8005fcc <_strtol_l.constprop.0+0xc>
 8005fc8:	2b24      	cmp	r3, #36	; 0x24
 8005fca:	d906      	bls.n	8005fda <_strtol_l.constprop.0+0x1a>
 8005fcc:	f7ff ff6a 	bl	8005ea4 <__errno>
 8005fd0:	2316      	movs	r3, #22
 8005fd2:	6003      	str	r3, [r0, #0]
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80060c0 <_strtol_l.constprop.0+0x100>
 8005fde:	460d      	mov	r5, r1
 8005fe0:	462e      	mov	r6, r5
 8005fe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fe6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005fea:	f017 0708 	ands.w	r7, r7, #8
 8005fee:	d1f7      	bne.n	8005fe0 <_strtol_l.constprop.0+0x20>
 8005ff0:	2c2d      	cmp	r4, #45	; 0x2d
 8005ff2:	d132      	bne.n	800605a <_strtol_l.constprop.0+0x9a>
 8005ff4:	782c      	ldrb	r4, [r5, #0]
 8005ff6:	2701      	movs	r7, #1
 8005ff8:	1cb5      	adds	r5, r6, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d05b      	beq.n	80060b6 <_strtol_l.constprop.0+0xf6>
 8005ffe:	2b10      	cmp	r3, #16
 8006000:	d109      	bne.n	8006016 <_strtol_l.constprop.0+0x56>
 8006002:	2c30      	cmp	r4, #48	; 0x30
 8006004:	d107      	bne.n	8006016 <_strtol_l.constprop.0+0x56>
 8006006:	782c      	ldrb	r4, [r5, #0]
 8006008:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800600c:	2c58      	cmp	r4, #88	; 0x58
 800600e:	d14d      	bne.n	80060ac <_strtol_l.constprop.0+0xec>
 8006010:	786c      	ldrb	r4, [r5, #1]
 8006012:	2310      	movs	r3, #16
 8006014:	3502      	adds	r5, #2
 8006016:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800601a:	f108 38ff 	add.w	r8, r8, #4294967295
 800601e:	f04f 0c00 	mov.w	ip, #0
 8006022:	fbb8 f9f3 	udiv	r9, r8, r3
 8006026:	4666      	mov	r6, ip
 8006028:	fb03 8a19 	mls	sl, r3, r9, r8
 800602c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006030:	f1be 0f09 	cmp.w	lr, #9
 8006034:	d816      	bhi.n	8006064 <_strtol_l.constprop.0+0xa4>
 8006036:	4674      	mov	r4, lr
 8006038:	42a3      	cmp	r3, r4
 800603a:	dd24      	ble.n	8006086 <_strtol_l.constprop.0+0xc6>
 800603c:	f1bc 0f00 	cmp.w	ip, #0
 8006040:	db1e      	blt.n	8006080 <_strtol_l.constprop.0+0xc0>
 8006042:	45b1      	cmp	r9, r6
 8006044:	d31c      	bcc.n	8006080 <_strtol_l.constprop.0+0xc0>
 8006046:	d101      	bne.n	800604c <_strtol_l.constprop.0+0x8c>
 8006048:	45a2      	cmp	sl, r4
 800604a:	db19      	blt.n	8006080 <_strtol_l.constprop.0+0xc0>
 800604c:	fb06 4603 	mla	r6, r6, r3, r4
 8006050:	f04f 0c01 	mov.w	ip, #1
 8006054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006058:	e7e8      	b.n	800602c <_strtol_l.constprop.0+0x6c>
 800605a:	2c2b      	cmp	r4, #43	; 0x2b
 800605c:	bf04      	itt	eq
 800605e:	782c      	ldrbeq	r4, [r5, #0]
 8006060:	1cb5      	addeq	r5, r6, #2
 8006062:	e7ca      	b.n	8005ffa <_strtol_l.constprop.0+0x3a>
 8006064:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006068:	f1be 0f19 	cmp.w	lr, #25
 800606c:	d801      	bhi.n	8006072 <_strtol_l.constprop.0+0xb2>
 800606e:	3c37      	subs	r4, #55	; 0x37
 8006070:	e7e2      	b.n	8006038 <_strtol_l.constprop.0+0x78>
 8006072:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006076:	f1be 0f19 	cmp.w	lr, #25
 800607a:	d804      	bhi.n	8006086 <_strtol_l.constprop.0+0xc6>
 800607c:	3c57      	subs	r4, #87	; 0x57
 800607e:	e7db      	b.n	8006038 <_strtol_l.constprop.0+0x78>
 8006080:	f04f 3cff 	mov.w	ip, #4294967295
 8006084:	e7e6      	b.n	8006054 <_strtol_l.constprop.0+0x94>
 8006086:	f1bc 0f00 	cmp.w	ip, #0
 800608a:	da05      	bge.n	8006098 <_strtol_l.constprop.0+0xd8>
 800608c:	2322      	movs	r3, #34	; 0x22
 800608e:	6003      	str	r3, [r0, #0]
 8006090:	4646      	mov	r6, r8
 8006092:	b942      	cbnz	r2, 80060a6 <_strtol_l.constprop.0+0xe6>
 8006094:	4630      	mov	r0, r6
 8006096:	e79e      	b.n	8005fd6 <_strtol_l.constprop.0+0x16>
 8006098:	b107      	cbz	r7, 800609c <_strtol_l.constprop.0+0xdc>
 800609a:	4276      	negs	r6, r6
 800609c:	2a00      	cmp	r2, #0
 800609e:	d0f9      	beq.n	8006094 <_strtol_l.constprop.0+0xd4>
 80060a0:	f1bc 0f00 	cmp.w	ip, #0
 80060a4:	d000      	beq.n	80060a8 <_strtol_l.constprop.0+0xe8>
 80060a6:	1e69      	subs	r1, r5, #1
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	e7f3      	b.n	8006094 <_strtol_l.constprop.0+0xd4>
 80060ac:	2430      	movs	r4, #48	; 0x30
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1b1      	bne.n	8006016 <_strtol_l.constprop.0+0x56>
 80060b2:	2308      	movs	r3, #8
 80060b4:	e7af      	b.n	8006016 <_strtol_l.constprop.0+0x56>
 80060b6:	2c30      	cmp	r4, #48	; 0x30
 80060b8:	d0a5      	beq.n	8006006 <_strtol_l.constprop.0+0x46>
 80060ba:	230a      	movs	r3, #10
 80060bc:	e7ab      	b.n	8006016 <_strtol_l.constprop.0+0x56>
 80060be:	bf00      	nop
 80060c0:	0800728d 	.word	0x0800728d

080060c4 <strtol>:
 80060c4:	4613      	mov	r3, r2
 80060c6:	460a      	mov	r2, r1
 80060c8:	4601      	mov	r1, r0
 80060ca:	4802      	ldr	r0, [pc, #8]	; (80060d4 <strtol+0x10>)
 80060cc:	6800      	ldr	r0, [r0, #0]
 80060ce:	f7ff bf77 	b.w	8005fc0 <_strtol_l.constprop.0>
 80060d2:	bf00      	nop
 80060d4:	200000a4 	.word	0x200000a4

080060d8 <__assert_func>:
 80060d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060da:	4614      	mov	r4, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	4b09      	ldr	r3, [pc, #36]	; (8006104 <__assert_func+0x2c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4605      	mov	r5, r0
 80060e4:	68d8      	ldr	r0, [r3, #12]
 80060e6:	b14c      	cbz	r4, 80060fc <__assert_func+0x24>
 80060e8:	4b07      	ldr	r3, [pc, #28]	; (8006108 <__assert_func+0x30>)
 80060ea:	9100      	str	r1, [sp, #0]
 80060ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060f0:	4906      	ldr	r1, [pc, #24]	; (800610c <__assert_func+0x34>)
 80060f2:	462b      	mov	r3, r5
 80060f4:	f000 f80e 	bl	8006114 <fiprintf>
 80060f8:	f000 fcc4 	bl	8006a84 <abort>
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <__assert_func+0x38>)
 80060fe:	461c      	mov	r4, r3
 8006100:	e7f3      	b.n	80060ea <__assert_func+0x12>
 8006102:	bf00      	nop
 8006104:	200000a4 	.word	0x200000a4
 8006108:	08007250 	.word	0x08007250
 800610c:	0800725d 	.word	0x0800725d
 8006110:	0800728b 	.word	0x0800728b

08006114 <fiprintf>:
 8006114:	b40e      	push	{r1, r2, r3}
 8006116:	b503      	push	{r0, r1, lr}
 8006118:	4601      	mov	r1, r0
 800611a:	ab03      	add	r3, sp, #12
 800611c:	4805      	ldr	r0, [pc, #20]	; (8006134 <fiprintf+0x20>)
 800611e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006122:	6800      	ldr	r0, [r0, #0]
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	f000 f919 	bl	800635c <_vfiprintf_r>
 800612a:	b002      	add	sp, #8
 800612c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006130:	b003      	add	sp, #12
 8006132:	4770      	bx	lr
 8006134:	200000a4 	.word	0x200000a4

08006138 <malloc>:
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <malloc+0xc>)
 800613a:	4601      	mov	r1, r0
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	f000 b86f 	b.w	8006220 <_malloc_r>
 8006142:	bf00      	nop
 8006144:	200000a4 	.word	0x200000a4

08006148 <_free_r>:
 8006148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800614a:	2900      	cmp	r1, #0
 800614c:	d044      	beq.n	80061d8 <_free_r+0x90>
 800614e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006152:	9001      	str	r0, [sp, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f1a1 0404 	sub.w	r4, r1, #4
 800615a:	bfb8      	it	lt
 800615c:	18e4      	addlt	r4, r4, r3
 800615e:	f000 feb9 	bl	8006ed4 <__malloc_lock>
 8006162:	4a1e      	ldr	r2, [pc, #120]	; (80061dc <_free_r+0x94>)
 8006164:	9801      	ldr	r0, [sp, #4]
 8006166:	6813      	ldr	r3, [r2, #0]
 8006168:	b933      	cbnz	r3, 8006178 <_free_r+0x30>
 800616a:	6063      	str	r3, [r4, #4]
 800616c:	6014      	str	r4, [r2, #0]
 800616e:	b003      	add	sp, #12
 8006170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006174:	f000 beb4 	b.w	8006ee0 <__malloc_unlock>
 8006178:	42a3      	cmp	r3, r4
 800617a:	d908      	bls.n	800618e <_free_r+0x46>
 800617c:	6825      	ldr	r5, [r4, #0]
 800617e:	1961      	adds	r1, r4, r5
 8006180:	428b      	cmp	r3, r1
 8006182:	bf01      	itttt	eq
 8006184:	6819      	ldreq	r1, [r3, #0]
 8006186:	685b      	ldreq	r3, [r3, #4]
 8006188:	1949      	addeq	r1, r1, r5
 800618a:	6021      	streq	r1, [r4, #0]
 800618c:	e7ed      	b.n	800616a <_free_r+0x22>
 800618e:	461a      	mov	r2, r3
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	b10b      	cbz	r3, 8006198 <_free_r+0x50>
 8006194:	42a3      	cmp	r3, r4
 8006196:	d9fa      	bls.n	800618e <_free_r+0x46>
 8006198:	6811      	ldr	r1, [r2, #0]
 800619a:	1855      	adds	r5, r2, r1
 800619c:	42a5      	cmp	r5, r4
 800619e:	d10b      	bne.n	80061b8 <_free_r+0x70>
 80061a0:	6824      	ldr	r4, [r4, #0]
 80061a2:	4421      	add	r1, r4
 80061a4:	1854      	adds	r4, r2, r1
 80061a6:	42a3      	cmp	r3, r4
 80061a8:	6011      	str	r1, [r2, #0]
 80061aa:	d1e0      	bne.n	800616e <_free_r+0x26>
 80061ac:	681c      	ldr	r4, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	6053      	str	r3, [r2, #4]
 80061b2:	4421      	add	r1, r4
 80061b4:	6011      	str	r1, [r2, #0]
 80061b6:	e7da      	b.n	800616e <_free_r+0x26>
 80061b8:	d902      	bls.n	80061c0 <_free_r+0x78>
 80061ba:	230c      	movs	r3, #12
 80061bc:	6003      	str	r3, [r0, #0]
 80061be:	e7d6      	b.n	800616e <_free_r+0x26>
 80061c0:	6825      	ldr	r5, [r4, #0]
 80061c2:	1961      	adds	r1, r4, r5
 80061c4:	428b      	cmp	r3, r1
 80061c6:	bf04      	itt	eq
 80061c8:	6819      	ldreq	r1, [r3, #0]
 80061ca:	685b      	ldreq	r3, [r3, #4]
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	bf04      	itt	eq
 80061d0:	1949      	addeq	r1, r1, r5
 80061d2:	6021      	streq	r1, [r4, #0]
 80061d4:	6054      	str	r4, [r2, #4]
 80061d6:	e7ca      	b.n	800616e <_free_r+0x26>
 80061d8:	b003      	add	sp, #12
 80061da:	bd30      	pop	{r4, r5, pc}
 80061dc:	20000250 	.word	0x20000250

080061e0 <sbrk_aligned>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4e0e      	ldr	r6, [pc, #56]	; (800621c <sbrk_aligned+0x3c>)
 80061e4:	460c      	mov	r4, r1
 80061e6:	6831      	ldr	r1, [r6, #0]
 80061e8:	4605      	mov	r5, r0
 80061ea:	b911      	cbnz	r1, 80061f2 <sbrk_aligned+0x12>
 80061ec:	f000 fb7a 	bl	80068e4 <_sbrk_r>
 80061f0:	6030      	str	r0, [r6, #0]
 80061f2:	4621      	mov	r1, r4
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 fb75 	bl	80068e4 <_sbrk_r>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	d00a      	beq.n	8006214 <sbrk_aligned+0x34>
 80061fe:	1cc4      	adds	r4, r0, #3
 8006200:	f024 0403 	bic.w	r4, r4, #3
 8006204:	42a0      	cmp	r0, r4
 8006206:	d007      	beq.n	8006218 <sbrk_aligned+0x38>
 8006208:	1a21      	subs	r1, r4, r0
 800620a:	4628      	mov	r0, r5
 800620c:	f000 fb6a 	bl	80068e4 <_sbrk_r>
 8006210:	3001      	adds	r0, #1
 8006212:	d101      	bne.n	8006218 <sbrk_aligned+0x38>
 8006214:	f04f 34ff 	mov.w	r4, #4294967295
 8006218:	4620      	mov	r0, r4
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	20000254 	.word	0x20000254

08006220 <_malloc_r>:
 8006220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	1ccd      	adds	r5, r1, #3
 8006226:	f025 0503 	bic.w	r5, r5, #3
 800622a:	3508      	adds	r5, #8
 800622c:	2d0c      	cmp	r5, #12
 800622e:	bf38      	it	cc
 8006230:	250c      	movcc	r5, #12
 8006232:	2d00      	cmp	r5, #0
 8006234:	4607      	mov	r7, r0
 8006236:	db01      	blt.n	800623c <_malloc_r+0x1c>
 8006238:	42a9      	cmp	r1, r5
 800623a:	d905      	bls.n	8006248 <_malloc_r+0x28>
 800623c:	230c      	movs	r3, #12
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	2600      	movs	r6, #0
 8006242:	4630      	mov	r0, r6
 8006244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006248:	4e2e      	ldr	r6, [pc, #184]	; (8006304 <_malloc_r+0xe4>)
 800624a:	f000 fe43 	bl	8006ed4 <__malloc_lock>
 800624e:	6833      	ldr	r3, [r6, #0]
 8006250:	461c      	mov	r4, r3
 8006252:	bb34      	cbnz	r4, 80062a2 <_malloc_r+0x82>
 8006254:	4629      	mov	r1, r5
 8006256:	4638      	mov	r0, r7
 8006258:	f7ff ffc2 	bl	80061e0 <sbrk_aligned>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	4604      	mov	r4, r0
 8006260:	d14d      	bne.n	80062fe <_malloc_r+0xde>
 8006262:	6834      	ldr	r4, [r6, #0]
 8006264:	4626      	mov	r6, r4
 8006266:	2e00      	cmp	r6, #0
 8006268:	d140      	bne.n	80062ec <_malloc_r+0xcc>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	4631      	mov	r1, r6
 800626e:	4638      	mov	r0, r7
 8006270:	eb04 0803 	add.w	r8, r4, r3
 8006274:	f000 fb36 	bl	80068e4 <_sbrk_r>
 8006278:	4580      	cmp	r8, r0
 800627a:	d13a      	bne.n	80062f2 <_malloc_r+0xd2>
 800627c:	6821      	ldr	r1, [r4, #0]
 800627e:	3503      	adds	r5, #3
 8006280:	1a6d      	subs	r5, r5, r1
 8006282:	f025 0503 	bic.w	r5, r5, #3
 8006286:	3508      	adds	r5, #8
 8006288:	2d0c      	cmp	r5, #12
 800628a:	bf38      	it	cc
 800628c:	250c      	movcc	r5, #12
 800628e:	4629      	mov	r1, r5
 8006290:	4638      	mov	r0, r7
 8006292:	f7ff ffa5 	bl	80061e0 <sbrk_aligned>
 8006296:	3001      	adds	r0, #1
 8006298:	d02b      	beq.n	80062f2 <_malloc_r+0xd2>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	442b      	add	r3, r5
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	e00e      	b.n	80062c0 <_malloc_r+0xa0>
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	1b52      	subs	r2, r2, r5
 80062a6:	d41e      	bmi.n	80062e6 <_malloc_r+0xc6>
 80062a8:	2a0b      	cmp	r2, #11
 80062aa:	d916      	bls.n	80062da <_malloc_r+0xba>
 80062ac:	1961      	adds	r1, r4, r5
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	6025      	str	r5, [r4, #0]
 80062b2:	bf18      	it	ne
 80062b4:	6059      	strne	r1, [r3, #4]
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	bf08      	it	eq
 80062ba:	6031      	streq	r1, [r6, #0]
 80062bc:	5162      	str	r2, [r4, r5]
 80062be:	604b      	str	r3, [r1, #4]
 80062c0:	4638      	mov	r0, r7
 80062c2:	f104 060b 	add.w	r6, r4, #11
 80062c6:	f000 fe0b 	bl	8006ee0 <__malloc_unlock>
 80062ca:	f026 0607 	bic.w	r6, r6, #7
 80062ce:	1d23      	adds	r3, r4, #4
 80062d0:	1af2      	subs	r2, r6, r3
 80062d2:	d0b6      	beq.n	8006242 <_malloc_r+0x22>
 80062d4:	1b9b      	subs	r3, r3, r6
 80062d6:	50a3      	str	r3, [r4, r2]
 80062d8:	e7b3      	b.n	8006242 <_malloc_r+0x22>
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	42a3      	cmp	r3, r4
 80062de:	bf0c      	ite	eq
 80062e0:	6032      	streq	r2, [r6, #0]
 80062e2:	605a      	strne	r2, [r3, #4]
 80062e4:	e7ec      	b.n	80062c0 <_malloc_r+0xa0>
 80062e6:	4623      	mov	r3, r4
 80062e8:	6864      	ldr	r4, [r4, #4]
 80062ea:	e7b2      	b.n	8006252 <_malloc_r+0x32>
 80062ec:	4634      	mov	r4, r6
 80062ee:	6876      	ldr	r6, [r6, #4]
 80062f0:	e7b9      	b.n	8006266 <_malloc_r+0x46>
 80062f2:	230c      	movs	r3, #12
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	4638      	mov	r0, r7
 80062f8:	f000 fdf2 	bl	8006ee0 <__malloc_unlock>
 80062fc:	e7a1      	b.n	8006242 <_malloc_r+0x22>
 80062fe:	6025      	str	r5, [r4, #0]
 8006300:	e7de      	b.n	80062c0 <_malloc_r+0xa0>
 8006302:	bf00      	nop
 8006304:	20000250 	.word	0x20000250

08006308 <__sfputc_r>:
 8006308:	6893      	ldr	r3, [r2, #8]
 800630a:	3b01      	subs	r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	b410      	push	{r4}
 8006310:	6093      	str	r3, [r2, #8]
 8006312:	da08      	bge.n	8006326 <__sfputc_r+0x1e>
 8006314:	6994      	ldr	r4, [r2, #24]
 8006316:	42a3      	cmp	r3, r4
 8006318:	db01      	blt.n	800631e <__sfputc_r+0x16>
 800631a:	290a      	cmp	r1, #10
 800631c:	d103      	bne.n	8006326 <__sfputc_r+0x1e>
 800631e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006322:	f000 baef 	b.w	8006904 <__swbuf_r>
 8006326:	6813      	ldr	r3, [r2, #0]
 8006328:	1c58      	adds	r0, r3, #1
 800632a:	6010      	str	r0, [r2, #0]
 800632c:	7019      	strb	r1, [r3, #0]
 800632e:	4608      	mov	r0, r1
 8006330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006334:	4770      	bx	lr

08006336 <__sfputs_r>:
 8006336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006338:	4606      	mov	r6, r0
 800633a:	460f      	mov	r7, r1
 800633c:	4614      	mov	r4, r2
 800633e:	18d5      	adds	r5, r2, r3
 8006340:	42ac      	cmp	r4, r5
 8006342:	d101      	bne.n	8006348 <__sfputs_r+0x12>
 8006344:	2000      	movs	r0, #0
 8006346:	e007      	b.n	8006358 <__sfputs_r+0x22>
 8006348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800634c:	463a      	mov	r2, r7
 800634e:	4630      	mov	r0, r6
 8006350:	f7ff ffda 	bl	8006308 <__sfputc_r>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d1f3      	bne.n	8006340 <__sfputs_r+0xa>
 8006358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800635c <_vfiprintf_r>:
 800635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	460d      	mov	r5, r1
 8006362:	b09d      	sub	sp, #116	; 0x74
 8006364:	4614      	mov	r4, r2
 8006366:	4698      	mov	r8, r3
 8006368:	4606      	mov	r6, r0
 800636a:	b118      	cbz	r0, 8006374 <_vfiprintf_r+0x18>
 800636c:	6983      	ldr	r3, [r0, #24]
 800636e:	b90b      	cbnz	r3, 8006374 <_vfiprintf_r+0x18>
 8006370:	f000 fcaa 	bl	8006cc8 <__sinit>
 8006374:	4b89      	ldr	r3, [pc, #548]	; (800659c <_vfiprintf_r+0x240>)
 8006376:	429d      	cmp	r5, r3
 8006378:	d11b      	bne.n	80063b2 <_vfiprintf_r+0x56>
 800637a:	6875      	ldr	r5, [r6, #4]
 800637c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800637e:	07d9      	lsls	r1, r3, #31
 8006380:	d405      	bmi.n	800638e <_vfiprintf_r+0x32>
 8006382:	89ab      	ldrh	r3, [r5, #12]
 8006384:	059a      	lsls	r2, r3, #22
 8006386:	d402      	bmi.n	800638e <_vfiprintf_r+0x32>
 8006388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800638a:	f000 fd3b 	bl	8006e04 <__retarget_lock_acquire_recursive>
 800638e:	89ab      	ldrh	r3, [r5, #12]
 8006390:	071b      	lsls	r3, r3, #28
 8006392:	d501      	bpl.n	8006398 <_vfiprintf_r+0x3c>
 8006394:	692b      	ldr	r3, [r5, #16]
 8006396:	b9eb      	cbnz	r3, 80063d4 <_vfiprintf_r+0x78>
 8006398:	4629      	mov	r1, r5
 800639a:	4630      	mov	r0, r6
 800639c:	f000 fb04 	bl	80069a8 <__swsetup_r>
 80063a0:	b1c0      	cbz	r0, 80063d4 <_vfiprintf_r+0x78>
 80063a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063a4:	07dc      	lsls	r4, r3, #31
 80063a6:	d50e      	bpl.n	80063c6 <_vfiprintf_r+0x6a>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	b01d      	add	sp, #116	; 0x74
 80063ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b2:	4b7b      	ldr	r3, [pc, #492]	; (80065a0 <_vfiprintf_r+0x244>)
 80063b4:	429d      	cmp	r5, r3
 80063b6:	d101      	bne.n	80063bc <_vfiprintf_r+0x60>
 80063b8:	68b5      	ldr	r5, [r6, #8]
 80063ba:	e7df      	b.n	800637c <_vfiprintf_r+0x20>
 80063bc:	4b79      	ldr	r3, [pc, #484]	; (80065a4 <_vfiprintf_r+0x248>)
 80063be:	429d      	cmp	r5, r3
 80063c0:	bf08      	it	eq
 80063c2:	68f5      	ldreq	r5, [r6, #12]
 80063c4:	e7da      	b.n	800637c <_vfiprintf_r+0x20>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	0598      	lsls	r0, r3, #22
 80063ca:	d4ed      	bmi.n	80063a8 <_vfiprintf_r+0x4c>
 80063cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063ce:	f000 fd1a 	bl	8006e06 <__retarget_lock_release_recursive>
 80063d2:	e7e9      	b.n	80063a8 <_vfiprintf_r+0x4c>
 80063d4:	2300      	movs	r3, #0
 80063d6:	9309      	str	r3, [sp, #36]	; 0x24
 80063d8:	2320      	movs	r3, #32
 80063da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063de:	f8cd 800c 	str.w	r8, [sp, #12]
 80063e2:	2330      	movs	r3, #48	; 0x30
 80063e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80065a8 <_vfiprintf_r+0x24c>
 80063e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ec:	f04f 0901 	mov.w	r9, #1
 80063f0:	4623      	mov	r3, r4
 80063f2:	469a      	mov	sl, r3
 80063f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063f8:	b10a      	cbz	r2, 80063fe <_vfiprintf_r+0xa2>
 80063fa:	2a25      	cmp	r2, #37	; 0x25
 80063fc:	d1f9      	bne.n	80063f2 <_vfiprintf_r+0x96>
 80063fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006402:	d00b      	beq.n	800641c <_vfiprintf_r+0xc0>
 8006404:	465b      	mov	r3, fp
 8006406:	4622      	mov	r2, r4
 8006408:	4629      	mov	r1, r5
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff ff93 	bl	8006336 <__sfputs_r>
 8006410:	3001      	adds	r0, #1
 8006412:	f000 80aa 	beq.w	800656a <_vfiprintf_r+0x20e>
 8006416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006418:	445a      	add	r2, fp
 800641a:	9209      	str	r2, [sp, #36]	; 0x24
 800641c:	f89a 3000 	ldrb.w	r3, [sl]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80a2 	beq.w	800656a <_vfiprintf_r+0x20e>
 8006426:	2300      	movs	r3, #0
 8006428:	f04f 32ff 	mov.w	r2, #4294967295
 800642c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006430:	f10a 0a01 	add.w	sl, sl, #1
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	9307      	str	r3, [sp, #28]
 8006438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800643c:	931a      	str	r3, [sp, #104]	; 0x68
 800643e:	4654      	mov	r4, sl
 8006440:	2205      	movs	r2, #5
 8006442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006446:	4858      	ldr	r0, [pc, #352]	; (80065a8 <_vfiprintf_r+0x24c>)
 8006448:	f7f9 ff02 	bl	8000250 <memchr>
 800644c:	9a04      	ldr	r2, [sp, #16]
 800644e:	b9d8      	cbnz	r0, 8006488 <_vfiprintf_r+0x12c>
 8006450:	06d1      	lsls	r1, r2, #27
 8006452:	bf44      	itt	mi
 8006454:	2320      	movmi	r3, #32
 8006456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800645a:	0713      	lsls	r3, r2, #28
 800645c:	bf44      	itt	mi
 800645e:	232b      	movmi	r3, #43	; 0x2b
 8006460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006464:	f89a 3000 	ldrb.w	r3, [sl]
 8006468:	2b2a      	cmp	r3, #42	; 0x2a
 800646a:	d015      	beq.n	8006498 <_vfiprintf_r+0x13c>
 800646c:	9a07      	ldr	r2, [sp, #28]
 800646e:	4654      	mov	r4, sl
 8006470:	2000      	movs	r0, #0
 8006472:	f04f 0c0a 	mov.w	ip, #10
 8006476:	4621      	mov	r1, r4
 8006478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800647c:	3b30      	subs	r3, #48	; 0x30
 800647e:	2b09      	cmp	r3, #9
 8006480:	d94e      	bls.n	8006520 <_vfiprintf_r+0x1c4>
 8006482:	b1b0      	cbz	r0, 80064b2 <_vfiprintf_r+0x156>
 8006484:	9207      	str	r2, [sp, #28]
 8006486:	e014      	b.n	80064b2 <_vfiprintf_r+0x156>
 8006488:	eba0 0308 	sub.w	r3, r0, r8
 800648c:	fa09 f303 	lsl.w	r3, r9, r3
 8006490:	4313      	orrs	r3, r2
 8006492:	9304      	str	r3, [sp, #16]
 8006494:	46a2      	mov	sl, r4
 8006496:	e7d2      	b.n	800643e <_vfiprintf_r+0xe2>
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	1d19      	adds	r1, r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	9103      	str	r1, [sp, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bfbb      	ittet	lt
 80064a4:	425b      	neglt	r3, r3
 80064a6:	f042 0202 	orrlt.w	r2, r2, #2
 80064aa:	9307      	strge	r3, [sp, #28]
 80064ac:	9307      	strlt	r3, [sp, #28]
 80064ae:	bfb8      	it	lt
 80064b0:	9204      	strlt	r2, [sp, #16]
 80064b2:	7823      	ldrb	r3, [r4, #0]
 80064b4:	2b2e      	cmp	r3, #46	; 0x2e
 80064b6:	d10c      	bne.n	80064d2 <_vfiprintf_r+0x176>
 80064b8:	7863      	ldrb	r3, [r4, #1]
 80064ba:	2b2a      	cmp	r3, #42	; 0x2a
 80064bc:	d135      	bne.n	800652a <_vfiprintf_r+0x1ce>
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	1d1a      	adds	r2, r3, #4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	9203      	str	r2, [sp, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bfb8      	it	lt
 80064ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80064ce:	3402      	adds	r4, #2
 80064d0:	9305      	str	r3, [sp, #20]
 80064d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065b8 <_vfiprintf_r+0x25c>
 80064d6:	7821      	ldrb	r1, [r4, #0]
 80064d8:	2203      	movs	r2, #3
 80064da:	4650      	mov	r0, sl
 80064dc:	f7f9 feb8 	bl	8000250 <memchr>
 80064e0:	b140      	cbz	r0, 80064f4 <_vfiprintf_r+0x198>
 80064e2:	2340      	movs	r3, #64	; 0x40
 80064e4:	eba0 000a 	sub.w	r0, r0, sl
 80064e8:	fa03 f000 	lsl.w	r0, r3, r0
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	4303      	orrs	r3, r0
 80064f0:	3401      	adds	r4, #1
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f8:	482c      	ldr	r0, [pc, #176]	; (80065ac <_vfiprintf_r+0x250>)
 80064fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064fe:	2206      	movs	r2, #6
 8006500:	f7f9 fea6 	bl	8000250 <memchr>
 8006504:	2800      	cmp	r0, #0
 8006506:	d03f      	beq.n	8006588 <_vfiprintf_r+0x22c>
 8006508:	4b29      	ldr	r3, [pc, #164]	; (80065b0 <_vfiprintf_r+0x254>)
 800650a:	bb1b      	cbnz	r3, 8006554 <_vfiprintf_r+0x1f8>
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	3307      	adds	r3, #7
 8006510:	f023 0307 	bic.w	r3, r3, #7
 8006514:	3308      	adds	r3, #8
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651a:	443b      	add	r3, r7
 800651c:	9309      	str	r3, [sp, #36]	; 0x24
 800651e:	e767      	b.n	80063f0 <_vfiprintf_r+0x94>
 8006520:	fb0c 3202 	mla	r2, ip, r2, r3
 8006524:	460c      	mov	r4, r1
 8006526:	2001      	movs	r0, #1
 8006528:	e7a5      	b.n	8006476 <_vfiprintf_r+0x11a>
 800652a:	2300      	movs	r3, #0
 800652c:	3401      	adds	r4, #1
 800652e:	9305      	str	r3, [sp, #20]
 8006530:	4619      	mov	r1, r3
 8006532:	f04f 0c0a 	mov.w	ip, #10
 8006536:	4620      	mov	r0, r4
 8006538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800653c:	3a30      	subs	r2, #48	; 0x30
 800653e:	2a09      	cmp	r2, #9
 8006540:	d903      	bls.n	800654a <_vfiprintf_r+0x1ee>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0c5      	beq.n	80064d2 <_vfiprintf_r+0x176>
 8006546:	9105      	str	r1, [sp, #20]
 8006548:	e7c3      	b.n	80064d2 <_vfiprintf_r+0x176>
 800654a:	fb0c 2101 	mla	r1, ip, r1, r2
 800654e:	4604      	mov	r4, r0
 8006550:	2301      	movs	r3, #1
 8006552:	e7f0      	b.n	8006536 <_vfiprintf_r+0x1da>
 8006554:	ab03      	add	r3, sp, #12
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	462a      	mov	r2, r5
 800655a:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <_vfiprintf_r+0x258>)
 800655c:	a904      	add	r1, sp, #16
 800655e:	4630      	mov	r0, r6
 8006560:	f3af 8000 	nop.w
 8006564:	4607      	mov	r7, r0
 8006566:	1c78      	adds	r0, r7, #1
 8006568:	d1d6      	bne.n	8006518 <_vfiprintf_r+0x1bc>
 800656a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800656c:	07d9      	lsls	r1, r3, #31
 800656e:	d405      	bmi.n	800657c <_vfiprintf_r+0x220>
 8006570:	89ab      	ldrh	r3, [r5, #12]
 8006572:	059a      	lsls	r2, r3, #22
 8006574:	d402      	bmi.n	800657c <_vfiprintf_r+0x220>
 8006576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006578:	f000 fc45 	bl	8006e06 <__retarget_lock_release_recursive>
 800657c:	89ab      	ldrh	r3, [r5, #12]
 800657e:	065b      	lsls	r3, r3, #25
 8006580:	f53f af12 	bmi.w	80063a8 <_vfiprintf_r+0x4c>
 8006584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006586:	e711      	b.n	80063ac <_vfiprintf_r+0x50>
 8006588:	ab03      	add	r3, sp, #12
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	462a      	mov	r2, r5
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <_vfiprintf_r+0x258>)
 8006590:	a904      	add	r1, sp, #16
 8006592:	4630      	mov	r0, r6
 8006594:	f000 f880 	bl	8006698 <_printf_i>
 8006598:	e7e4      	b.n	8006564 <_vfiprintf_r+0x208>
 800659a:	bf00      	nop
 800659c:	080073e0 	.word	0x080073e0
 80065a0:	08007400 	.word	0x08007400
 80065a4:	080073c0 	.word	0x080073c0
 80065a8:	0800738d 	.word	0x0800738d
 80065ac:	08007397 	.word	0x08007397
 80065b0:	00000000 	.word	0x00000000
 80065b4:	08006337 	.word	0x08006337
 80065b8:	08007393 	.word	0x08007393

080065bc <_printf_common>:
 80065bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c0:	4616      	mov	r6, r2
 80065c2:	4699      	mov	r9, r3
 80065c4:	688a      	ldr	r2, [r1, #8]
 80065c6:	690b      	ldr	r3, [r1, #16]
 80065c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	bfb8      	it	lt
 80065d0:	4613      	movlt	r3, r2
 80065d2:	6033      	str	r3, [r6, #0]
 80065d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065d8:	4607      	mov	r7, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	b10a      	cbz	r2, 80065e2 <_printf_common+0x26>
 80065de:	3301      	adds	r3, #1
 80065e0:	6033      	str	r3, [r6, #0]
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	0699      	lsls	r1, r3, #26
 80065e6:	bf42      	ittt	mi
 80065e8:	6833      	ldrmi	r3, [r6, #0]
 80065ea:	3302      	addmi	r3, #2
 80065ec:	6033      	strmi	r3, [r6, #0]
 80065ee:	6825      	ldr	r5, [r4, #0]
 80065f0:	f015 0506 	ands.w	r5, r5, #6
 80065f4:	d106      	bne.n	8006604 <_printf_common+0x48>
 80065f6:	f104 0a19 	add.w	sl, r4, #25
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	6832      	ldr	r2, [r6, #0]
 80065fe:	1a9b      	subs	r3, r3, r2
 8006600:	42ab      	cmp	r3, r5
 8006602:	dc26      	bgt.n	8006652 <_printf_common+0x96>
 8006604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006608:	1e13      	subs	r3, r2, #0
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	bf18      	it	ne
 800660e:	2301      	movne	r3, #1
 8006610:	0692      	lsls	r2, r2, #26
 8006612:	d42b      	bmi.n	800666c <_printf_common+0xb0>
 8006614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006618:	4649      	mov	r1, r9
 800661a:	4638      	mov	r0, r7
 800661c:	47c0      	blx	r8
 800661e:	3001      	adds	r0, #1
 8006620:	d01e      	beq.n	8006660 <_printf_common+0xa4>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	68e5      	ldr	r5, [r4, #12]
 8006626:	6832      	ldr	r2, [r6, #0]
 8006628:	f003 0306 	and.w	r3, r3, #6
 800662c:	2b04      	cmp	r3, #4
 800662e:	bf08      	it	eq
 8006630:	1aad      	subeq	r5, r5, r2
 8006632:	68a3      	ldr	r3, [r4, #8]
 8006634:	6922      	ldr	r2, [r4, #16]
 8006636:	bf0c      	ite	eq
 8006638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800663c:	2500      	movne	r5, #0
 800663e:	4293      	cmp	r3, r2
 8006640:	bfc4      	itt	gt
 8006642:	1a9b      	subgt	r3, r3, r2
 8006644:	18ed      	addgt	r5, r5, r3
 8006646:	2600      	movs	r6, #0
 8006648:	341a      	adds	r4, #26
 800664a:	42b5      	cmp	r5, r6
 800664c:	d11a      	bne.n	8006684 <_printf_common+0xc8>
 800664e:	2000      	movs	r0, #0
 8006650:	e008      	b.n	8006664 <_printf_common+0xa8>
 8006652:	2301      	movs	r3, #1
 8006654:	4652      	mov	r2, sl
 8006656:	4649      	mov	r1, r9
 8006658:	4638      	mov	r0, r7
 800665a:	47c0      	blx	r8
 800665c:	3001      	adds	r0, #1
 800665e:	d103      	bne.n	8006668 <_printf_common+0xac>
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	3501      	adds	r5, #1
 800666a:	e7c6      	b.n	80065fa <_printf_common+0x3e>
 800666c:	18e1      	adds	r1, r4, r3
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	2030      	movs	r0, #48	; 0x30
 8006672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006676:	4422      	add	r2, r4
 8006678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800667c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006680:	3302      	adds	r3, #2
 8006682:	e7c7      	b.n	8006614 <_printf_common+0x58>
 8006684:	2301      	movs	r3, #1
 8006686:	4622      	mov	r2, r4
 8006688:	4649      	mov	r1, r9
 800668a:	4638      	mov	r0, r7
 800668c:	47c0      	blx	r8
 800668e:	3001      	adds	r0, #1
 8006690:	d0e6      	beq.n	8006660 <_printf_common+0xa4>
 8006692:	3601      	adds	r6, #1
 8006694:	e7d9      	b.n	800664a <_printf_common+0x8e>
	...

08006698 <_printf_i>:
 8006698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800669c:	7e0f      	ldrb	r7, [r1, #24]
 800669e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066a0:	2f78      	cmp	r7, #120	; 0x78
 80066a2:	4691      	mov	r9, r2
 80066a4:	4680      	mov	r8, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	469a      	mov	sl, r3
 80066aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066ae:	d807      	bhi.n	80066c0 <_printf_i+0x28>
 80066b0:	2f62      	cmp	r7, #98	; 0x62
 80066b2:	d80a      	bhi.n	80066ca <_printf_i+0x32>
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	f000 80d8 	beq.w	800686a <_printf_i+0x1d2>
 80066ba:	2f58      	cmp	r7, #88	; 0x58
 80066bc:	f000 80a3 	beq.w	8006806 <_printf_i+0x16e>
 80066c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066c8:	e03a      	b.n	8006740 <_printf_i+0xa8>
 80066ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066ce:	2b15      	cmp	r3, #21
 80066d0:	d8f6      	bhi.n	80066c0 <_printf_i+0x28>
 80066d2:	a101      	add	r1, pc, #4	; (adr r1, 80066d8 <_printf_i+0x40>)
 80066d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006745 	.word	0x08006745
 80066e0:	080066c1 	.word	0x080066c1
 80066e4:	080066c1 	.word	0x080066c1
 80066e8:	080066c1 	.word	0x080066c1
 80066ec:	080066c1 	.word	0x080066c1
 80066f0:	08006745 	.word	0x08006745
 80066f4:	080066c1 	.word	0x080066c1
 80066f8:	080066c1 	.word	0x080066c1
 80066fc:	080066c1 	.word	0x080066c1
 8006700:	080066c1 	.word	0x080066c1
 8006704:	08006851 	.word	0x08006851
 8006708:	08006775 	.word	0x08006775
 800670c:	08006833 	.word	0x08006833
 8006710:	080066c1 	.word	0x080066c1
 8006714:	080066c1 	.word	0x080066c1
 8006718:	08006873 	.word	0x08006873
 800671c:	080066c1 	.word	0x080066c1
 8006720:	08006775 	.word	0x08006775
 8006724:	080066c1 	.word	0x080066c1
 8006728:	080066c1 	.word	0x080066c1
 800672c:	0800683b 	.word	0x0800683b
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	1d1a      	adds	r2, r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	602a      	str	r2, [r5, #0]
 8006738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800673c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006740:	2301      	movs	r3, #1
 8006742:	e0a3      	b.n	800688c <_printf_i+0x1f4>
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	6829      	ldr	r1, [r5, #0]
 8006748:	0606      	lsls	r6, r0, #24
 800674a:	f101 0304 	add.w	r3, r1, #4
 800674e:	d50a      	bpl.n	8006766 <_printf_i+0xce>
 8006750:	680e      	ldr	r6, [r1, #0]
 8006752:	602b      	str	r3, [r5, #0]
 8006754:	2e00      	cmp	r6, #0
 8006756:	da03      	bge.n	8006760 <_printf_i+0xc8>
 8006758:	232d      	movs	r3, #45	; 0x2d
 800675a:	4276      	negs	r6, r6
 800675c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006760:	485e      	ldr	r0, [pc, #376]	; (80068dc <_printf_i+0x244>)
 8006762:	230a      	movs	r3, #10
 8006764:	e019      	b.n	800679a <_printf_i+0x102>
 8006766:	680e      	ldr	r6, [r1, #0]
 8006768:	602b      	str	r3, [r5, #0]
 800676a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800676e:	bf18      	it	ne
 8006770:	b236      	sxthne	r6, r6
 8006772:	e7ef      	b.n	8006754 <_printf_i+0xbc>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	6820      	ldr	r0, [r4, #0]
 8006778:	1d19      	adds	r1, r3, #4
 800677a:	6029      	str	r1, [r5, #0]
 800677c:	0601      	lsls	r1, r0, #24
 800677e:	d501      	bpl.n	8006784 <_printf_i+0xec>
 8006780:	681e      	ldr	r6, [r3, #0]
 8006782:	e002      	b.n	800678a <_printf_i+0xf2>
 8006784:	0646      	lsls	r6, r0, #25
 8006786:	d5fb      	bpl.n	8006780 <_printf_i+0xe8>
 8006788:	881e      	ldrh	r6, [r3, #0]
 800678a:	4854      	ldr	r0, [pc, #336]	; (80068dc <_printf_i+0x244>)
 800678c:	2f6f      	cmp	r7, #111	; 0x6f
 800678e:	bf0c      	ite	eq
 8006790:	2308      	moveq	r3, #8
 8006792:	230a      	movne	r3, #10
 8006794:	2100      	movs	r1, #0
 8006796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800679a:	6865      	ldr	r5, [r4, #4]
 800679c:	60a5      	str	r5, [r4, #8]
 800679e:	2d00      	cmp	r5, #0
 80067a0:	bfa2      	ittt	ge
 80067a2:	6821      	ldrge	r1, [r4, #0]
 80067a4:	f021 0104 	bicge.w	r1, r1, #4
 80067a8:	6021      	strge	r1, [r4, #0]
 80067aa:	b90e      	cbnz	r6, 80067b0 <_printf_i+0x118>
 80067ac:	2d00      	cmp	r5, #0
 80067ae:	d04d      	beq.n	800684c <_printf_i+0x1b4>
 80067b0:	4615      	mov	r5, r2
 80067b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80067b6:	fb03 6711 	mls	r7, r3, r1, r6
 80067ba:	5dc7      	ldrb	r7, [r0, r7]
 80067bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067c0:	4637      	mov	r7, r6
 80067c2:	42bb      	cmp	r3, r7
 80067c4:	460e      	mov	r6, r1
 80067c6:	d9f4      	bls.n	80067b2 <_printf_i+0x11a>
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d10b      	bne.n	80067e4 <_printf_i+0x14c>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	07de      	lsls	r6, r3, #31
 80067d0:	d508      	bpl.n	80067e4 <_printf_i+0x14c>
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	6861      	ldr	r1, [r4, #4]
 80067d6:	4299      	cmp	r1, r3
 80067d8:	bfde      	ittt	le
 80067da:	2330      	movle	r3, #48	; 0x30
 80067dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067e4:	1b52      	subs	r2, r2, r5
 80067e6:	6122      	str	r2, [r4, #16]
 80067e8:	f8cd a000 	str.w	sl, [sp]
 80067ec:	464b      	mov	r3, r9
 80067ee:	aa03      	add	r2, sp, #12
 80067f0:	4621      	mov	r1, r4
 80067f2:	4640      	mov	r0, r8
 80067f4:	f7ff fee2 	bl	80065bc <_printf_common>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d14c      	bne.n	8006896 <_printf_i+0x1fe>
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	b004      	add	sp, #16
 8006802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006806:	4835      	ldr	r0, [pc, #212]	; (80068dc <_printf_i+0x244>)
 8006808:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800680c:	6829      	ldr	r1, [r5, #0]
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	f851 6b04 	ldr.w	r6, [r1], #4
 8006814:	6029      	str	r1, [r5, #0]
 8006816:	061d      	lsls	r5, r3, #24
 8006818:	d514      	bpl.n	8006844 <_printf_i+0x1ac>
 800681a:	07df      	lsls	r7, r3, #31
 800681c:	bf44      	itt	mi
 800681e:	f043 0320 	orrmi.w	r3, r3, #32
 8006822:	6023      	strmi	r3, [r4, #0]
 8006824:	b91e      	cbnz	r6, 800682e <_printf_i+0x196>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	f023 0320 	bic.w	r3, r3, #32
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	2310      	movs	r3, #16
 8006830:	e7b0      	b.n	8006794 <_printf_i+0xfc>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	f043 0320 	orr.w	r3, r3, #32
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	2378      	movs	r3, #120	; 0x78
 800683c:	4828      	ldr	r0, [pc, #160]	; (80068e0 <_printf_i+0x248>)
 800683e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006842:	e7e3      	b.n	800680c <_printf_i+0x174>
 8006844:	0659      	lsls	r1, r3, #25
 8006846:	bf48      	it	mi
 8006848:	b2b6      	uxthmi	r6, r6
 800684a:	e7e6      	b.n	800681a <_printf_i+0x182>
 800684c:	4615      	mov	r5, r2
 800684e:	e7bb      	b.n	80067c8 <_printf_i+0x130>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	6826      	ldr	r6, [r4, #0]
 8006854:	6961      	ldr	r1, [r4, #20]
 8006856:	1d18      	adds	r0, r3, #4
 8006858:	6028      	str	r0, [r5, #0]
 800685a:	0635      	lsls	r5, r6, #24
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	d501      	bpl.n	8006864 <_printf_i+0x1cc>
 8006860:	6019      	str	r1, [r3, #0]
 8006862:	e002      	b.n	800686a <_printf_i+0x1d2>
 8006864:	0670      	lsls	r0, r6, #25
 8006866:	d5fb      	bpl.n	8006860 <_printf_i+0x1c8>
 8006868:	8019      	strh	r1, [r3, #0]
 800686a:	2300      	movs	r3, #0
 800686c:	6123      	str	r3, [r4, #16]
 800686e:	4615      	mov	r5, r2
 8006870:	e7ba      	b.n	80067e8 <_printf_i+0x150>
 8006872:	682b      	ldr	r3, [r5, #0]
 8006874:	1d1a      	adds	r2, r3, #4
 8006876:	602a      	str	r2, [r5, #0]
 8006878:	681d      	ldr	r5, [r3, #0]
 800687a:	6862      	ldr	r2, [r4, #4]
 800687c:	2100      	movs	r1, #0
 800687e:	4628      	mov	r0, r5
 8006880:	f7f9 fce6 	bl	8000250 <memchr>
 8006884:	b108      	cbz	r0, 800688a <_printf_i+0x1f2>
 8006886:	1b40      	subs	r0, r0, r5
 8006888:	6060      	str	r0, [r4, #4]
 800688a:	6863      	ldr	r3, [r4, #4]
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	2300      	movs	r3, #0
 8006890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006894:	e7a8      	b.n	80067e8 <_printf_i+0x150>
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	462a      	mov	r2, r5
 800689a:	4649      	mov	r1, r9
 800689c:	4640      	mov	r0, r8
 800689e:	47d0      	blx	sl
 80068a0:	3001      	adds	r0, #1
 80068a2:	d0ab      	beq.n	80067fc <_printf_i+0x164>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	079b      	lsls	r3, r3, #30
 80068a8:	d413      	bmi.n	80068d2 <_printf_i+0x23a>
 80068aa:	68e0      	ldr	r0, [r4, #12]
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	4298      	cmp	r0, r3
 80068b0:	bfb8      	it	lt
 80068b2:	4618      	movlt	r0, r3
 80068b4:	e7a4      	b.n	8006800 <_printf_i+0x168>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4632      	mov	r2, r6
 80068ba:	4649      	mov	r1, r9
 80068bc:	4640      	mov	r0, r8
 80068be:	47d0      	blx	sl
 80068c0:	3001      	adds	r0, #1
 80068c2:	d09b      	beq.n	80067fc <_printf_i+0x164>
 80068c4:	3501      	adds	r5, #1
 80068c6:	68e3      	ldr	r3, [r4, #12]
 80068c8:	9903      	ldr	r1, [sp, #12]
 80068ca:	1a5b      	subs	r3, r3, r1
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	dcf2      	bgt.n	80068b6 <_printf_i+0x21e>
 80068d0:	e7eb      	b.n	80068aa <_printf_i+0x212>
 80068d2:	2500      	movs	r5, #0
 80068d4:	f104 0619 	add.w	r6, r4, #25
 80068d8:	e7f5      	b.n	80068c6 <_printf_i+0x22e>
 80068da:	bf00      	nop
 80068dc:	0800739e 	.word	0x0800739e
 80068e0:	080073af 	.word	0x080073af

080068e4 <_sbrk_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d06      	ldr	r5, [pc, #24]	; (8006900 <_sbrk_r+0x1c>)
 80068e8:	2300      	movs	r3, #0
 80068ea:	4604      	mov	r4, r0
 80068ec:	4608      	mov	r0, r1
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	f7fa fa3a 	bl	8000d68 <_sbrk>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_sbrk_r+0x1a>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_sbrk_r+0x1a>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	2000025c 	.word	0x2000025c

08006904 <__swbuf_r>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	460e      	mov	r6, r1
 8006908:	4614      	mov	r4, r2
 800690a:	4605      	mov	r5, r0
 800690c:	b118      	cbz	r0, 8006916 <__swbuf_r+0x12>
 800690e:	6983      	ldr	r3, [r0, #24]
 8006910:	b90b      	cbnz	r3, 8006916 <__swbuf_r+0x12>
 8006912:	f000 f9d9 	bl	8006cc8 <__sinit>
 8006916:	4b21      	ldr	r3, [pc, #132]	; (800699c <__swbuf_r+0x98>)
 8006918:	429c      	cmp	r4, r3
 800691a:	d12b      	bne.n	8006974 <__swbuf_r+0x70>
 800691c:	686c      	ldr	r4, [r5, #4]
 800691e:	69a3      	ldr	r3, [r4, #24]
 8006920:	60a3      	str	r3, [r4, #8]
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	071a      	lsls	r2, r3, #28
 8006926:	d52f      	bpl.n	8006988 <__swbuf_r+0x84>
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	b36b      	cbz	r3, 8006988 <__swbuf_r+0x84>
 800692c:	6923      	ldr	r3, [r4, #16]
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	1ac0      	subs	r0, r0, r3
 8006932:	6963      	ldr	r3, [r4, #20]
 8006934:	b2f6      	uxtb	r6, r6
 8006936:	4283      	cmp	r3, r0
 8006938:	4637      	mov	r7, r6
 800693a:	dc04      	bgt.n	8006946 <__swbuf_r+0x42>
 800693c:	4621      	mov	r1, r4
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f92e 	bl	8006ba0 <_fflush_r>
 8006944:	bb30      	cbnz	r0, 8006994 <__swbuf_r+0x90>
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	3b01      	subs	r3, #1
 800694a:	60a3      	str	r3, [r4, #8]
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	6022      	str	r2, [r4, #0]
 8006952:	701e      	strb	r6, [r3, #0]
 8006954:	6963      	ldr	r3, [r4, #20]
 8006956:	3001      	adds	r0, #1
 8006958:	4283      	cmp	r3, r0
 800695a:	d004      	beq.n	8006966 <__swbuf_r+0x62>
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	07db      	lsls	r3, r3, #31
 8006960:	d506      	bpl.n	8006970 <__swbuf_r+0x6c>
 8006962:	2e0a      	cmp	r6, #10
 8006964:	d104      	bne.n	8006970 <__swbuf_r+0x6c>
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f000 f919 	bl	8006ba0 <_fflush_r>
 800696e:	b988      	cbnz	r0, 8006994 <__swbuf_r+0x90>
 8006970:	4638      	mov	r0, r7
 8006972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <__swbuf_r+0x9c>)
 8006976:	429c      	cmp	r4, r3
 8006978:	d101      	bne.n	800697e <__swbuf_r+0x7a>
 800697a:	68ac      	ldr	r4, [r5, #8]
 800697c:	e7cf      	b.n	800691e <__swbuf_r+0x1a>
 800697e:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <__swbuf_r+0xa0>)
 8006980:	429c      	cmp	r4, r3
 8006982:	bf08      	it	eq
 8006984:	68ec      	ldreq	r4, [r5, #12]
 8006986:	e7ca      	b.n	800691e <__swbuf_r+0x1a>
 8006988:	4621      	mov	r1, r4
 800698a:	4628      	mov	r0, r5
 800698c:	f000 f80c 	bl	80069a8 <__swsetup_r>
 8006990:	2800      	cmp	r0, #0
 8006992:	d0cb      	beq.n	800692c <__swbuf_r+0x28>
 8006994:	f04f 37ff 	mov.w	r7, #4294967295
 8006998:	e7ea      	b.n	8006970 <__swbuf_r+0x6c>
 800699a:	bf00      	nop
 800699c:	080073e0 	.word	0x080073e0
 80069a0:	08007400 	.word	0x08007400
 80069a4:	080073c0 	.word	0x080073c0

080069a8 <__swsetup_r>:
 80069a8:	4b32      	ldr	r3, [pc, #200]	; (8006a74 <__swsetup_r+0xcc>)
 80069aa:	b570      	push	{r4, r5, r6, lr}
 80069ac:	681d      	ldr	r5, [r3, #0]
 80069ae:	4606      	mov	r6, r0
 80069b0:	460c      	mov	r4, r1
 80069b2:	b125      	cbz	r5, 80069be <__swsetup_r+0x16>
 80069b4:	69ab      	ldr	r3, [r5, #24]
 80069b6:	b913      	cbnz	r3, 80069be <__swsetup_r+0x16>
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 f985 	bl	8006cc8 <__sinit>
 80069be:	4b2e      	ldr	r3, [pc, #184]	; (8006a78 <__swsetup_r+0xd0>)
 80069c0:	429c      	cmp	r4, r3
 80069c2:	d10f      	bne.n	80069e4 <__swsetup_r+0x3c>
 80069c4:	686c      	ldr	r4, [r5, #4]
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069cc:	0719      	lsls	r1, r3, #28
 80069ce:	d42c      	bmi.n	8006a2a <__swsetup_r+0x82>
 80069d0:	06dd      	lsls	r5, r3, #27
 80069d2:	d411      	bmi.n	80069f8 <__swsetup_r+0x50>
 80069d4:	2309      	movs	r3, #9
 80069d6:	6033      	str	r3, [r6, #0]
 80069d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	f04f 30ff 	mov.w	r0, #4294967295
 80069e2:	e03e      	b.n	8006a62 <__swsetup_r+0xba>
 80069e4:	4b25      	ldr	r3, [pc, #148]	; (8006a7c <__swsetup_r+0xd4>)
 80069e6:	429c      	cmp	r4, r3
 80069e8:	d101      	bne.n	80069ee <__swsetup_r+0x46>
 80069ea:	68ac      	ldr	r4, [r5, #8]
 80069ec:	e7eb      	b.n	80069c6 <__swsetup_r+0x1e>
 80069ee:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <__swsetup_r+0xd8>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	bf08      	it	eq
 80069f4:	68ec      	ldreq	r4, [r5, #12]
 80069f6:	e7e6      	b.n	80069c6 <__swsetup_r+0x1e>
 80069f8:	0758      	lsls	r0, r3, #29
 80069fa:	d512      	bpl.n	8006a22 <__swsetup_r+0x7a>
 80069fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069fe:	b141      	cbz	r1, 8006a12 <__swsetup_r+0x6a>
 8006a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a04:	4299      	cmp	r1, r3
 8006a06:	d002      	beq.n	8006a0e <__swsetup_r+0x66>
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7ff fb9d 	bl	8006148 <_free_r>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6363      	str	r3, [r4, #52]	; 0x34
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a18:	81a3      	strh	r3, [r4, #12]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6063      	str	r3, [r4, #4]
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	f043 0308 	orr.w	r3, r3, #8
 8006a28:	81a3      	strh	r3, [r4, #12]
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	b94b      	cbnz	r3, 8006a42 <__swsetup_r+0x9a>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a38:	d003      	beq.n	8006a42 <__swsetup_r+0x9a>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f000 fa09 	bl	8006e54 <__smakebuf_r>
 8006a42:	89a0      	ldrh	r0, [r4, #12]
 8006a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a48:	f010 0301 	ands.w	r3, r0, #1
 8006a4c:	d00a      	beq.n	8006a64 <__swsetup_r+0xbc>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60a3      	str	r3, [r4, #8]
 8006a52:	6963      	ldr	r3, [r4, #20]
 8006a54:	425b      	negs	r3, r3
 8006a56:	61a3      	str	r3, [r4, #24]
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	b943      	cbnz	r3, 8006a6e <__swsetup_r+0xc6>
 8006a5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a60:	d1ba      	bne.n	80069d8 <__swsetup_r+0x30>
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	0781      	lsls	r1, r0, #30
 8006a66:	bf58      	it	pl
 8006a68:	6963      	ldrpl	r3, [r4, #20]
 8006a6a:	60a3      	str	r3, [r4, #8]
 8006a6c:	e7f4      	b.n	8006a58 <__swsetup_r+0xb0>
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e7f7      	b.n	8006a62 <__swsetup_r+0xba>
 8006a72:	bf00      	nop
 8006a74:	200000a4 	.word	0x200000a4
 8006a78:	080073e0 	.word	0x080073e0
 8006a7c:	08007400 	.word	0x08007400
 8006a80:	080073c0 	.word	0x080073c0

08006a84 <abort>:
 8006a84:	b508      	push	{r3, lr}
 8006a86:	2006      	movs	r0, #6
 8006a88:	f000 fa58 	bl	8006f3c <raise>
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	f7fa f8f3 	bl	8000c78 <_exit>
	...

08006a94 <__sflush_r>:
 8006a94:	898a      	ldrh	r2, [r1, #12]
 8006a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	0710      	lsls	r0, r2, #28
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	d458      	bmi.n	8006b54 <__sflush_r+0xc0>
 8006aa2:	684b      	ldr	r3, [r1, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	dc05      	bgt.n	8006ab4 <__sflush_r+0x20>
 8006aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	dc02      	bgt.n	8006ab4 <__sflush_r+0x20>
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	d0f9      	beq.n	8006aae <__sflush_r+0x1a>
 8006aba:	2300      	movs	r3, #0
 8006abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ac0:	682f      	ldr	r7, [r5, #0]
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	d032      	beq.n	8006b2c <__sflush_r+0x98>
 8006ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	075a      	lsls	r2, r3, #29
 8006acc:	d505      	bpl.n	8006ada <__sflush_r+0x46>
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	1ac0      	subs	r0, r0, r3
 8006ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ad4:	b10b      	cbz	r3, 8006ada <__sflush_r+0x46>
 8006ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ad8:	1ac0      	subs	r0, r0, r3
 8006ada:	2300      	movs	r3, #0
 8006adc:	4602      	mov	r2, r0
 8006ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ae0:	6a21      	ldr	r1, [r4, #32]
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b0      	blx	r6
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	d106      	bne.n	8006afa <__sflush_r+0x66>
 8006aec:	6829      	ldr	r1, [r5, #0]
 8006aee:	291d      	cmp	r1, #29
 8006af0:	d82c      	bhi.n	8006b4c <__sflush_r+0xb8>
 8006af2:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <__sflush_r+0x108>)
 8006af4:	40ca      	lsrs	r2, r1
 8006af6:	07d6      	lsls	r6, r2, #31
 8006af8:	d528      	bpl.n	8006b4c <__sflush_r+0xb8>
 8006afa:	2200      	movs	r2, #0
 8006afc:	6062      	str	r2, [r4, #4]
 8006afe:	04d9      	lsls	r1, r3, #19
 8006b00:	6922      	ldr	r2, [r4, #16]
 8006b02:	6022      	str	r2, [r4, #0]
 8006b04:	d504      	bpl.n	8006b10 <__sflush_r+0x7c>
 8006b06:	1c42      	adds	r2, r0, #1
 8006b08:	d101      	bne.n	8006b0e <__sflush_r+0x7a>
 8006b0a:	682b      	ldr	r3, [r5, #0]
 8006b0c:	b903      	cbnz	r3, 8006b10 <__sflush_r+0x7c>
 8006b0e:	6560      	str	r0, [r4, #84]	; 0x54
 8006b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b12:	602f      	str	r7, [r5, #0]
 8006b14:	2900      	cmp	r1, #0
 8006b16:	d0ca      	beq.n	8006aae <__sflush_r+0x1a>
 8006b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b1c:	4299      	cmp	r1, r3
 8006b1e:	d002      	beq.n	8006b26 <__sflush_r+0x92>
 8006b20:	4628      	mov	r0, r5
 8006b22:	f7ff fb11 	bl	8006148 <_free_r>
 8006b26:	2000      	movs	r0, #0
 8006b28:	6360      	str	r0, [r4, #52]	; 0x34
 8006b2a:	e7c1      	b.n	8006ab0 <__sflush_r+0x1c>
 8006b2c:	6a21      	ldr	r1, [r4, #32]
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b0      	blx	r6
 8006b34:	1c41      	adds	r1, r0, #1
 8006b36:	d1c7      	bne.n	8006ac8 <__sflush_r+0x34>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0c4      	beq.n	8006ac8 <__sflush_r+0x34>
 8006b3e:	2b1d      	cmp	r3, #29
 8006b40:	d001      	beq.n	8006b46 <__sflush_r+0xb2>
 8006b42:	2b16      	cmp	r3, #22
 8006b44:	d101      	bne.n	8006b4a <__sflush_r+0xb6>
 8006b46:	602f      	str	r7, [r5, #0]
 8006b48:	e7b1      	b.n	8006aae <__sflush_r+0x1a>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b50:	81a3      	strh	r3, [r4, #12]
 8006b52:	e7ad      	b.n	8006ab0 <__sflush_r+0x1c>
 8006b54:	690f      	ldr	r7, [r1, #16]
 8006b56:	2f00      	cmp	r7, #0
 8006b58:	d0a9      	beq.n	8006aae <__sflush_r+0x1a>
 8006b5a:	0793      	lsls	r3, r2, #30
 8006b5c:	680e      	ldr	r6, [r1, #0]
 8006b5e:	bf08      	it	eq
 8006b60:	694b      	ldreq	r3, [r1, #20]
 8006b62:	600f      	str	r7, [r1, #0]
 8006b64:	bf18      	it	ne
 8006b66:	2300      	movne	r3, #0
 8006b68:	eba6 0807 	sub.w	r8, r6, r7
 8006b6c:	608b      	str	r3, [r1, #8]
 8006b6e:	f1b8 0f00 	cmp.w	r8, #0
 8006b72:	dd9c      	ble.n	8006aae <__sflush_r+0x1a>
 8006b74:	6a21      	ldr	r1, [r4, #32]
 8006b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b78:	4643      	mov	r3, r8
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	47b0      	blx	r6
 8006b80:	2800      	cmp	r0, #0
 8006b82:	dc06      	bgt.n	8006b92 <__sflush_r+0xfe>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b8a:	81a3      	strh	r3, [r4, #12]
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	e78e      	b.n	8006ab0 <__sflush_r+0x1c>
 8006b92:	4407      	add	r7, r0
 8006b94:	eba8 0800 	sub.w	r8, r8, r0
 8006b98:	e7e9      	b.n	8006b6e <__sflush_r+0xda>
 8006b9a:	bf00      	nop
 8006b9c:	20400001 	.word	0x20400001

08006ba0 <_fflush_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	690b      	ldr	r3, [r1, #16]
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	b913      	cbnz	r3, 8006bb0 <_fflush_r+0x10>
 8006baa:	2500      	movs	r5, #0
 8006bac:	4628      	mov	r0, r5
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	b118      	cbz	r0, 8006bba <_fflush_r+0x1a>
 8006bb2:	6983      	ldr	r3, [r0, #24]
 8006bb4:	b90b      	cbnz	r3, 8006bba <_fflush_r+0x1a>
 8006bb6:	f000 f887 	bl	8006cc8 <__sinit>
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <_fflush_r+0x6c>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	d11b      	bne.n	8006bf8 <_fflush_r+0x58>
 8006bc0:	686c      	ldr	r4, [r5, #4]
 8006bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0ef      	beq.n	8006baa <_fflush_r+0xa>
 8006bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bcc:	07d0      	lsls	r0, r2, #31
 8006bce:	d404      	bmi.n	8006bda <_fflush_r+0x3a>
 8006bd0:	0599      	lsls	r1, r3, #22
 8006bd2:	d402      	bmi.n	8006bda <_fflush_r+0x3a>
 8006bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bd6:	f000 f915 	bl	8006e04 <__retarget_lock_acquire_recursive>
 8006bda:	4628      	mov	r0, r5
 8006bdc:	4621      	mov	r1, r4
 8006bde:	f7ff ff59 	bl	8006a94 <__sflush_r>
 8006be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006be4:	07da      	lsls	r2, r3, #31
 8006be6:	4605      	mov	r5, r0
 8006be8:	d4e0      	bmi.n	8006bac <_fflush_r+0xc>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	059b      	lsls	r3, r3, #22
 8006bee:	d4dd      	bmi.n	8006bac <_fflush_r+0xc>
 8006bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bf2:	f000 f908 	bl	8006e06 <__retarget_lock_release_recursive>
 8006bf6:	e7d9      	b.n	8006bac <_fflush_r+0xc>
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <_fflush_r+0x70>)
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	d101      	bne.n	8006c02 <_fflush_r+0x62>
 8006bfe:	68ac      	ldr	r4, [r5, #8]
 8006c00:	e7df      	b.n	8006bc2 <_fflush_r+0x22>
 8006c02:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <_fflush_r+0x74>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	bf08      	it	eq
 8006c08:	68ec      	ldreq	r4, [r5, #12]
 8006c0a:	e7da      	b.n	8006bc2 <_fflush_r+0x22>
 8006c0c:	080073e0 	.word	0x080073e0
 8006c10:	08007400 	.word	0x08007400
 8006c14:	080073c0 	.word	0x080073c0

08006c18 <std>:
 8006c18:	2300      	movs	r3, #0
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c26:	6083      	str	r3, [r0, #8]
 8006c28:	8181      	strh	r1, [r0, #12]
 8006c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c2c:	81c2      	strh	r2, [r0, #14]
 8006c2e:	6183      	str	r3, [r0, #24]
 8006c30:	4619      	mov	r1, r3
 8006c32:	2208      	movs	r2, #8
 8006c34:	305c      	adds	r0, #92	; 0x5c
 8006c36:	f7ff f95f 	bl	8005ef8 <memset>
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <std+0x38>)
 8006c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <std+0x3c>)
 8006c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <std+0x40>)
 8006c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <std+0x44>)
 8006c48:	6224      	str	r4, [r4, #32]
 8006c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c4c:	bd10      	pop	{r4, pc}
 8006c4e:	bf00      	nop
 8006c50:	08006f75 	.word	0x08006f75
 8006c54:	08006f97 	.word	0x08006f97
 8006c58:	08006fcf 	.word	0x08006fcf
 8006c5c:	08006ff3 	.word	0x08006ff3

08006c60 <_cleanup_r>:
 8006c60:	4901      	ldr	r1, [pc, #4]	; (8006c68 <_cleanup_r+0x8>)
 8006c62:	f000 b8af 	b.w	8006dc4 <_fwalk_reent>
 8006c66:	bf00      	nop
 8006c68:	08006ba1 	.word	0x08006ba1

08006c6c <__sfmoreglue>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	2268      	movs	r2, #104	; 0x68
 8006c70:	1e4d      	subs	r5, r1, #1
 8006c72:	4355      	muls	r5, r2
 8006c74:	460e      	mov	r6, r1
 8006c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c7a:	f7ff fad1 	bl	8006220 <_malloc_r>
 8006c7e:	4604      	mov	r4, r0
 8006c80:	b140      	cbz	r0, 8006c94 <__sfmoreglue+0x28>
 8006c82:	2100      	movs	r1, #0
 8006c84:	e9c0 1600 	strd	r1, r6, [r0]
 8006c88:	300c      	adds	r0, #12
 8006c8a:	60a0      	str	r0, [r4, #8]
 8006c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c90:	f7ff f932 	bl	8005ef8 <memset>
 8006c94:	4620      	mov	r0, r4
 8006c96:	bd70      	pop	{r4, r5, r6, pc}

08006c98 <__sfp_lock_acquire>:
 8006c98:	4801      	ldr	r0, [pc, #4]	; (8006ca0 <__sfp_lock_acquire+0x8>)
 8006c9a:	f000 b8b3 	b.w	8006e04 <__retarget_lock_acquire_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	20000259 	.word	0x20000259

08006ca4 <__sfp_lock_release>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	; (8006cac <__sfp_lock_release+0x8>)
 8006ca6:	f000 b8ae 	b.w	8006e06 <__retarget_lock_release_recursive>
 8006caa:	bf00      	nop
 8006cac:	20000259 	.word	0x20000259

08006cb0 <__sinit_lock_acquire>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	; (8006cb8 <__sinit_lock_acquire+0x8>)
 8006cb2:	f000 b8a7 	b.w	8006e04 <__retarget_lock_acquire_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	2000025a 	.word	0x2000025a

08006cbc <__sinit_lock_release>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	; (8006cc4 <__sinit_lock_release+0x8>)
 8006cbe:	f000 b8a2 	b.w	8006e06 <__retarget_lock_release_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	2000025a 	.word	0x2000025a

08006cc8 <__sinit>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	4604      	mov	r4, r0
 8006ccc:	f7ff fff0 	bl	8006cb0 <__sinit_lock_acquire>
 8006cd0:	69a3      	ldr	r3, [r4, #24]
 8006cd2:	b11b      	cbz	r3, 8006cdc <__sinit+0x14>
 8006cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd8:	f7ff bff0 	b.w	8006cbc <__sinit_lock_release>
 8006cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <__sinit+0x68>)
 8006ce4:	4a13      	ldr	r2, [pc, #76]	; (8006d34 <__sinit+0x6c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	bf04      	itt	eq
 8006cee:	2301      	moveq	r3, #1
 8006cf0:	61a3      	streq	r3, [r4, #24]
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 f820 	bl	8006d38 <__sfp>
 8006cf8:	6060      	str	r0, [r4, #4]
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 f81c 	bl	8006d38 <__sfp>
 8006d00:	60a0      	str	r0, [r4, #8]
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 f818 	bl	8006d38 <__sfp>
 8006d08:	2200      	movs	r2, #0
 8006d0a:	60e0      	str	r0, [r4, #12]
 8006d0c:	2104      	movs	r1, #4
 8006d0e:	6860      	ldr	r0, [r4, #4]
 8006d10:	f7ff ff82 	bl	8006c18 <std>
 8006d14:	68a0      	ldr	r0, [r4, #8]
 8006d16:	2201      	movs	r2, #1
 8006d18:	2109      	movs	r1, #9
 8006d1a:	f7ff ff7d 	bl	8006c18 <std>
 8006d1e:	68e0      	ldr	r0, [r4, #12]
 8006d20:	2202      	movs	r2, #2
 8006d22:	2112      	movs	r1, #18
 8006d24:	f7ff ff78 	bl	8006c18 <std>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	61a3      	str	r3, [r4, #24]
 8006d2c:	e7d2      	b.n	8006cd4 <__sinit+0xc>
 8006d2e:	bf00      	nop
 8006d30:	080071d8 	.word	0x080071d8
 8006d34:	08006c61 	.word	0x08006c61

08006d38 <__sfp>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	f7ff ffac 	bl	8006c98 <__sfp_lock_acquire>
 8006d40:	4b1e      	ldr	r3, [pc, #120]	; (8006dbc <__sfp+0x84>)
 8006d42:	681e      	ldr	r6, [r3, #0]
 8006d44:	69b3      	ldr	r3, [r6, #24]
 8006d46:	b913      	cbnz	r3, 8006d4e <__sfp+0x16>
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7ff ffbd 	bl	8006cc8 <__sinit>
 8006d4e:	3648      	adds	r6, #72	; 0x48
 8006d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	d503      	bpl.n	8006d60 <__sfp+0x28>
 8006d58:	6833      	ldr	r3, [r6, #0]
 8006d5a:	b30b      	cbz	r3, 8006da0 <__sfp+0x68>
 8006d5c:	6836      	ldr	r6, [r6, #0]
 8006d5e:	e7f7      	b.n	8006d50 <__sfp+0x18>
 8006d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d64:	b9d5      	cbnz	r5, 8006d9c <__sfp+0x64>
 8006d66:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <__sfp+0x88>)
 8006d68:	60e3      	str	r3, [r4, #12]
 8006d6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d6e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d70:	f000 f847 	bl	8006e02 <__retarget_lock_init_recursive>
 8006d74:	f7ff ff96 	bl	8006ca4 <__sfp_lock_release>
 8006d78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d80:	6025      	str	r5, [r4, #0]
 8006d82:	61a5      	str	r5, [r4, #24]
 8006d84:	2208      	movs	r2, #8
 8006d86:	4629      	mov	r1, r5
 8006d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d8c:	f7ff f8b4 	bl	8005ef8 <memset>
 8006d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d98:	4620      	mov	r0, r4
 8006d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d9c:	3468      	adds	r4, #104	; 0x68
 8006d9e:	e7d9      	b.n	8006d54 <__sfp+0x1c>
 8006da0:	2104      	movs	r1, #4
 8006da2:	4638      	mov	r0, r7
 8006da4:	f7ff ff62 	bl	8006c6c <__sfmoreglue>
 8006da8:	4604      	mov	r4, r0
 8006daa:	6030      	str	r0, [r6, #0]
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d1d5      	bne.n	8006d5c <__sfp+0x24>
 8006db0:	f7ff ff78 	bl	8006ca4 <__sfp_lock_release>
 8006db4:	230c      	movs	r3, #12
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	e7ee      	b.n	8006d98 <__sfp+0x60>
 8006dba:	bf00      	nop
 8006dbc:	080071d8 	.word	0x080071d8
 8006dc0:	ffff0001 	.word	0xffff0001

08006dc4 <_fwalk_reent>:
 8006dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc8:	4606      	mov	r6, r0
 8006dca:	4688      	mov	r8, r1
 8006dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dd0:	2700      	movs	r7, #0
 8006dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8006dda:	d505      	bpl.n	8006de8 <_fwalk_reent+0x24>
 8006ddc:	6824      	ldr	r4, [r4, #0]
 8006dde:	2c00      	cmp	r4, #0
 8006de0:	d1f7      	bne.n	8006dd2 <_fwalk_reent+0xe>
 8006de2:	4638      	mov	r0, r7
 8006de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de8:	89ab      	ldrh	r3, [r5, #12]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d907      	bls.n	8006dfe <_fwalk_reent+0x3a>
 8006dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006df2:	3301      	adds	r3, #1
 8006df4:	d003      	beq.n	8006dfe <_fwalk_reent+0x3a>
 8006df6:	4629      	mov	r1, r5
 8006df8:	4630      	mov	r0, r6
 8006dfa:	47c0      	blx	r8
 8006dfc:	4307      	orrs	r7, r0
 8006dfe:	3568      	adds	r5, #104	; 0x68
 8006e00:	e7e9      	b.n	8006dd6 <_fwalk_reent+0x12>

08006e02 <__retarget_lock_init_recursive>:
 8006e02:	4770      	bx	lr

08006e04 <__retarget_lock_acquire_recursive>:
 8006e04:	4770      	bx	lr

08006e06 <__retarget_lock_release_recursive>:
 8006e06:	4770      	bx	lr

08006e08 <__swhatbuf_r>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	460e      	mov	r6, r1
 8006e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e10:	2900      	cmp	r1, #0
 8006e12:	b096      	sub	sp, #88	; 0x58
 8006e14:	4614      	mov	r4, r2
 8006e16:	461d      	mov	r5, r3
 8006e18:	da08      	bge.n	8006e2c <__swhatbuf_r+0x24>
 8006e1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	602a      	str	r2, [r5, #0]
 8006e22:	061a      	lsls	r2, r3, #24
 8006e24:	d410      	bmi.n	8006e48 <__swhatbuf_r+0x40>
 8006e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e2a:	e00e      	b.n	8006e4a <__swhatbuf_r+0x42>
 8006e2c:	466a      	mov	r2, sp
 8006e2e:	f000 f907 	bl	8007040 <_fstat_r>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	dbf1      	blt.n	8006e1a <__swhatbuf_r+0x12>
 8006e36:	9a01      	ldr	r2, [sp, #4]
 8006e38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e40:	425a      	negs	r2, r3
 8006e42:	415a      	adcs	r2, r3
 8006e44:	602a      	str	r2, [r5, #0]
 8006e46:	e7ee      	b.n	8006e26 <__swhatbuf_r+0x1e>
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	b016      	add	sp, #88	; 0x58
 8006e50:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e54 <__smakebuf_r>:
 8006e54:	898b      	ldrh	r3, [r1, #12]
 8006e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e58:	079d      	lsls	r5, r3, #30
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	d507      	bpl.n	8006e70 <__smakebuf_r+0x1c>
 8006e60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	6123      	str	r3, [r4, #16]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	6163      	str	r3, [r4, #20]
 8006e6c:	b002      	add	sp, #8
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	ab01      	add	r3, sp, #4
 8006e72:	466a      	mov	r2, sp
 8006e74:	f7ff ffc8 	bl	8006e08 <__swhatbuf_r>
 8006e78:	9900      	ldr	r1, [sp, #0]
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff f9cf 	bl	8006220 <_malloc_r>
 8006e82:	b948      	cbnz	r0, 8006e98 <__smakebuf_r+0x44>
 8006e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e88:	059a      	lsls	r2, r3, #22
 8006e8a:	d4ef      	bmi.n	8006e6c <__smakebuf_r+0x18>
 8006e8c:	f023 0303 	bic.w	r3, r3, #3
 8006e90:	f043 0302 	orr.w	r3, r3, #2
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	e7e3      	b.n	8006e60 <__smakebuf_r+0xc>
 8006e98:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <__smakebuf_r+0x7c>)
 8006e9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	6020      	str	r0, [r4, #0]
 8006ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	9b00      	ldr	r3, [sp, #0]
 8006ea8:	6163      	str	r3, [r4, #20]
 8006eaa:	9b01      	ldr	r3, [sp, #4]
 8006eac:	6120      	str	r0, [r4, #16]
 8006eae:	b15b      	cbz	r3, 8006ec8 <__smakebuf_r+0x74>
 8006eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f000 f8d5 	bl	8007064 <_isatty_r>
 8006eba:	b128      	cbz	r0, 8006ec8 <__smakebuf_r+0x74>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	f043 0301 	orr.w	r3, r3, #1
 8006ec6:	81a3      	strh	r3, [r4, #12]
 8006ec8:	89a0      	ldrh	r0, [r4, #12]
 8006eca:	4305      	orrs	r5, r0
 8006ecc:	81a5      	strh	r5, [r4, #12]
 8006ece:	e7cd      	b.n	8006e6c <__smakebuf_r+0x18>
 8006ed0:	08006c61 	.word	0x08006c61

08006ed4 <__malloc_lock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_lock+0x8>)
 8006ed6:	f7ff bf95 	b.w	8006e04 <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	20000258 	.word	0x20000258

08006ee0 <__malloc_unlock>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__malloc_unlock+0x8>)
 8006ee2:	f7ff bf90 	b.w	8006e06 <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	20000258 	.word	0x20000258

08006eec <_raise_r>:
 8006eec:	291f      	cmp	r1, #31
 8006eee:	b538      	push	{r3, r4, r5, lr}
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	d904      	bls.n	8006f00 <_raise_r+0x14>
 8006ef6:	2316      	movs	r3, #22
 8006ef8:	6003      	str	r3, [r0, #0]
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f02:	b112      	cbz	r2, 8006f0a <_raise_r+0x1e>
 8006f04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f08:	b94b      	cbnz	r3, 8006f1e <_raise_r+0x32>
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f830 	bl	8006f70 <_getpid_r>
 8006f10:	462a      	mov	r2, r5
 8006f12:	4601      	mov	r1, r0
 8006f14:	4620      	mov	r0, r4
 8006f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f1a:	f000 b817 	b.w	8006f4c <_kill_r>
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d00a      	beq.n	8006f38 <_raise_r+0x4c>
 8006f22:	1c59      	adds	r1, r3, #1
 8006f24:	d103      	bne.n	8006f2e <_raise_r+0x42>
 8006f26:	2316      	movs	r3, #22
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	e7e7      	b.n	8006efe <_raise_r+0x12>
 8006f2e:	2400      	movs	r4, #0
 8006f30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f34:	4628      	mov	r0, r5
 8006f36:	4798      	blx	r3
 8006f38:	2000      	movs	r0, #0
 8006f3a:	e7e0      	b.n	8006efe <_raise_r+0x12>

08006f3c <raise>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <raise+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f7ff bfd3 	b.w	8006eec <_raise_r>
 8006f46:	bf00      	nop
 8006f48:	200000a4 	.word	0x200000a4

08006f4c <_kill_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	; (8006f6c <_kill_r+0x20>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	f7f9 fe7d 	bl	8000c58 <_kill>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d102      	bne.n	8006f68 <_kill_r+0x1c>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	b103      	cbz	r3, 8006f68 <_kill_r+0x1c>
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	bf00      	nop
 8006f6c:	2000025c 	.word	0x2000025c

08006f70 <_getpid_r>:
 8006f70:	f7f9 be6a 	b.w	8000c48 <_getpid>

08006f74 <__sread>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	460c      	mov	r4, r1
 8006f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7c:	f000 f894 	bl	80070a8 <_read_r>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	bfab      	itete	ge
 8006f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f86:	89a3      	ldrhlt	r3, [r4, #12]
 8006f88:	181b      	addge	r3, r3, r0
 8006f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f8e:	bfac      	ite	ge
 8006f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f92:	81a3      	strhlt	r3, [r4, #12]
 8006f94:	bd10      	pop	{r4, pc}

08006f96 <__swrite>:
 8006f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9a:	461f      	mov	r7, r3
 8006f9c:	898b      	ldrh	r3, [r1, #12]
 8006f9e:	05db      	lsls	r3, r3, #23
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	d505      	bpl.n	8006fb4 <__swrite+0x1e>
 8006fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fac:	2302      	movs	r3, #2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f000 f868 	bl	8007084 <_lseek_r>
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	f000 b817 	b.w	8006ffc <_write_r>

08006fce <__sseek>:
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd6:	f000 f855 	bl	8007084 <_lseek_r>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	bf15      	itete	ne
 8006fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fea:	81a3      	strheq	r3, [r4, #12]
 8006fec:	bf18      	it	ne
 8006fee:	81a3      	strhne	r3, [r4, #12]
 8006ff0:	bd10      	pop	{r4, pc}

08006ff2 <__sclose>:
 8006ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff6:	f000 b813 	b.w	8007020 <_close_r>
	...

08006ffc <_write_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	; (800701c <_write_r+0x20>)
 8007000:	4604      	mov	r4, r0
 8007002:	4608      	mov	r0, r1
 8007004:	4611      	mov	r1, r2
 8007006:	2200      	movs	r2, #0
 8007008:	602a      	str	r2, [r5, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	f7f9 fe5b 	bl	8000cc6 <_write>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_write_r+0x1e>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_write_r+0x1e>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	2000025c 	.word	0x2000025c

08007020 <_close_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_close_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7f9 fe67 	bl	8000cfe <_close>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_close_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_close_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	2000025c 	.word	0x2000025c

08007040 <_fstat_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	; (8007060 <_fstat_r+0x20>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f7f9 fe62 	bl	8000d16 <_fstat>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d102      	bne.n	800705c <_fstat_r+0x1c>
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	b103      	cbz	r3, 800705c <_fstat_r+0x1c>
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	2000025c 	.word	0x2000025c

08007064 <_isatty_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d06      	ldr	r5, [pc, #24]	; (8007080 <_isatty_r+0x1c>)
 8007068:	2300      	movs	r3, #0
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	f7f9 fe61 	bl	8000d36 <_isatty>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_isatty_r+0x1a>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_isatty_r+0x1a>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	2000025c 	.word	0x2000025c

08007084 <_lseek_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d07      	ldr	r5, [pc, #28]	; (80070a4 <_lseek_r+0x20>)
 8007088:	4604      	mov	r4, r0
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7f9 fe5a 	bl	8000d4c <_lseek>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_lseek_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_lseek_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	2000025c 	.word	0x2000025c

080070a8 <_read_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d07      	ldr	r5, [pc, #28]	; (80070c8 <_read_r+0x20>)
 80070ac:	4604      	mov	r4, r0
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	602a      	str	r2, [r5, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f7f9 fde8 	bl	8000c8c <_read>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_read_r+0x1e>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_read_r+0x1e>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	2000025c 	.word	0x2000025c

080070cc <_init>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	bf00      	nop
 80070d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d2:	bc08      	pop	{r3}
 80070d4:	469e      	mov	lr, r3
 80070d6:	4770      	bx	lr

080070d8 <_fini>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	bf00      	nop
 80070dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070de:	bc08      	pop	{r3}
 80070e0:	469e      	mov	lr, r3
 80070e2:	4770      	bx	lr


ActionneurESE_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004034  08004034  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800403c  0800403c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08004050  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08004050  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012609  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002392  00000000  00000000  00032645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00035998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c30  00000000  00000000  00036870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e8e  00000000  00000000  0005c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b4b  00000000  00000000  0006f32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166e79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000423c  00000000  00000000  00166ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003fdc 	.word	0x08003fdc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003fdc 	.word	0x08003fdc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <MX_GPIO_Init+0xbc>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <MX_GPIO_Init+0xbc>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <MX_GPIO_Init+0xbc>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <MX_GPIO_Init+0xbc>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	4a22      	ldr	r2, [pc, #136]	; (80005d8 <MX_GPIO_Init+0xbc>)
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_GPIO_Init+0xbc>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	f003 0320 	and.w	r3, r3, #32
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_GPIO_Init+0xbc>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <MX_GPIO_Init+0xbc>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_GPIO_Init+0xbc>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fdd1 	bl	8001128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ISO_RESET_Pin;
 8000586:	f242 0308 	movw	r3, #8200	; 0x2008
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	480f      	ldr	r0, [pc, #60]	; (80005dc <MX_GPIO_Init+0xc0>)
 800059e:	f000 fc41 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005a2:	2320      	movs	r3, #32
 80005a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f000 fc32 	bl	8000e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2028      	movs	r0, #40	; 0x28
 80005c6:	f000 fbf8 	bl	8000dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ca:	2028      	movs	r0, #40	; 0x28
 80005cc:	f000 fc0f 	bl	8000dee <HAL_NVIC_EnableIRQ>

}
 80005d0:	bf00      	nop
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48000800 	.word	0x48000800

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fa9d 	bl	8000b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f7ff ff96 	bl	800051c <MX_GPIO_Init>
  MX_TIM1_Init();
 80005f0:	f000 f8cc 	bl	800078c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f9c8 	bl	8000988 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <main+0x3c>)
 80005fc:	f001 fe5e 	bl	80022bc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000600:	2100      	movs	r1, #0
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x3c>)
 8000604:	f002 fc78 	bl	8002ef8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000608:	2104      	movs	r1, #4
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <main+0x3c>)
 800060c:	f001 fe56 	bl	80022bc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000610:	2104      	movs	r1, #4
 8000612:	4802      	ldr	r0, [pc, #8]	; (800061c <main+0x3c>)
 8000614:	f002 fc70 	bl	8002ef8 <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x38>
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2238      	movs	r2, #56	; 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fccc 	bl	8003fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fdac 	bl	80011a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	2303      	movs	r3, #3
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800065a:	2306      	movs	r3, #6
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800065e:	2355      	movs	r3, #85	; 0x55
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fe48 	bl	8001308 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800067e:	f000 f818 	bl	80006b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f94c 	bl	8001938 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006a6:	f000 f804 	bl	80006b2 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b6:	b672      	cpsid	i
}
 80006b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ba:	e7fe      	b.n	80006ba <Error_Handler+0x8>

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x44>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6613      	str	r3, [r2, #96]	; 0x60
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x44>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x44>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6593      	str	r3, [r2, #88]	; 0x58
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x44>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006f2:	f000 fdf9 	bl	80012e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 fa3a 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800075c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000760:	f000 fcfa 	bl	8001158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <SystemInit+0x20>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <SystemInit+0x20>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b098      	sub	sp, #96	; 0x60
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000792:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2234      	movs	r2, #52	; 0x34
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fc07 	bl	8003fcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007be:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <MX_TIM1_Init+0x144>)
 80007c0:	4a44      	ldr	r2, [pc, #272]	; (80008d4 <MX_TIM1_Init+0x148>)
 80007c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 80007c4:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <MX_TIM1_Init+0x144>)
 80007c6:	2209      	movs	r2, #9
 80007c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80007ca:	4b41      	ldr	r3, [pc, #260]	; (80008d0 <MX_TIM1_Init+0x144>)
 80007cc:	2220      	movs	r2, #32
 80007ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80007d0:	4b3f      	ldr	r3, [pc, #252]	; (80008d0 <MX_TIM1_Init+0x144>)
 80007d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80007d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d8:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <MX_TIM1_Init+0x144>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007de:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <MX_TIM1_Init+0x144>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e4:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <MX_TIM1_Init+0x144>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ea:	4839      	ldr	r0, [pc, #228]	; (80008d0 <MX_TIM1_Init+0x144>)
 80007ec:	f001 fd0e 	bl	800220c <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f7ff ff5c 	bl	80006b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000806:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800080a:	4619      	mov	r1, r3
 800080c:	4830      	ldr	r0, [pc, #192]	; (80008d0 <MX_TIM1_Init+0x144>)
 800080e:	f002 fc35 	bl	800307c <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000818:	f7ff ff4b 	bl	80006b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081c:	2360      	movs	r3, #96	; 0x60
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 768;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000826:	2300      	movs	r3, #0
 8000828:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082a:	2300      	movs	r3, #0
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	4823      	ldr	r0, [pc, #140]	; (80008d0 <MX_TIM1_Init+0x144>)
 8000844:	f001 fe4c 	bl	80024e0 <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800084e:	f7ff ff30 	bl	80006b2 <Error_Handler>
  }
  sConfigOC.Pulse = 300;
 8000852:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000858:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800085c:	2204      	movs	r2, #4
 800085e:	4619      	mov	r1, r3
 8000860:	481b      	ldr	r0, [pc, #108]	; (80008d0 <MX_TIM1_Init+0x144>)
 8000862:	f001 fe3d 	bl	80024e0 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 800086c:	f7ff ff21 	bl	80006b2 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8000870:	4817      	ldr	r0, [pc, #92]	; (80008d0 <MX_TIM1_Init+0x144>)
 8000872:	f002 fd4b 	bl	800330c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8000882:	23d2      	movs	r3, #210	; 0xd2
 8000884:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800089c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM1_Init+0x144>)
 80008b4:	f002 fc78 	bl	80031a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80008be:	f7ff fef8 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM1_Init+0x144>)
 80008c4:	f000 f828 	bl	8000918 <HAL_TIM_MspPostInit>

}
 80008c8:	bf00      	nop
 80008ca:	3760      	adds	r7, #96	; 0x60
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000028 	.word	0x20000028
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_TIM_PWM_MspInit+0x38>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d10b      	bne.n	8000902 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_TIM_PWM_MspInit+0x3c>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	4a09      	ldr	r2, [pc, #36]	; (8000914 <HAL_TIM_PWM_MspInit+0x3c>)
 80008f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f4:	6613      	str	r3, [r2, #96]	; 0x60
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_TIM_PWM_MspInit+0x3c>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40012c00 	.word	0x40012c00
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a12      	ldr	r2, [pc, #72]	; (8000980 <HAL_TIM_MspPostInit+0x68>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d11d      	bne.n	8000976 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_TIM_MspPostInit+0x6c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_TIM_MspPostInit+0x6c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_TIM_MspPostInit+0x6c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000952:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000956:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000964:	2306      	movs	r3, #6
 8000966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4619      	mov	r1, r3
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f000 fa57 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40012c00 	.word	0x40012c00
 8000984:	40021000 	.word	0x40021000

08000988 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 800098e:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <MX_USART2_UART_Init+0x94>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009d2:	f002 fcd3 	bl	800337c <HAL_UART_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009dc:	f7ff fe69 	bl	80006b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009e4:	f003 fa04 	bl	8003df0 <HAL_UARTEx_SetTxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f7ff fe60 	bl	80006b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 80009f6:	f003 fa39 	bl	8003e6c <HAL_UARTEx_SetRxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f7ff fe57 	bl	80006b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_USART2_UART_Init+0x90>)
 8000a06:	f003 f9ba 	bl	8003d7e <HAL_UARTEx_DisableFifoMode>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f7ff fe4f 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000074 	.word	0x20000074
 8000a1c:	40004400 	.word	0x40004400

08000a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09e      	sub	sp, #120	; 0x78
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	2254      	movs	r2, #84	; 0x54
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 fac3 	bl	8003fcc <memset>
  if(uartHandle->Instance==USART2)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <HAL_UART_MspInit+0xa8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d136      	bne.n	8000abe <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 f987 	bl	8001d70 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a68:	f7ff fe23 	bl	80006b2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_UART_MspInit+0xac>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	4a16      	ldr	r2, [pc, #88]	; (8000acc <HAL_UART_MspInit+0xac>)
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a76:	6593      	str	r3, [r2, #88]	; 0x58
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_UART_MspInit+0xac>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0xac>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_UART_MspInit+0xac>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_UART_MspInit+0xac>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aac:	2307      	movs	r3, #7
 8000aae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f000 f9b3 	bl	8000e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3778      	adds	r7, #120	; 0x78
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad6:	490e      	ldr	r1, [pc, #56]	; (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aec:	4c0b      	ldr	r4, [pc, #44]	; (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000afa:	f7ff fe35 	bl	8000768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f003 fa41 	bl	8003f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b02:	f7ff fd6d 	bl	80005e0 <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   r0, =_estack
 8000b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b14:	08004044 	.word	0x08004044
  ldr r2, =_sbss
 8000b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b1c:	20000108 	.word	0x20000108

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>

08000b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f939 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f80e 	bl	8000b54 <HAL_InitTick>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e001      	b.n	8000b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b44:	f7ff fdba 	bl	80006bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b48:	79fb      	ldrb	r3, [r7, #7]

}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_InitTick+0x68>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d022      	beq.n	8000bae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_InitTick+0x6c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_InitTick+0x68>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f944 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10f      	bne.n	8000ba8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	d809      	bhi.n	8000ba2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b96:	f000 f910 	bl	8000dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_InitTick+0x70>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e007      	b.n	8000bb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e004      	b.n	8000bb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e001      	b.n	8000bb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a03      	ldr	r2, [pc, #12]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bd8:	6013      	str	r3, [r2, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20000104 	.word	0x20000104
 8000be8:	20000008 	.word	0x20000008

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000104 	.word	0x20000104

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	f7ff ff8e 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff29 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff40 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff90 	bl	8000cf8 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5f 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff33 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffa4 	bl	8000d60 <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e32:	e15a      	b.n	80010ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 814c 	beq.w	80010e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80a6 	beq.w	80010e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	4a5a      	ldr	r2, [pc, #360]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa4:	4b58      	ldr	r3, [pc, #352]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb0:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fda:	d01f      	beq.n	800101c <HAL_GPIO_Init+0x1f8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d019      	beq.n	8001018 <HAL_GPIO_Init+0x1f4>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1f0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a4a      	ldr	r2, [pc, #296]	; (8001118 <HAL_GPIO_Init+0x2f4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1ec>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2f8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2fc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1e4>
 8001004:	2305      	movs	r3, #5
 8001006:	e00a      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 8001008:	2306      	movs	r3, #6
 800100a:	e008      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 800100c:	2304      	movs	r3, #4
 800100e:	e006      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 8001010:	2303      	movs	r3, #3
 8001012:	e004      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 8001014:	2302      	movs	r3, #2
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 800101c:	2300      	movs	r3, #0
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4093      	lsls	r3, r2
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800102e:	4937      	ldr	r1, [pc, #220]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800103c:	4b39      	ldr	r3, [pc, #228]	; (8001124 <HAL_GPIO_Init+0x300>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001060:	4a30      	ldr	r2, [pc, #192]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800108a:	4a26      	ldr	r2, [pc, #152]	; (8001124 <HAL_GPIO_Init+0x300>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f47f ae9d 	bne.w	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	48000c00 	.word	0x48000c00
 800111c:	48001000 	.word	0x48001000
 8001120:	48001400 	.word	0x48001400
 8001124:	40010400 	.word	0x40010400

08001128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
 8001134:	4613      	mov	r3, r2
 8001136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001138:	787b      	ldrb	r3, [r7, #1]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001144:	e002      	b.n	800114c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f806 	bl	8001188 <HAL_GPIO_EXTI_Callback>
  }
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d141      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ba:	d131      	bne.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011bc:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011c2:	4a46      	ldr	r2, [pc, #280]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d4:	4a41      	ldr	r2, [pc, #260]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011dc:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2232      	movs	r2, #50	; 0x32
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9b      	lsrs	r3, r3, #18
 80011ee:	3301      	adds	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f2:	e002      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011fa:	4b38      	ldr	r3, [pc, #224]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001206:	d102      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f2      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d158      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e057      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001226:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800122c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001230:	e04d      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001238:	d141      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d131      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001260:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2232      	movs	r2, #50	; 0x32
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127e:	e002      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001292:	d102      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f2      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a6:	d112      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e011      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012bc:	e007      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40007000 	.word	0x40007000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f6:	6093      	str	r3, [r2, #8]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e306      	b.n	8001928 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d075      	beq.n	8001412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001326:	4b97      	ldr	r3, [pc, #604]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001330:	4b94      	ldr	r3, [pc, #592]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x3e>
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d002      	beq.n	800134c <HAL_RCC_OscConfig+0x44>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d10b      	bne.n	8001364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	4b8d      	ldr	r3, [pc, #564]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d05b      	beq.n	8001410 <HAL_RCC_OscConfig+0x108>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d157      	bne.n	8001410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e2e1      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d106      	bne.n	800137c <HAL_RCC_OscConfig+0x74>
 800136e:	4b85      	ldr	r3, [pc, #532]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a84      	ldr	r2, [pc, #528]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e01d      	b.n	80013b8 <HAL_RCC_OscConfig+0xb0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x98>
 8001386:	4b7f      	ldr	r3, [pc, #508]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7e      	ldr	r2, [pc, #504]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b7c      	ldr	r3, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7b      	ldr	r2, [pc, #492]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xb0>
 80013a0:	4b78      	ldr	r3, [pc, #480]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a77      	ldr	r2, [pc, #476]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b75      	ldr	r3, [pc, #468]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a74      	ldr	r2, [pc, #464]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc14 	bl	8000bec <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fc10 	bl	8000bec <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e2a6      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013da:	4b6a      	ldr	r3, [pc, #424]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0xc0>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc00 	bl	8000bec <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fbfc 	bl	8000bec <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e292      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001402:	4b60      	ldr	r3, [pc, #384]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0xe8>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d075      	beq.n	800150a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x136>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d002      	beq.n	8001444 <HAL_RCC_OscConfig+0x13c>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d11f      	bne.n	8001484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x154>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e265      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b49      	ldr	r3, [pc, #292]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	4946      	ldr	r1, [pc, #280]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001470:	4b45      	ldr	r3, [pc, #276]	; (8001588 <HAL_RCC_OscConfig+0x280>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb6d 	bl	8000b54 <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d043      	beq.n	8001508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e251      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a3c      	ldr	r2, [pc, #240]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fba8 	bl	8000bec <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fba4 	bl	8000bec <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e23a      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	061b      	lsls	r3, r3, #24
 80014cc:	492d      	ldr	r1, [pc, #180]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
 80014d2:	e01a      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb84 	bl	8000bec <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fb80 	bl	8000bec <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e216      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1e0>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d041      	beq.n	800159a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01c      	beq.n	8001558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff fb5d 	bl	8000bec <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001536:	f7ff fb59 	bl	8000bec <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1ef      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ef      	beq.n	8001536 <HAL_RCC_OscConfig+0x22e>
 8001556:	e020      	b.n	800159a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800155a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fb40 	bl	8000bec <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156e:	e00d      	b.n	800158c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fb3c 	bl	8000bec <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d906      	bls.n	800158c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1d2      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158c:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ea      	bne.n	8001570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015ac:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x2b4>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x2b6>
 80015bc:	2300      	movs	r3, #0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00d      	beq.n	80015de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b7f      	ldr	r3, [pc, #508]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	4a7e      	ldr	r2, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
 80015ce:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4b79      	ldr	r3, [pc, #484]	; (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff faf9 	bl	8000bec <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff faf5 	bl	8000bec <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e18b      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001610:	4b6c      	ldr	r3, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d108      	bne.n	8001636 <HAL_RCC_OscConfig+0x32e>
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001634:	e024      	b.n	8001680 <HAL_RCC_OscConfig+0x378>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d110      	bne.n	8001660 <HAL_RCC_OscConfig+0x358>
 800163e:	4b60      	ldr	r3, [pc, #384]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	4a5e      	ldr	r2, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164e:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001654:	4a5a      	ldr	r2, [pc, #360]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800165e:	e00f      	b.n	8001680 <HAL_RCC_OscConfig+0x378>
 8001660:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d016      	beq.n	80016b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fab0 	bl	8000bec <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff faac 	bl	8000bec <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e140      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ed      	beq.n	8001690 <HAL_RCC_OscConfig+0x388>
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa99 	bl	8000bec <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff fa95 	bl	8000bec <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e129      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ed      	bne.n	80016be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d03c      	beq.n	800177a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01c      	beq.n	8001742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800170e:	4a2c      	ldr	r2, [pc, #176]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fa68 	bl	8000bec <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001720:	f7ff fa64 	bl	8000bec <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0fa      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ef      	beq.n	8001720 <HAL_RCC_OscConfig+0x418>
 8001740:	e01b      	b.n	800177a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fa4b 	bl	8000bec <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175a:	f7ff fa47 	bl	8000bec <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0dd      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80d1 	beq.w	8001926 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b0c      	cmp	r3, #12
 800178e:	f000 808b 	beq.w	80018a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d15e      	bne.n	8001858 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff fa21 	bl	8000bec <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ac:	e00c      	b.n	80017c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fa1d 	bl	8000bec <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d905      	bls.n	80017c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0b3      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ec      	bne.n	80017ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d4:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	4b56      	ldr	r3, [pc, #344]	; (8001934 <HAL_RCC_OscConfig+0x62c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6a11      	ldr	r1, [r2, #32]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017e4:	3a01      	subs	r2, #1
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017ee:	0212      	lsls	r2, r2, #8
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017f6:	0852      	lsrs	r2, r2, #1
 80017f8:	3a01      	subs	r2, #1
 80017fa:	0552      	lsls	r2, r2, #21
 80017fc:	4311      	orrs	r1, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001802:	0852      	lsrs	r2, r2, #1
 8001804:	3a01      	subs	r2, #1
 8001806:	0652      	lsls	r2, r2, #25
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800180e:	06d2      	lsls	r2, r2, #27
 8001810:	430a      	orrs	r2, r1
 8001812:	4947      	ldr	r1, [pc, #284]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001814:	4313      	orrs	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001818:	4b45      	ldr	r3, [pc, #276]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a44      	ldr	r2, [pc, #272]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a41      	ldr	r2, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800182a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff f9dc 	bl	8000bec <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f9d8 	bl	8000bec <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e06e      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x530>
 8001856:	e066      	b.n	8001926 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a34      	ldr	r2, [pc, #208]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800185e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a31      	ldr	r2, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800186a:	f023 0303 	bic.w	r3, r3, #3
 800186e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001876:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800187a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f9b4 	bl	8000bec <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f9b0 	bl	8000bec <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e046      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x580>
 80018a6:	e03e      	b.n	8001926 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e039      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d12c      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	3b01      	subs	r3, #1
 80018d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d123      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d11b      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d113      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	3b01      	subs	r3, #1
 8001908:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d109      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	3b01      	subs	r3, #1
 800191c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	019f800c 	.word	0x019f800c

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e11e      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b91      	ldr	r3, [pc, #580]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d910      	bls.n	8001980 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b8e      	ldr	r3, [pc, #568]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 020f 	bic.w	r2, r3, #15
 8001966:	498c      	ldr	r1, [pc, #560]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b8a      	ldr	r3, [pc, #552]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e106      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d073      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d129      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b81      	ldr	r3, [pc, #516]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0f4      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019a4:	f000 f99e 	bl	8001ce4 <RCC_GetSysClockFreqFromPLLSource>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4a7c      	ldr	r2, [pc, #496]	; (8001ba0 <HAL_RCC_ClockConfig+0x268>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d93f      	bls.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d033      	beq.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d12f      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019da:	4a70      	ldr	r2, [pc, #448]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e024      	b.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0c6      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0be      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a10:	f000 f8ce 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4a61      	ldr	r2, [pc, #388]	; (8001ba0 <HAL_RCC_ClockConfig+0x268>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d909      	bls.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a26:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4957      	ldr	r1, [pc, #348]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a44:	f7ff f8d2 	bl	8000bec <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff f8ce 	bl	8000bec <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e095      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d023      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a42      	ldr	r2, [pc, #264]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001aac:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4936      	ldr	r1, [pc, #216]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b80      	cmp	r3, #128	; 0x80
 8001acc:	d105      	bne.n	8001ada <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ace:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d21d      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 020f 	bic.w	r2, r3, #15
 8001af0:	4929      	ldr	r1, [pc, #164]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001af8:	f7ff f878 	bl	8000bec <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff f874 	bl	8000bec <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e03b      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1ed      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4917      	ldr	r1, [pc, #92]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490f      	ldr	r1, [pc, #60]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b62:	f000 f825 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <HAL_RCC_ClockConfig+0x26c>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x270>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_RCC_ClockConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe ffe4 	bl	8000b54 <HAL_InitTick>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	04c4b400 	.word	0x04c4b400
 8001ba4:	08003ff4 	.word	0x08003ff4
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e047      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e03e      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d136      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c04:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0e:	68d2      	ldr	r2, [r2, #12]
 8001c10:	0a12      	lsrs	r2, r2, #8
 8001c12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
      break;
 8001c1c:	e00c      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c28:	68d2      	ldr	r2, [r2, #12]
 8001c2a:	0a12      	lsrs	r2, r2, #8
 8001c2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
      break;
 8001c36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0e5b      	lsrs	r3, r3, #25
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	3301      	adds	r3, #1
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e001      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c58:	693b      	ldr	r3, [r7, #16]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	016e3600 	.word	0x016e3600

08001c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08004004 	.word	0x08004004

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cbc:	f7ff ffda 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0adb      	lsrs	r3, r3, #11
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08004004 	.word	0x08004004

08001ce4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d10c      	bne.n	8001d22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d08:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d12:	68d2      	ldr	r2, [r2, #12]
 8001d14:	0a12      	lsrs	r2, r2, #8
 8001d16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
    break;
 8001d20:	e00c      	b.n	8001d3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d2c:	68d2      	ldr	r2, [r2, #12]
 8001d2e:	0a12      	lsrs	r2, r2, #8
 8001d30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
    break;
 8001d3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0e5b      	lsrs	r3, r3, #25
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d56:	687b      	ldr	r3, [r7, #4]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000
 8001d68:	016e3600 	.word	0x016e3600
 8001d6c:	00f42400 	.word	0x00f42400

08001d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d78:	2300      	movs	r3, #0
 8001d7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8098 	beq.w	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10d      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6593      	str	r3, [r2, #88]	; 0x58
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dba:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a39      	ldr	r2, [pc, #228]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dc6:	f7fe ff11 	bl	8000bec <HAL_GetTick>
 8001dca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7fe ff0d 	bl	8000bec <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d902      	bls.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	74fb      	strb	r3, [r7, #19]
        break;
 8001de0:	e005      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ef      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d159      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01e      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d019      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e22:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e3c:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fecd 	bl	8000bec <HAL_GetTick>
 8001e52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e54:	e00b      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fec9 	bl	8000bec <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d902      	bls.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	74fb      	strb	r3, [r7, #19]
            break;
 8001e6c:	e006      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ec      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e7c:	7cfb      	ldrb	r3, [r7, #19]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e98:	e008      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e9a:	7cfb      	ldrb	r3, [r7, #19]
 8001e9c:	74bb      	strb	r3, [r7, #18]
 8001e9e:	e005      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eac:	7c7b      	ldrb	r3, [r7, #17]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4ba7      	ldr	r3, [pc, #668]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	4aa6      	ldr	r2, [pc, #664]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eca:	4ba1      	ldr	r3, [pc, #644]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed0:	f023 0203 	bic.w	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	499d      	ldr	r1, [pc, #628]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00a      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eec:	4b98      	ldr	r3, [pc, #608]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	f023 020c 	bic.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4995      	ldr	r1, [pc, #596]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f0e:	4b90      	ldr	r3, [pc, #576]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	498c      	ldr	r1, [pc, #560]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f30:	4b87      	ldr	r3, [pc, #540]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4984      	ldr	r1, [pc, #528]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f52:	4b7f      	ldr	r3, [pc, #508]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	497b      	ldr	r1, [pc, #492]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f74:	4b76      	ldr	r3, [pc, #472]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4973      	ldr	r1, [pc, #460]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f96:	4b6e      	ldr	r3, [pc, #440]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	496a      	ldr	r1, [pc, #424]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fb8:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4962      	ldr	r1, [pc, #392]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	4959      	ldr	r1, [pc, #356]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ffc:	4b54      	ldr	r3, [pc, #336]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	4951      	ldr	r1, [pc, #324]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002024:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	4948      	ldr	r1, [pc, #288]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4940      	ldr	r1, [pc, #256]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800205e:	d105      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002060:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002074:	2b00      	cmp	r3, #0
 8002076:	d015      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002078:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	4932      	ldr	r1, [pc, #200]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002096:	d105      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	4924      	ldr	r1, [pc, #144]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ce:	d105      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f6:	4916      	ldr	r1, [pc, #88]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002106:	d105      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002112:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d019      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4908      	ldr	r1, [pc, #32]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213e:	d109      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a02      	ldr	r2, [pc, #8]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214a:	60d3      	str	r3, [r2, #12]
 800214c:	e002      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d015      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4926      	ldr	r1, [pc, #152]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800217e:	d105      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a20      	ldr	r2, [pc, #128]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a6:	4918      	ldr	r1, [pc, #96]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b6:	d105      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ee:	d105      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e049      	b.n	80022b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fb50 	bl	80008d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 fa5c 	bl	8002708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_TIM_PWM_Start+0x24>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e03c      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d109      	bne.n	80022fa <HAL_TIM_PWM_Start+0x3e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	bf14      	ite	ne
 80022f2:	2301      	movne	r3, #1
 80022f4:	2300      	moveq	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	e02f      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d109      	bne.n	8002314 <HAL_TIM_PWM_Start+0x58>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e022      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d109      	bne.n	800232e <HAL_TIM_PWM_Start+0x72>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e015      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b10      	cmp	r3, #16
 8002332:	d109      	bne.n	8002348 <HAL_TIM_PWM_Start+0x8c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e008      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0a6      	b.n	80024b0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <HAL_TIM_PWM_Start+0xb6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002370:	e023      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d104      	bne.n	8002382 <HAL_TIM_PWM_Start+0xc6>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002380:	e01b      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PWM_Start+0xd6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002390:	e013      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0xe6>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023a0:	e00b      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_PWM_Start+0xf6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b0:	e003      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fd72 	bl	8002eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <HAL_TIM_PWM_Start+0x1fc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d018      	beq.n	8002404 <HAL_TIM_PWM_Start+0x148>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a39      	ldr	r2, [pc, #228]	; (80024bc <HAL_TIM_PWM_Start+0x200>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_TIM_PWM_Start+0x148>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a37      	ldr	r2, [pc, #220]	; (80024c0 <HAL_TIM_PWM_Start+0x204>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00e      	beq.n	8002404 <HAL_TIM_PWM_Start+0x148>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a36      	ldr	r2, [pc, #216]	; (80024c4 <HAL_TIM_PWM_Start+0x208>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_TIM_PWM_Start+0x148>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a34      	ldr	r2, [pc, #208]	; (80024c8 <HAL_TIM_PWM_Start+0x20c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_TIM_PWM_Start+0x148>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a33      	ldr	r2, [pc, #204]	; (80024cc <HAL_TIM_PWM_Start+0x210>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_TIM_PWM_Start+0x14c>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_TIM_PWM_Start+0x14e>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <HAL_TIM_PWM_Start+0x1fc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d022      	beq.n	800246e <HAL_TIM_PWM_Start+0x1b2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d01d      	beq.n	800246e <HAL_TIM_PWM_Start+0x1b2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <HAL_TIM_PWM_Start+0x214>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d018      	beq.n	800246e <HAL_TIM_PWM_Start+0x1b2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_TIM_PWM_Start+0x218>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_TIM_PWM_Start+0x1b2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_TIM_PWM_Start+0x21c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00e      	beq.n	800246e <HAL_TIM_PWM_Start+0x1b2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_TIM_PWM_Start+0x200>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_TIM_PWM_Start+0x1b2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_TIM_PWM_Start+0x204>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d004      	beq.n	800246e <HAL_TIM_PWM_Start+0x1b2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_TIM_PWM_Start+0x210>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d115      	bne.n	800249a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_TIM_PWM_Start+0x220>)
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d015      	beq.n	80024ac <HAL_TIM_PWM_Start+0x1f0>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002486:	d011      	beq.n	80024ac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	e008      	b.n	80024ac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e000      	b.n	80024ae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40013400 	.word	0x40013400
 80024c0:	40014000 	.word	0x40014000
 80024c4:	40014400 	.word	0x40014400
 80024c8:	40014800 	.word	0x40014800
 80024cc:	40015000 	.word	0x40015000
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800
 80024d8:	40000c00 	.word	0x40000c00
 80024dc:	00010007 	.word	0x00010007

080024e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0ff      	b.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b14      	cmp	r3, #20
 800250a:	f200 80f0 	bhi.w	80026ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002569 	.word	0x08002569
 8002518:	080026ef 	.word	0x080026ef
 800251c:	080026ef 	.word	0x080026ef
 8002520:	080026ef 	.word	0x080026ef
 8002524:	080025a9 	.word	0x080025a9
 8002528:	080026ef 	.word	0x080026ef
 800252c:	080026ef 	.word	0x080026ef
 8002530:	080026ef 	.word	0x080026ef
 8002534:	080025eb 	.word	0x080025eb
 8002538:	080026ef 	.word	0x080026ef
 800253c:	080026ef 	.word	0x080026ef
 8002540:	080026ef 	.word	0x080026ef
 8002544:	0800262b 	.word	0x0800262b
 8002548:	080026ef 	.word	0x080026ef
 800254c:	080026ef 	.word	0x080026ef
 8002550:	080026ef 	.word	0x080026ef
 8002554:	0800266d 	.word	0x0800266d
 8002558:	080026ef 	.word	0x080026ef
 800255c:	080026ef 	.word	0x080026ef
 8002560:	080026ef 	.word	0x080026ef
 8002564:	080026ad 	.word	0x080026ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f972 	bl	8002858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0204 	bic.w	r2, r2, #4
 8002592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6999      	ldr	r1, [r3, #24]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	619a      	str	r2, [r3, #24]
      break;
 80025a6:	e0a5      	b.n	80026f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f9ec 	bl	800298c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6999      	ldr	r1, [r3, #24]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	021a      	lsls	r2, r3, #8
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	619a      	str	r2, [r3, #24]
      break;
 80025e8:	e084      	b.n	80026f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fa5f 	bl	8002ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69da      	ldr	r2, [r3, #28]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0208 	orr.w	r2, r2, #8
 8002604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0204 	bic.w	r2, r2, #4
 8002614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69d9      	ldr	r1, [r3, #28]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	61da      	str	r2, [r3, #28]
      break;
 8002628:	e064      	b.n	80026f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fad1 	bl	8002bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69d9      	ldr	r1, [r3, #28]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	021a      	lsls	r2, r3, #8
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	61da      	str	r2, [r3, #28]
      break;
 800266a:	e043      	b.n	80026f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fb44 	bl	8002d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0208 	orr.w	r2, r2, #8
 8002686:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0204 	bic.w	r2, r2, #4
 8002696:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80026aa:	e023      	b.n	80026f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fb8e 	bl	8002dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	021a      	lsls	r2, r3, #8
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80026ec:	e002      	b.n	80026f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
      break;
 80026f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop

08002708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a46      	ldr	r2, [pc, #280]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d017      	beq.n	8002750 <TIM_Base_SetConfig+0x48>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002726:	d013      	beq.n	8002750 <TIM_Base_SetConfig+0x48>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a43      	ldr	r2, [pc, #268]	; (8002838 <TIM_Base_SetConfig+0x130>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00f      	beq.n	8002750 <TIM_Base_SetConfig+0x48>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a42      	ldr	r2, [pc, #264]	; (800283c <TIM_Base_SetConfig+0x134>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00b      	beq.n	8002750 <TIM_Base_SetConfig+0x48>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a41      	ldr	r2, [pc, #260]	; (8002840 <TIM_Base_SetConfig+0x138>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d007      	beq.n	8002750 <TIM_Base_SetConfig+0x48>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a40      	ldr	r2, [pc, #256]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0x48>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3f      	ldr	r2, [pc, #252]	; (8002848 <TIM_Base_SetConfig+0x140>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d108      	bne.n	8002762 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a33      	ldr	r2, [pc, #204]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d023      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002770:	d01f      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a30      	ldr	r2, [pc, #192]	; (8002838 <TIM_Base_SetConfig+0x130>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01b      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a2f      	ldr	r2, [pc, #188]	; (800283c <TIM_Base_SetConfig+0x134>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d017      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2e      	ldr	r2, [pc, #184]	; (8002840 <TIM_Base_SetConfig+0x138>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a2d      	ldr	r2, [pc, #180]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00f      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a2d      	ldr	r2, [pc, #180]	; (800284c <TIM_Base_SetConfig+0x144>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00b      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <TIM_Base_SetConfig+0x148>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a2b      	ldr	r2, [pc, #172]	; (8002854 <TIM_Base_SetConfig+0x14c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <TIM_Base_SetConfig+0xaa>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a26      	ldr	r2, [pc, #152]	; (8002848 <TIM_Base_SetConfig+0x140>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d108      	bne.n	80027c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d013      	beq.n	8002818 <TIM_Base_SetConfig+0x110>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a14      	ldr	r2, [pc, #80]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00f      	beq.n	8002818 <TIM_Base_SetConfig+0x110>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <TIM_Base_SetConfig+0x144>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0x110>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <TIM_Base_SetConfig+0x148>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x110>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <TIM_Base_SetConfig+0x14c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x110>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <TIM_Base_SetConfig+0x140>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d103      	bne.n	8002820 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	615a      	str	r2, [r3, #20]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40013400 	.word	0x40013400
 8002848:	40015000 	.word	0x40015000
 800284c:	40014000 	.word	0x40014000
 8002850:	40014400 	.word	0x40014400
 8002854:	40014800 	.word	0x40014800

08002858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0201 	bic.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 0302 	bic.w	r3, r3, #2
 80028a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <TIM_OC1_SetConfig+0x11c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d013      	beq.n	80028e0 <TIM_OC1_SetConfig+0x88>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <TIM_OC1_SetConfig+0x120>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00f      	beq.n	80028e0 <TIM_OC1_SetConfig+0x88>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a2e      	ldr	r2, [pc, #184]	; (800297c <TIM_OC1_SetConfig+0x124>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00b      	beq.n	80028e0 <TIM_OC1_SetConfig+0x88>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a2d      	ldr	r2, [pc, #180]	; (8002980 <TIM_OC1_SetConfig+0x128>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <TIM_OC1_SetConfig+0x88>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2c      	ldr	r2, [pc, #176]	; (8002984 <TIM_OC1_SetConfig+0x12c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <TIM_OC1_SetConfig+0x88>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a2b      	ldr	r2, [pc, #172]	; (8002988 <TIM_OC1_SetConfig+0x130>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d10c      	bne.n	80028fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f023 0308 	bic.w	r3, r3, #8
 80028e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <TIM_OC1_SetConfig+0x11c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <TIM_OC1_SetConfig+0xd2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <TIM_OC1_SetConfig+0x120>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00f      	beq.n	800292a <TIM_OC1_SetConfig+0xd2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <TIM_OC1_SetConfig+0x124>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_OC1_SetConfig+0xd2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <TIM_OC1_SetConfig+0x128>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_OC1_SetConfig+0xd2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <TIM_OC1_SetConfig+0x12c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_OC1_SetConfig+0xd2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <TIM_OC1_SetConfig+0x130>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d111      	bne.n	800294e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	621a      	str	r2, [r3, #32]
}
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40013400 	.word	0x40013400
 800297c:	40014000 	.word	0x40014000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800
 8002988:	40015000 	.word	0x40015000

0800298c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f023 0210 	bic.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0320 	bic.w	r3, r3, #32
 80029da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <TIM_OC2_SetConfig+0x110>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <TIM_OC2_SetConfig+0x74>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a2b      	ldr	r2, [pc, #172]	; (8002aa0 <TIM_OC2_SetConfig+0x114>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_OC2_SetConfig+0x74>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <TIM_OC2_SetConfig+0x118>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d10d      	bne.n	8002a1c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <TIM_OC2_SetConfig+0x110>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <TIM_OC2_SetConfig+0xc0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <TIM_OC2_SetConfig+0x114>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00f      	beq.n	8002a4c <TIM_OC2_SetConfig+0xc0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <TIM_OC2_SetConfig+0x11c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <TIM_OC2_SetConfig+0xc0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <TIM_OC2_SetConfig+0x120>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <TIM_OC2_SetConfig+0xc0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <TIM_OC2_SetConfig+0x124>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <TIM_OC2_SetConfig+0xc0>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <TIM_OC2_SetConfig+0x118>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d113      	bne.n	8002a74 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40013400 	.word	0x40013400
 8002aa4:	40015000 	.word	0x40015000
 8002aa8:	40014000 	.word	0x40014000
 8002aac:	40014400 	.word	0x40014400
 8002ab0:	40014800 	.word	0x40014800

08002ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <TIM_OC3_SetConfig+0x10c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <TIM_OC3_SetConfig+0x72>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <TIM_OC3_SetConfig+0x110>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <TIM_OC3_SetConfig+0x72>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a29      	ldr	r2, [pc, #164]	; (8002bc8 <TIM_OC3_SetConfig+0x114>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10d      	bne.n	8002b42 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <TIM_OC3_SetConfig+0x10c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d013      	beq.n	8002b72 <TIM_OC3_SetConfig+0xbe>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <TIM_OC3_SetConfig+0x110>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00f      	beq.n	8002b72 <TIM_OC3_SetConfig+0xbe>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <TIM_OC3_SetConfig+0x118>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00b      	beq.n	8002b72 <TIM_OC3_SetConfig+0xbe>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <TIM_OC3_SetConfig+0x11c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <TIM_OC3_SetConfig+0xbe>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <TIM_OC3_SetConfig+0x120>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d003      	beq.n	8002b72 <TIM_OC3_SetConfig+0xbe>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <TIM_OC3_SetConfig+0x114>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d113      	bne.n	8002b9a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	621a      	str	r2, [r3, #32]
}
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40013400 	.word	0x40013400
 8002bc8:	40015000 	.word	0x40015000
 8002bcc:	40014000 	.word	0x40014000
 8002bd0:	40014400 	.word	0x40014400
 8002bd4:	40014800 	.word	0x40014800

08002bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	031b      	lsls	r3, r3, #12
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a2c      	ldr	r2, [pc, #176]	; (8002ce8 <TIM_OC4_SetConfig+0x110>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <TIM_OC4_SetConfig+0x74>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <TIM_OC4_SetConfig+0x114>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_OC4_SetConfig+0x74>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <TIM_OC4_SetConfig+0x118>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10d      	bne.n	8002c68 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	031b      	lsls	r3, r3, #12
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <TIM_OC4_SetConfig+0x110>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d013      	beq.n	8002c98 <TIM_OC4_SetConfig+0xc0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <TIM_OC4_SetConfig+0x114>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00f      	beq.n	8002c98 <TIM_OC4_SetConfig+0xc0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <TIM_OC4_SetConfig+0x11c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_OC4_SetConfig+0xc0>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <TIM_OC4_SetConfig+0x120>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <TIM_OC4_SetConfig+0xc0>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <TIM_OC4_SetConfig+0x124>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_OC4_SetConfig+0xc0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <TIM_OC4_SetConfig+0x118>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d113      	bne.n	8002cc0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ca6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	019b      	lsls	r3, r3, #6
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40013400 	.word	0x40013400
 8002cf0:	40015000 	.word	0x40015000
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800

08002d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <TIM_OC5_SetConfig+0xbc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <TIM_OC5_SetConfig+0x82>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <TIM_OC5_SetConfig+0xc0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <TIM_OC5_SetConfig+0x82>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <TIM_OC5_SetConfig+0xc4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <TIM_OC5_SetConfig+0x82>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <TIM_OC5_SetConfig+0xc8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <TIM_OC5_SetConfig+0x82>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <TIM_OC5_SetConfig+0xcc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_OC5_SetConfig+0x82>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <TIM_OC5_SetConfig+0xd0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d109      	bne.n	8002d96 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40013400 	.word	0x40013400
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800
 8002dd0:	40015000 	.word	0x40015000

08002dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	051b      	lsls	r3, r3, #20
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <TIM_OC6_SetConfig+0xc0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <TIM_OC6_SetConfig+0x84>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <TIM_OC6_SetConfig+0xc4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00f      	beq.n	8002e58 <TIM_OC6_SetConfig+0x84>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <TIM_OC6_SetConfig+0xc8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <TIM_OC6_SetConfig+0x84>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <TIM_OC6_SetConfig+0xcc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <TIM_OC6_SetConfig+0x84>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <TIM_OC6_SetConfig+0xd0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_OC6_SetConfig+0x84>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <TIM_OC6_SetConfig+0xd4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d109      	bne.n	8002e6c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	029b      	lsls	r3, r3, #10
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40013400 	.word	0x40013400
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800
 8002ea8:	40015000 	.word	0x40015000

08002eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_TIMEx_PWMN_Start+0x24>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e022      	b.n	8002f62 <HAL_TIMEx_PWMN_Start+0x6a>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d109      	bne.n	8002f36 <HAL_TIMEx_PWMN_Start+0x3e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e015      	b.n	8002f62 <HAL_TIMEx_PWMN_Start+0x6a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d109      	bne.n	8002f50 <HAL_TIMEx_PWMN_Start+0x58>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e008      	b.n	8002f62 <HAL_TIMEx_PWMN_Start+0x6a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e073      	b.n	8003052 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIMEx_PWMN_Start+0x82>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f78:	e013      	b.n	8002fa2 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIMEx_PWMN_Start+0x92>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f88:	e00b      	b.n	8002fa2 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIMEx_PWMN_Start+0xa2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f98:	e003      	b.n	8002fa2 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f9c1 	bl	8003332 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	; (800305c <HAL_TIMEx_PWMN_Start+0x164>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d022      	beq.n	8003010 <HAL_TIMEx_PWMN_Start+0x118>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd2:	d01d      	beq.n	8003010 <HAL_TIMEx_PWMN_Start+0x118>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a21      	ldr	r2, [pc, #132]	; (8003060 <HAL_TIMEx_PWMN_Start+0x168>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d018      	beq.n	8003010 <HAL_TIMEx_PWMN_Start+0x118>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a20      	ldr	r2, [pc, #128]	; (8003064 <HAL_TIMEx_PWMN_Start+0x16c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_TIMEx_PWMN_Start+0x118>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_TIMEx_PWMN_Start+0x170>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00e      	beq.n	8003010 <HAL_TIMEx_PWMN_Start+0x118>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_TIMEx_PWMN_Start+0x174>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_TIMEx_PWMN_Start+0x118>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_TIMEx_PWMN_Start+0x178>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_TIMEx_PWMN_Start+0x118>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_TIMEx_PWMN_Start+0x17c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d115      	bne.n	800303c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_TIMEx_PWMN_Start+0x180>)
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b06      	cmp	r3, #6
 8003020:	d015      	beq.n	800304e <HAL_TIMEx_PWMN_Start+0x156>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003028:	d011      	beq.n	800304e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303a:	e008      	b.n	800304e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e000      	b.n	8003050 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	40013400 	.word	0x40013400
 8003070:	40014000 	.word	0x40014000
 8003074:	40015000 	.word	0x40015000
 8003078:	00010007 	.word	0x00010007

0800307c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003090:	2302      	movs	r3, #2
 8003092:	e074      	b.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a34      	ldr	r2, [pc, #208]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a33      	ldr	r2, [pc, #204]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a31      	ldr	r2, [pc, #196]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d022      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d01d      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d018      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10c      	bne.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4313      	orrs	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40013400 	.word	0x40013400
 8003194:	40015000 	.word	0x40015000
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	40014000 	.word	0x40014000

080031a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e096      	b.n	80032f2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2d      	ldr	r2, [pc, #180]	; (8003304 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d106      	bne.n	800326a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d12b      	bne.n	80032e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	051b      	lsls	r3, r3, #20
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a11      	ldr	r2, [pc, #68]	; (8003300 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a10      	ldr	r2, [pc, #64]	; (8003304 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d106      	bne.n	80032e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40013400 	.word	0x40013400
 8003308:	40015000 	.word	0x40015000

0800330c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003332:	b480      	push	{r7}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	2204      	movs	r2, #4
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1a      	ldr	r2, [r3, #32]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	43db      	mvns	r3, r3
 8003354:	401a      	ands	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	621a      	str	r2, [r3, #32]
}
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e042      	b.n	8003414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fd fb3d 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2224      	movs	r2, #36	; 0x24
 80033aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f82c 	bl	800341c <UART_SetConfig>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e022      	b.n	8003414 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fb1c 	bl	8003a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fba3 	bl	8003b58 <UART_CheckIdleState>
 8003412:	4603      	mov	r3, r0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b08c      	sub	sp, #48	; 0x30
 8003422:	af00      	add	r7, sp, #0
 8003424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	431a      	orrs	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	431a      	orrs	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4313      	orrs	r3, r2
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4baa      	ldr	r3, [pc, #680]	; (80036f4 <UART_SetConfig+0x2d8>)
 800344c:	4013      	ands	r3, r2
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003454:	430b      	orrs	r3, r1
 8003456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a9f      	ldr	r2, [pc, #636]	; (80036f8 <UART_SetConfig+0x2dc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003484:	4313      	orrs	r3, r2
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003492:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800349c:	430b      	orrs	r3, r1
 800349e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f023 010f 	bic.w	r1, r3, #15
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a90      	ldr	r2, [pc, #576]	; (80036fc <UART_SetConfig+0x2e0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d125      	bne.n	800350c <UART_SetConfig+0xf0>
 80034c0:	4b8f      	ldr	r3, [pc, #572]	; (8003700 <UART_SetConfig+0x2e4>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d81a      	bhi.n	8003504 <UART_SetConfig+0xe8>
 80034ce:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <UART_SetConfig+0xb8>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	080034e5 	.word	0x080034e5
 80034d8:	080034f5 	.word	0x080034f5
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034fd 	.word	0x080034fd
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ea:	e116      	b.n	800371a <UART_SetConfig+0x2fe>
 80034ec:	2302      	movs	r3, #2
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f2:	e112      	b.n	800371a <UART_SetConfig+0x2fe>
 80034f4:	2304      	movs	r3, #4
 80034f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fa:	e10e      	b.n	800371a <UART_SetConfig+0x2fe>
 80034fc:	2308      	movs	r3, #8
 80034fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003502:	e10a      	b.n	800371a <UART_SetConfig+0x2fe>
 8003504:	2310      	movs	r3, #16
 8003506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350a:	e106      	b.n	800371a <UART_SetConfig+0x2fe>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a7c      	ldr	r2, [pc, #496]	; (8003704 <UART_SetConfig+0x2e8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d138      	bne.n	8003588 <UART_SetConfig+0x16c>
 8003516:	4b7a      	ldr	r3, [pc, #488]	; (8003700 <UART_SetConfig+0x2e4>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d82d      	bhi.n	8003580 <UART_SetConfig+0x164>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0x110>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	08003561 	.word	0x08003561
 8003530:	08003581 	.word	0x08003581
 8003534:	08003581 	.word	0x08003581
 8003538:	08003581 	.word	0x08003581
 800353c:	08003571 	.word	0x08003571
 8003540:	08003581 	.word	0x08003581
 8003544:	08003581 	.word	0x08003581
 8003548:	08003581 	.word	0x08003581
 800354c:	08003569 	.word	0x08003569
 8003550:	08003581 	.word	0x08003581
 8003554:	08003581 	.word	0x08003581
 8003558:	08003581 	.word	0x08003581
 800355c:	08003579 	.word	0x08003579
 8003560:	2300      	movs	r3, #0
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003566:	e0d8      	b.n	800371a <UART_SetConfig+0x2fe>
 8003568:	2302      	movs	r3, #2
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356e:	e0d4      	b.n	800371a <UART_SetConfig+0x2fe>
 8003570:	2304      	movs	r3, #4
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003576:	e0d0      	b.n	800371a <UART_SetConfig+0x2fe>
 8003578:	2308      	movs	r3, #8
 800357a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800357e:	e0cc      	b.n	800371a <UART_SetConfig+0x2fe>
 8003580:	2310      	movs	r3, #16
 8003582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003586:	e0c8      	b.n	800371a <UART_SetConfig+0x2fe>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5e      	ldr	r2, [pc, #376]	; (8003708 <UART_SetConfig+0x2ec>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d125      	bne.n	80035de <UART_SetConfig+0x1c2>
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <UART_SetConfig+0x2e4>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800359c:	2b30      	cmp	r3, #48	; 0x30
 800359e:	d016      	beq.n	80035ce <UART_SetConfig+0x1b2>
 80035a0:	2b30      	cmp	r3, #48	; 0x30
 80035a2:	d818      	bhi.n	80035d6 <UART_SetConfig+0x1ba>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d00a      	beq.n	80035be <UART_SetConfig+0x1a2>
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d814      	bhi.n	80035d6 <UART_SetConfig+0x1ba>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <UART_SetConfig+0x19a>
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d008      	beq.n	80035c6 <UART_SetConfig+0x1aa>
 80035b4:	e00f      	b.n	80035d6 <UART_SetConfig+0x1ba>
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035bc:	e0ad      	b.n	800371a <UART_SetConfig+0x2fe>
 80035be:	2302      	movs	r3, #2
 80035c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c4:	e0a9      	b.n	800371a <UART_SetConfig+0x2fe>
 80035c6:	2304      	movs	r3, #4
 80035c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035cc:	e0a5      	b.n	800371a <UART_SetConfig+0x2fe>
 80035ce:	2308      	movs	r3, #8
 80035d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d4:	e0a1      	b.n	800371a <UART_SetConfig+0x2fe>
 80035d6:	2310      	movs	r3, #16
 80035d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035dc:	e09d      	b.n	800371a <UART_SetConfig+0x2fe>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a4a      	ldr	r2, [pc, #296]	; (800370c <UART_SetConfig+0x2f0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d125      	bne.n	8003634 <UART_SetConfig+0x218>
 80035e8:	4b45      	ldr	r3, [pc, #276]	; (8003700 <UART_SetConfig+0x2e4>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035f2:	2bc0      	cmp	r3, #192	; 0xc0
 80035f4:	d016      	beq.n	8003624 <UART_SetConfig+0x208>
 80035f6:	2bc0      	cmp	r3, #192	; 0xc0
 80035f8:	d818      	bhi.n	800362c <UART_SetConfig+0x210>
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d00a      	beq.n	8003614 <UART_SetConfig+0x1f8>
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d814      	bhi.n	800362c <UART_SetConfig+0x210>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <UART_SetConfig+0x1f0>
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d008      	beq.n	800361c <UART_SetConfig+0x200>
 800360a:	e00f      	b.n	800362c <UART_SetConfig+0x210>
 800360c:	2300      	movs	r3, #0
 800360e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003612:	e082      	b.n	800371a <UART_SetConfig+0x2fe>
 8003614:	2302      	movs	r3, #2
 8003616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361a:	e07e      	b.n	800371a <UART_SetConfig+0x2fe>
 800361c:	2304      	movs	r3, #4
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	e07a      	b.n	800371a <UART_SetConfig+0x2fe>
 8003624:	2308      	movs	r3, #8
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362a:	e076      	b.n	800371a <UART_SetConfig+0x2fe>
 800362c:	2310      	movs	r3, #16
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003632:	e072      	b.n	800371a <UART_SetConfig+0x2fe>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a35      	ldr	r2, [pc, #212]	; (8003710 <UART_SetConfig+0x2f4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d12a      	bne.n	8003694 <UART_SetConfig+0x278>
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <UART_SetConfig+0x2e4>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364c:	d01a      	beq.n	8003684 <UART_SetConfig+0x268>
 800364e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003652:	d81b      	bhi.n	800368c <UART_SetConfig+0x270>
 8003654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003658:	d00c      	beq.n	8003674 <UART_SetConfig+0x258>
 800365a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365e:	d815      	bhi.n	800368c <UART_SetConfig+0x270>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <UART_SetConfig+0x250>
 8003664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003668:	d008      	beq.n	800367c <UART_SetConfig+0x260>
 800366a:	e00f      	b.n	800368c <UART_SetConfig+0x270>
 800366c:	2300      	movs	r3, #0
 800366e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003672:	e052      	b.n	800371a <UART_SetConfig+0x2fe>
 8003674:	2302      	movs	r3, #2
 8003676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800367a:	e04e      	b.n	800371a <UART_SetConfig+0x2fe>
 800367c:	2304      	movs	r3, #4
 800367e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003682:	e04a      	b.n	800371a <UART_SetConfig+0x2fe>
 8003684:	2308      	movs	r3, #8
 8003686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368a:	e046      	b.n	800371a <UART_SetConfig+0x2fe>
 800368c:	2310      	movs	r3, #16
 800368e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003692:	e042      	b.n	800371a <UART_SetConfig+0x2fe>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a17      	ldr	r2, [pc, #92]	; (80036f8 <UART_SetConfig+0x2dc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d13a      	bne.n	8003714 <UART_SetConfig+0x2f8>
 800369e:	4b18      	ldr	r3, [pc, #96]	; (8003700 <UART_SetConfig+0x2e4>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ac:	d01a      	beq.n	80036e4 <UART_SetConfig+0x2c8>
 80036ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b2:	d81b      	bhi.n	80036ec <UART_SetConfig+0x2d0>
 80036b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b8:	d00c      	beq.n	80036d4 <UART_SetConfig+0x2b8>
 80036ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036be:	d815      	bhi.n	80036ec <UART_SetConfig+0x2d0>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <UART_SetConfig+0x2b0>
 80036c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c8:	d008      	beq.n	80036dc <UART_SetConfig+0x2c0>
 80036ca:	e00f      	b.n	80036ec <UART_SetConfig+0x2d0>
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d2:	e022      	b.n	800371a <UART_SetConfig+0x2fe>
 80036d4:	2302      	movs	r3, #2
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036da:	e01e      	b.n	800371a <UART_SetConfig+0x2fe>
 80036dc:	2304      	movs	r3, #4
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036e2:	e01a      	b.n	800371a <UART_SetConfig+0x2fe>
 80036e4:	2308      	movs	r3, #8
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ea:	e016      	b.n	800371a <UART_SetConfig+0x2fe>
 80036ec:	2310      	movs	r3, #16
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036f2:	e012      	b.n	800371a <UART_SetConfig+0x2fe>
 80036f4:	cfff69f3 	.word	0xcfff69f3
 80036f8:	40008000 	.word	0x40008000
 80036fc:	40013800 	.word	0x40013800
 8003700:	40021000 	.word	0x40021000
 8003704:	40004400 	.word	0x40004400
 8003708:	40004800 	.word	0x40004800
 800370c:	40004c00 	.word	0x40004c00
 8003710:	40005000 	.word	0x40005000
 8003714:	2310      	movs	r3, #16
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4aae      	ldr	r2, [pc, #696]	; (80039d8 <UART_SetConfig+0x5bc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	f040 8097 	bne.w	8003854 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800372a:	2b08      	cmp	r3, #8
 800372c:	d823      	bhi.n	8003776 <UART_SetConfig+0x35a>
 800372e:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <UART_SetConfig+0x318>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	08003759 	.word	0x08003759
 8003738:	08003777 	.word	0x08003777
 800373c:	08003761 	.word	0x08003761
 8003740:	08003777 	.word	0x08003777
 8003744:	08003767 	.word	0x08003767
 8003748:	08003777 	.word	0x08003777
 800374c:	08003777 	.word	0x08003777
 8003750:	08003777 	.word	0x08003777
 8003754:	0800376f 	.word	0x0800376f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003758:	f7fe fa98 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 800375c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800375e:	e010      	b.n	8003782 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003760:	4b9e      	ldr	r3, [pc, #632]	; (80039dc <UART_SetConfig+0x5c0>)
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003764:	e00d      	b.n	8003782 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003766:	f7fe fa23 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376c:	e009      	b.n	8003782 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003774:	e005      	b.n	8003782 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8130 	beq.w	80039ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	4a94      	ldr	r2, [pc, #592]	; (80039e0 <UART_SetConfig+0x5c4>)
 8003790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003794:	461a      	mov	r2, r3
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	fbb3 f3f2 	udiv	r3, r3, r2
 800379c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d305      	bcc.n	80037ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d903      	bls.n	80037c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037c0:	e113      	b.n	80039ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	2200      	movs	r2, #0
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	60fa      	str	r2, [r7, #12]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	4a84      	ldr	r2, [pc, #528]	; (80039e0 <UART_SetConfig+0x5c4>)
 80037d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2200      	movs	r2, #0
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037e4:	f7fc fd18 	bl	8000218 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	020b      	lsls	r3, r1, #8
 80037fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037fe:	0202      	lsls	r2, r0, #8
 8003800:	6979      	ldr	r1, [r7, #20]
 8003802:	6849      	ldr	r1, [r1, #4]
 8003804:	0849      	lsrs	r1, r1, #1
 8003806:	2000      	movs	r0, #0
 8003808:	460c      	mov	r4, r1
 800380a:	4605      	mov	r5, r0
 800380c:	eb12 0804 	adds.w	r8, r2, r4
 8003810:	eb43 0905 	adc.w	r9, r3, r5
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	469a      	mov	sl, r3
 800381c:	4693      	mov	fp, r2
 800381e:	4652      	mov	r2, sl
 8003820:	465b      	mov	r3, fp
 8003822:	4640      	mov	r0, r8
 8003824:	4649      	mov	r1, r9
 8003826:	f7fc fcf7 	bl	8000218 <__aeabi_uldivmod>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4613      	mov	r3, r2
 8003830:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003838:	d308      	bcc.n	800384c <UART_SetConfig+0x430>
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003840:	d204      	bcs.n	800384c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a3a      	ldr	r2, [r7, #32]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	e0ce      	b.n	80039ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003852:	e0ca      	b.n	80039ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385c:	d166      	bne.n	800392c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800385e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003862:	2b08      	cmp	r3, #8
 8003864:	d827      	bhi.n	80038b6 <UART_SetConfig+0x49a>
 8003866:	a201      	add	r2, pc, #4	; (adr r2, 800386c <UART_SetConfig+0x450>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	08003891 	.word	0x08003891
 8003870:	08003899 	.word	0x08003899
 8003874:	080038a1 	.word	0x080038a1
 8003878:	080038b7 	.word	0x080038b7
 800387c:	080038a7 	.word	0x080038a7
 8003880:	080038b7 	.word	0x080038b7
 8003884:	080038b7 	.word	0x080038b7
 8003888:	080038b7 	.word	0x080038b7
 800388c:	080038af 	.word	0x080038af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003890:	f7fe f9fc 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003896:	e014      	b.n	80038c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003898:	f7fe fa0e 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 800389c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800389e:	e010      	b.n	80038c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a0:	4b4e      	ldr	r3, [pc, #312]	; (80039dc <UART_SetConfig+0x5c0>)
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038a4:	e00d      	b.n	80038c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038a6:	f7fe f983 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 80038aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038ac:	e009      	b.n	80038c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038b4:	e005      	b.n	80038c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8090 	beq.w	80039ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	4a44      	ldr	r2, [pc, #272]	; (80039e0 <UART_SetConfig+0x5c4>)
 80038d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038d4:	461a      	mov	r2, r3
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038dc:	005a      	lsls	r2, r3, #1
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	441a      	add	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d916      	bls.n	8003924 <UART_SetConfig+0x508>
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d212      	bcs.n	8003924 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f023 030f 	bic.w	r3, r3, #15
 8003906:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	b29b      	uxth	r3, r3
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	b29a      	uxth	r2, r3
 8003914:	8bfb      	ldrh	r3, [r7, #30]
 8003916:	4313      	orrs	r3, r2
 8003918:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	8bfa      	ldrh	r2, [r7, #30]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	e062      	b.n	80039ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800392a:	e05e      	b.n	80039ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800392c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003930:	2b08      	cmp	r3, #8
 8003932:	d828      	bhi.n	8003986 <UART_SetConfig+0x56a>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0x520>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003961 	.word	0x08003961
 8003940:	08003969 	.word	0x08003969
 8003944:	08003971 	.word	0x08003971
 8003948:	08003987 	.word	0x08003987
 800394c:	08003977 	.word	0x08003977
 8003950:	08003987 	.word	0x08003987
 8003954:	08003987 	.word	0x08003987
 8003958:	08003987 	.word	0x08003987
 800395c:	0800397f 	.word	0x0800397f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7fe f994 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003966:	e014      	b.n	8003992 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003968:	f7fe f9a6 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 800396c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800396e:	e010      	b.n	8003992 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <UART_SetConfig+0x5c0>)
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003974:	e00d      	b.n	8003992 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003976:	f7fe f91b 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 800397a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800397c:	e009      	b.n	8003992 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003984:	e005      	b.n	8003992 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003990:	bf00      	nop
    }

    if (pclk != 0U)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	d028      	beq.n	80039ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <UART_SetConfig+0x5c4>)
 800399e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039a2:	461a      	mov	r2, r3
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	441a      	add	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	2b0f      	cmp	r3, #15
 80039c0:	d910      	bls.n	80039e4 <UART_SetConfig+0x5c8>
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c8:	d20c      	bcs.n	80039e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	e009      	b.n	80039ea <UART_SetConfig+0x5ce>
 80039d6:	bf00      	nop
 80039d8:	40008000 	.word	0x40008000
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	0800400c 	.word	0x0800400c
      }
      else
      {
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2200      	movs	r2, #0
 8003a04:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3730      	adds	r7, #48	; 0x30
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01a      	beq.n	8003b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b12:	d10a      	bne.n	8003b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b68:	f7fd f840 	bl	8000bec <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d10e      	bne.n	8003b9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f82f 	bl	8003bee <UART_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e025      	b.n	8003be6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d10e      	bne.n	8003bc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f819 	bl	8003bee <UART_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e00f      	b.n	8003be6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b09c      	sub	sp, #112	; 0x70
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfe:	e0a9      	b.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c06:	f000 80a5 	beq.w	8003d54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fc ffef 	bl	8000bec <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d140      	bne.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c34:	667b      	str	r3, [r7, #100]	; 0x64
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	663b      	str	r3, [r7, #96]	; 0x60
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e069      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d051      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbe:	d149      	bne.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e6      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d1c:	623a      	str	r2, [r7, #32]
 8003d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	69f9      	ldr	r1, [r7, #28]
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e5      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e010      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	f43f af46 	beq.w	8003c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3770      	adds	r7, #112	; 0x70
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b085      	sub	sp, #20
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e027      	b.n	8003de4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003dc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e02d      	b.n	8003e64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f84f 	bl	8003ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e02d      	b.n	8003ee0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	; 0x24
 8003e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f811 	bl	8003ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d108      	bne.n	8003f0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f08:	e031      	b.n	8003f6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f0e:	2308      	movs	r3, #8
 8003f10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	0e5b      	lsrs	r3, r3, #25
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	0f5b      	lsrs	r3, r3, #29
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f32:	7bbb      	ldrb	r3, [r7, #14]
 8003f34:	7b3a      	ldrb	r2, [r7, #12]
 8003f36:	4911      	ldr	r1, [pc, #68]	; (8003f7c <UARTEx_SetNbDataToProcess+0x94>)
 8003f38:	5c8a      	ldrb	r2, [r1, r2]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f3e:	7b3a      	ldrb	r2, [r7, #12]
 8003f40:	490f      	ldr	r1, [pc, #60]	; (8003f80 <UARTEx_SetNbDataToProcess+0x98>)
 8003f42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	7b7a      	ldrb	r2, [r7, #13]
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <UARTEx_SetNbDataToProcess+0x94>)
 8003f56:	5c8a      	ldrb	r2, [r1, r2]
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f5c:	7b7a      	ldrb	r2, [r7, #13]
 8003f5e:	4908      	ldr	r1, [pc, #32]	; (8003f80 <UARTEx_SetNbDataToProcess+0x98>)
 8003f60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f62:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	08004024 	.word	0x08004024
 8003f80:	0800402c 	.word	0x0800402c

08003f84 <__libc_init_array>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	4d0d      	ldr	r5, [pc, #52]	; (8003fbc <__libc_init_array+0x38>)
 8003f88:	4c0d      	ldr	r4, [pc, #52]	; (8003fc0 <__libc_init_array+0x3c>)
 8003f8a:	1b64      	subs	r4, r4, r5
 8003f8c:	10a4      	asrs	r4, r4, #2
 8003f8e:	2600      	movs	r6, #0
 8003f90:	42a6      	cmp	r6, r4
 8003f92:	d109      	bne.n	8003fa8 <__libc_init_array+0x24>
 8003f94:	4d0b      	ldr	r5, [pc, #44]	; (8003fc4 <__libc_init_array+0x40>)
 8003f96:	4c0c      	ldr	r4, [pc, #48]	; (8003fc8 <__libc_init_array+0x44>)
 8003f98:	f000 f820 	bl	8003fdc <_init>
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	2600      	movs	r6, #0
 8003fa2:	42a6      	cmp	r6, r4
 8003fa4:	d105      	bne.n	8003fb2 <__libc_init_array+0x2e>
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fac:	4798      	blx	r3
 8003fae:	3601      	adds	r6, #1
 8003fb0:	e7ee      	b.n	8003f90 <__libc_init_array+0xc>
 8003fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb6:	4798      	blx	r3
 8003fb8:	3601      	adds	r6, #1
 8003fba:	e7f2      	b.n	8003fa2 <__libc_init_array+0x1e>
 8003fbc:	0800403c 	.word	0x0800403c
 8003fc0:	0800403c 	.word	0x0800403c
 8003fc4:	0800403c 	.word	0x0800403c
 8003fc8:	08004040 	.word	0x08004040

08003fcc <memset>:
 8003fcc:	4402      	add	r2, r0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <memset+0xa>
 8003fd4:	4770      	bx	lr
 8003fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fda:	e7f9      	b.n	8003fd0 <memset+0x4>

08003fdc <_init>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr

08003fe8 <_fini>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr

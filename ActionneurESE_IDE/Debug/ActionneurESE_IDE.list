
ActionneurESE_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080062d4  080062d4  000162d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006510  08006510  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08006510  08006510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006518  08006518  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800651c  0800651c  0001651c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08006520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  08006628  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08006628  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001354e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267c  00000000  00000000  00033686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00035d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00036d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027693  00000000  00000000  00037d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013edf  00000000  00000000  0005f3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd1e2  00000000  00000000  00073292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f48  00000000  00000000  001704c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	080062bc 	.word	0x080062bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	080062bc 	.word	0x080062bc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_GPIO_Init+0xbc>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <MX_GPIO_Init+0xbc>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_GPIO_Init+0xbc>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xbc>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <MX_GPIO_Init+0xbc>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xbc>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_GPIO_Init+0xbc>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <MX_GPIO_Init+0xbc>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_GPIO_Init+0xbc>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f000 ffef 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ISO_RESET_Pin;
 800065e:	f242 0308 	movw	r3, #8200	; 0x2008
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000664:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	480f      	ldr	r0, [pc, #60]	; (80006b4 <MX_GPIO_Init+0xc0>)
 8000676:	f000 fe5f 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f000 fe50 	bl	8001338 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2028      	movs	r0, #40	; 0x28
 800069e:	f000 fe16 	bl	80012ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a2:	2028      	movs	r0, #40	; 0x28
 80006a4:	f000 fe2d 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000800 	.word	0x48000800

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09e      	sub	sp, #120	; 0x78
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fc94 	bl	8000ff2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f931 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f7ff ff91 	bl	80005f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006d2:	f000 fac3 	bl	8000c5c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 fbbf 	bl	8000e58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2224      	movs	r2, #36	; 0x24
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 fd8d 	bl	8005200 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80006e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ea:	2240      	movs	r2, #64	; 0x40
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 fd86 	bl	8005200 <memset>
 80006f4:	4b79      	ldr	r3, [pc, #484]	; (80008dc <main+0x224>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80006fa:	2240      	movs	r2, #64	; 0x40
 80006fc:	2100      	movs	r1, #0
 80006fe:	4878      	ldr	r0, [pc, #480]	; (80008e0 <main+0x228>)
 8000700:	f004 fd7e 	bl	8005200 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000704:	2201      	movs	r2, #1
 8000706:	4975      	ldr	r1, [pc, #468]	; (80008dc <main+0x224>)
 8000708:	4876      	ldr	r0, [pc, #472]	; (80008e4 <main+0x22c>)
 800070a:	f003 f9a7 	bl	8003a5c <HAL_UART_Receive_IT>
  HAL_Delay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f000 fce0 	bl	80010d4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000718:	2266      	movs	r2, #102	; 0x66
 800071a:	4973      	ldr	r1, [pc, #460]	; (80008e8 <main+0x230>)
 800071c:	4871      	ldr	r0, [pc, #452]	; (80008e4 <main+0x22c>)
 800071e:	f003 f907 	bl	8003930 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000726:	2218      	movs	r2, #24
 8000728:	4970      	ldr	r1, [pc, #448]	; (80008ec <main+0x234>)
 800072a:	486e      	ldr	r0, [pc, #440]	; (80008e4 <main+0x22c>)
 800072c:	f003 f900 	bl	8003930 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000730:	2100      	movs	r1, #0
 8000732:	486f      	ldr	r0, [pc, #444]	; (80008f0 <main+0x238>)
 8000734:	f002 f84c 	bl	80027d0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000738:	2100      	movs	r1, #0
 800073a:	486d      	ldr	r0, [pc, #436]	; (80008f0 <main+0x238>)
 800073c:	f002 fe66 	bl	800340c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000740:	2104      	movs	r1, #4
 8000742:	486b      	ldr	r0, [pc, #428]	; (80008f0 <main+0x238>)
 8000744:	f002 f844 	bl	80027d0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000748:	2104      	movs	r1, #4
 800074a:	4869      	ldr	r0, [pc, #420]	; (80008f0 <main+0x238>)
 800074c:	f002 fe5e 	bl	800340c <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // uartRxReceived is set to 1 when a new character is received on uart 1
	  	  	  if(uartRxReceived){
 8000750:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <main+0x23c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d056      	beq.n	8000806 <main+0x14e>
	  	  		  switch(uartRxBuffer[0]){
 8000758:	4b60      	ldr	r3, [pc, #384]	; (80008dc <main+0x224>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b0d      	cmp	r3, #13
 800075e:	d002      	beq.n	8000766 <main+0xae>
 8000760:	2b7f      	cmp	r3, #127	; 0x7f
 8000762:	d02d      	beq.n	80007c0 <main+0x108>
 8000764:	e03c      	b.n	80007e0 <main+0x128>
	  	  		  // Nouvelle ligne, instruction à traiter
	  	  		  case ASCII_CR:
	  	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076a:	2203      	movs	r2, #3
 800076c:	4962      	ldr	r1, [pc, #392]	; (80008f8 <main+0x240>)
 800076e:	485d      	ldr	r0, [pc, #372]	; (80008e4 <main+0x22c>)
 8000770:	f003 f8de 	bl	8003930 <HAL_UART_Transmit>
	  	  			  cmdBuffer[idx_cmd] = '\0';
 8000774:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800077a:	4413      	add	r3, r2
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
	  	  			  argc = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	673b      	str	r3, [r7, #112]	; 0x70
	  	  			  token = strtok(cmdBuffer, "=");//
 8000784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000788:	495c      	ldr	r1, [pc, #368]	; (80008fc <main+0x244>)
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fd40 	bl	8005210 <strtok>
 8000790:	66f8      	str	r0, [r7, #108]	; 0x6c
	  	  			  while(token!=NULL){
 8000792:	e00d      	b.n	80007b0 <main+0xf8>
	  	  				  argv[argc++] = token;
 8000794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	673a      	str	r2, [r7, #112]	; 0x70
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	3378      	adds	r3, #120	; 0x78
 800079e:	443b      	add	r3, r7
 80007a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80007a2:	f843 2c74 	str.w	r2, [r3, #-116]
	  	  				  token = strtok(NULL, " ");
 80007a6:	4956      	ldr	r1, [pc, #344]	; (8000900 <main+0x248>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f004 fd31 	bl	8005210 <strtok>
 80007ae:	66f8      	str	r0, [r7, #108]	; 0x6c
	  	  			  while(token!=NULL){
 80007b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1ee      	bne.n	8000794 <main+0xdc>
	  	  			  }
	  	  			  idx_cmd = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	677b      	str	r3, [r7, #116]	; 0x74
	  	  			  newCmdReady = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	66bb      	str	r3, [r7, #104]	; 0x68
	  	  			  break;
 80007be:	e01f      	b.n	8000800 <main+0x148>
	  	  		  // Suppression du dernier caractère
	  	  		  case ASCII_DEL:
	  	  			  cmdBuffer[idx_cmd--] = '\0';
 80007c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	677a      	str	r2, [r7, #116]	; 0x74
 80007c6:	3378      	adds	r3, #120	; 0x78
 80007c8:	443b      	add	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	f803 2c50 	strb.w	r2, [r3, #-80]
	  	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d4:	2201      	movs	r2, #1
 80007d6:	4941      	ldr	r1, [pc, #260]	; (80008dc <main+0x224>)
 80007d8:	4842      	ldr	r0, [pc, #264]	; (80008e4 <main+0x22c>)
 80007da:	f003 f8a9 	bl	8003930 <HAL_UART_Transmit>
	  	  			  break;
 80007de:	e00f      	b.n	8000800 <main+0x148>
	  	  	      // Nouveau caractère
	  	  		  default:
	  	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80007e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	677a      	str	r2, [r7, #116]	; 0x74
 80007e6:	4a3d      	ldr	r2, [pc, #244]	; (80008dc <main+0x224>)
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	3378      	adds	r3, #120	; 0x78
 80007ec:	443b      	add	r3, r7
 80007ee:	f803 2c50 	strb.w	r2, [r3, #-80]
	  	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007f6:	2201      	movs	r2, #1
 80007f8:	4938      	ldr	r1, [pc, #224]	; (80008dc <main+0x224>)
 80007fa:	483a      	ldr	r0, [pc, #232]	; (80008e4 <main+0x22c>)
 80007fc:	f003 f898 	bl	8003930 <HAL_UART_Transmit>
	  	  		  }
	  	  		  uartRxReceived = 0;
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <main+0x23c>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
	  	  	  }

	  	  	  if(newCmdReady){
 8000806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0a1      	beq.n	8000750 <main+0x98>
	  	  			  }
	  	  			  else{
	  	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
	  	  			  }*/

				  if(strcmp(argv[0],"speed")==0){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	493d      	ldr	r1, [pc, #244]	; (8000904 <main+0x24c>)
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fd05 	bl	8000220 <strcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10e      	bne.n	800083a <main+0x182>
                      if(strlen(argv[1])==4)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fd08 	bl	8000234 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	2b04      	cmp	r3, #4
 8000828:	d04e      	beq.n	80008c8 <main+0x210>
                      {

                    	  //HAL_UART_Transmit(&huart2, vitesse, sizeof(vitesse), HAL_MAX_DELAY);
                      }
                      else {
                    	  HAL_UART_Transmit(&huart2, vitesseNotFound, sizeof(vitesseNotFound), HAL_MAX_DELAY);                      }
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082e:	2217      	movs	r2, #23
 8000830:	4935      	ldr	r1, [pc, #212]	; (8000908 <main+0x250>)
 8000832:	482c      	ldr	r0, [pc, #176]	; (80008e4 <main+0x22c>)
 8000834:	f003 f87c 	bl	8003930 <HAL_UART_Transmit>
 8000838:	e046      	b.n	80008c8 <main+0x210>

	  	  		  }
	  	  		  else if(strcmp(argv[0],"start")==0)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4933      	ldr	r1, [pc, #204]	; (800090c <main+0x254>)
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fcee 	bl	8000220 <strcmp>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d107      	bne.n	800085a <main+0x1a2>
	  	  		  {
	  	  			HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 800084a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084e:	220d      	movs	r2, #13
 8000850:	492f      	ldr	r1, [pc, #188]	; (8000910 <main+0x258>)
 8000852:	4824      	ldr	r0, [pc, #144]	; (80008e4 <main+0x22c>)
 8000854:	f003 f86c 	bl	8003930 <HAL_UART_Transmit>
 8000858:	e036      	b.n	80008c8 <main+0x210>

	  	  		  }
	  	  		  else if(strcmp(argv[0],"stop")==0)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	492d      	ldr	r1, [pc, #180]	; (8000914 <main+0x25c>)
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fcde 	bl	8000220 <strcmp>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d107      	bne.n	800087a <main+0x1c2>
	  	  		  {
	  	  			HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 800086a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800086e:	220e      	movs	r2, #14
 8000870:	4929      	ldr	r1, [pc, #164]	; (8000918 <main+0x260>)
 8000872:	481c      	ldr	r0, [pc, #112]	; (80008e4 <main+0x22c>)
 8000874:	f003 f85c 	bl	8003930 <HAL_UART_Transmit>
 8000878:	e026      	b.n	80008c8 <main+0x210>
	  	  		  }
	  	  		  else if(strcmp(argv[0],"pinout")==0)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4927      	ldr	r1, [pc, #156]	; (800091c <main+0x264>)
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fcce 	bl	8000220 <strcmp>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d107      	bne.n	800089a <main+0x1e2>
	  	  		  {
	  	  			HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 800088a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800088e:	2227      	movs	r2, #39	; 0x27
 8000890:	4923      	ldr	r1, [pc, #140]	; (8000920 <main+0x268>)
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <main+0x22c>)
 8000894:	f003 f84c 	bl	8003930 <HAL_UART_Transmit>
 8000898:	e016      	b.n	80008c8 <main+0x210>
	  	  		  }
	  	  		  else if(strcmp(argv[0],"help")==0)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4921      	ldr	r1, [pc, #132]	; (8000924 <main+0x26c>)
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fcbe 	bl	8000220 <strcmp>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d107      	bne.n	80008ba <main+0x202>
	  	  		  {
	  	  			HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ae:	2221      	movs	r2, #33	; 0x21
 80008b0:	491d      	ldr	r1, [pc, #116]	; (8000928 <main+0x270>)
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <main+0x22c>)
 80008b4:	f003 f83c 	bl	8003930 <HAL_UART_Transmit>
 80008b8:	e006      	b.n	80008c8 <main+0x210>
	  	  		  }

	  	  		  else{
	  	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008be:	2214      	movs	r2, #20
 80008c0:	491a      	ldr	r1, [pc, #104]	; (800092c <main+0x274>)
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <main+0x22c>)
 80008c4:	f003 f834 	bl	8003930 <HAL_UART_Transmit>
	  	  		  }
	  	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008cc:	2218      	movs	r2, #24
 80008ce:	4907      	ldr	r1, [pc, #28]	; (80008ec <main+0x234>)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <main+0x22c>)
 80008d2:	f003 f82d 	bl	8003930 <HAL_UART_Transmit>
	  	  			  newCmdReady = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66bb      	str	r3, [r7, #104]	; 0x68
	  	  	  if(uartRxReceived){
 80008da:	e739      	b.n	8000750 <main+0x98>
 80008dc:	20000128 	.word	0x20000128
 80008e0:	2000012c 	.word	0x2000012c
 80008e4:	200001bc 	.word	0x200001bc
 80008e8:	20000018 	.word	0x20000018
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000170 	.word	0x20000170
 80008f4:	20000124 	.word	0x20000124
 80008f8:	20000080 	.word	0x20000080
 80008fc:	080062d4 	.word	0x080062d4
 8000900:	080062d8 	.word	0x080062d8
 8000904:	080062dc 	.word	0x080062dc
 8000908:	08006370 	.word	0x08006370
 800090c:	080062e4 	.word	0x080062e4
 8000910:	08006304 	.word	0x08006304
 8000914:	080062ec 	.word	0x080062ec
 8000918:	08006314 	.word	0x08006314
 800091c:	080062f4 	.word	0x080062f4
 8000920:	08006324 	.word	0x08006324
 8000924:	080062fc 	.word	0x080062fc
 8000928:	0800634c 	.word	0x0800634c
 800092c:	20000084 	.word	0x20000084

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	2238      	movs	r2, #56	; 0x38
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f004 fc5e 	bl	8005200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 feae 	bl	80016b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096a:	2302      	movs	r3, #2
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800096e:	2304      	movs	r3, #4
 8000970:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000972:	2355      	movs	r3, #85	; 0x55
 8000974:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800097a:	2302      	movs	r3, #2
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0318 	add.w	r3, r7, #24
 8000986:	4618      	mov	r0, r3
 8000988:	f000 ff48 	bl	800181c <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000992:	f000 f82f 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099a:	2303      	movs	r3, #3
 800099c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2104      	movs	r1, #4
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fa4c 	bl	8001e4c <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009ba:	f000 f81b 	bl	80009f4 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	; 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_UART_RxCpltCallback+0x20>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80009d6:	2201      	movs	r2, #1
 80009d8:	4904      	ldr	r1, [pc, #16]	; (80009ec <HAL_UART_RxCpltCallback+0x24>)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_RxCpltCallback+0x28>)
 80009dc:	f003 f83e 	bl	8003a5c <HAL_UART_Receive_IT>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000124 	.word	0x20000124
 80009ec:	20000128 	.word	0x20000128
 80009f0:	200001bc 	.word	0x200001bc

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	; 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a36:	f000 fee1 	bl	80017fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 fb00 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000aa0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aa4:	f000 fde2 	bl	800166c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	return 1;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_kill>:

int _kill(int pid, int sig)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ac6:	f004 fb71 	bl	80051ac <__errno>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2216      	movs	r2, #22
 8000ace:	601a      	str	r2, [r3, #0]
	return -1;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_exit>:

void _exit (int status)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ffe7 	bl	8000abc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000aee:	e7fe      	b.n	8000aee <_exit+0x12>

08000af0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
	}

return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e009      	b.n	8000b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf1      	blt.n	8000b3c <_write+0x12>
	}
	return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_close>:

int _close(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_isatty>:

int _isatty(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f004 fad6 	bl	80051ac <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20020000 	.word	0x20020000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	2000016c 	.word	0x2000016c
 8000c34:	20000260 	.word	0x20000260

08000c38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b098      	sub	sp, #96	; 0x60
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2234      	movs	r2, #52	; 0x34
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 fab9 	bl	8005200 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c8e:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000c90:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <MX_TIM1_Init+0x148>)
 8000c92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8000c94:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000c96:	2209      	movs	r2, #9
 8000c98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c9a:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000ca0:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000ca2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ca6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cae:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb4:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cba:	4839      	ldr	r0, [pc, #228]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000cbc:	f001 fd30 	bl	8002720 <HAL_TIM_PWM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f7ff fe95 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4830      	ldr	r0, [pc, #192]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000cde:	f002 fc57 	bl	8003590 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ce8:	f7ff fe84 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cec:	2360      	movs	r3, #96	; 0x60
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 614;
 8000cf0:	f240 2366 	movw	r3, #614	; 0x266
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4619      	mov	r1, r3
 8000d12:	4823      	ldr	r0, [pc, #140]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000d14:	f001 fe6e 	bl	80029f4 <HAL_TIM_PWM_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d1e:	f7ff fe69 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.Pulse = 410;
 8000d22:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481b      	ldr	r0, [pc, #108]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000d32:	f001 fe5f 	bl	80029f4 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000d3c:	f7ff fe5a 	bl	80009f4 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8000d40:	4817      	ldr	r0, [pc, #92]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000d42:	f002 fd6d 	bl	8003820 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8000d52:	23d2      	movs	r3, #210	; 0xd2
 8000d54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000d84:	f002 fc9a 	bl	80036bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000d8e:	f7ff fe31 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM1_Init+0x144>)
 8000d94:	f000 f828 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000d98:	bf00      	nop
 8000d9a:	3760      	adds	r7, #96	; 0x60
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000170 	.word	0x20000170
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_TIM_PWM_MspInit+0x38>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40012c00 	.word	0x40012c00
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_TIM_MspPostInit+0x68>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d11d      	bne.n	8000e46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000e22:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000e26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e34:	2306      	movs	r3, #6
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f000 fa79 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40012c00 	.word	0x40012c00
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e5e:	4a23      	ldr	r2, [pc, #140]	; (8000eec <MX_USART2_UART_Init+0x94>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea0:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000ea2:	f002 fcf5 	bl	8003890 <HAL_UART_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000eac:	f7ff fda2 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000eb4:	f004 f8af 	bl	8005016 <HAL_UARTEx_SetTxFifoThreshold>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ebe:	f7ff fd99 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000ec6:	f004 f8e4 	bl	8005092 <HAL_UARTEx_SetRxFifoThreshold>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed0:	f7ff fd90 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_USART2_UART_Init+0x90>)
 8000ed6:	f004 f865 	bl	8004fa4 <HAL_UARTEx_DisableFifoMode>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee0:	f7ff fd88 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200001bc 	.word	0x200001bc
 8000eec:	40004400 	.word	0x40004400

08000ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09e      	sub	sp, #120	; 0x78
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2254      	movs	r2, #84	; 0x54
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 f975 	bl	8005200 <memset>
  if(uartHandle->Instance==USART2)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <HAL_UART_MspInit+0xa8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d136      	bne.n	8000f8e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 f9a9 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f7ff fd5c 	bl	80009f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0xac>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <HAL_UART_MspInit+0xac>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f46:	6593      	str	r3, [r2, #88]	; 0x58
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_MspInit+0xac>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0xac>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_UART_MspInit+0xac>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_UART_MspInit+0xac>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f000 f9d5 	bl	8001338 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3778      	adds	r7, #120	; 0x78
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fca:	f7ff fe35 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f004 f8f3 	bl	80051b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fd2:	f7ff fb71 	bl	80006b8 <main>

08000fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
  ldr   r0, =_estack
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000fe4:	08006520 	.word	0x08006520
  ldr r2, =_sbss
 8000fe8:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000fec:	20000260 	.word	0x20000260

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>

08000ff2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 f95b 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f80e 	bl	8001024 <HAL_InitTick>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e001      	b.n	8001018 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001014:	f7ff fcf4 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001018:	79fb      	ldrb	r3, [r7, #7]

}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_InitTick+0x68>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d022      	beq.n	800107e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_InitTick+0x6c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_InitTick+0x68>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001044:	fbb1 f3f3 	udiv	r3, r1, r3
 8001048:	fbb2 f3f3 	udiv	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f966 	bl	800131e <HAL_SYSTICK_Config>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10f      	bne.n	8001078 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	d809      	bhi.n	8001072 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105e:	2200      	movs	r2, #0
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001066:	f000 f932 	bl	80012ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_InitTick+0x70>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e007      	b.n	8001082 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e004      	b.n	8001082 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000a0 	.word	0x200000a0
 8001090:	20000098 	.word	0x20000098
 8001094:	2000009c 	.word	0x2000009c

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x1c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x20>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <HAL_IncTick+0x1c>)
 80010a8:	6013      	str	r3, [r2, #0]
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	2000024c 	.word	0x2000024c
 80010b8:	200000a0 	.word	0x200000a0

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000024c 	.word	0x2000024c

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ec:	d004      	beq.n	80010f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_Delay+0x40>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f8:	bf00      	nop
 80010fa:	f7ff ffdf 	bl	80010bc <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	429a      	cmp	r2, r3
 8001108:	d8f7      	bhi.n	80010fa <HAL_Delay+0x26>
  {
  }
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200000a0 	.word	0x200000a0

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff29 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff40 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff33 	bl	800117c <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa4 	bl	8001274 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001346:	e15a      	b.n	80015fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 814c 	beq.w	80015f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b01      	cmp	r3, #1
 800136a:	d005      	beq.n	8001378 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001374:	2b02      	cmp	r3, #2
 8001376:	d130      	bne.n	80013da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ae:	2201      	movs	r2, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 0201 	and.w	r2, r3, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d017      	beq.n	8001416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d123      	bne.n	800146a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	6939      	ldr	r1, [r7, #16]
 8001466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0203 	and.w	r2, r3, #3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80a6 	beq.w	80015f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ac:	4b5b      	ldr	r3, [pc, #364]	; (800161c <HAL_GPIO_Init+0x2e4>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b0:	4a5a      	ldr	r2, [pc, #360]	; (800161c <HAL_GPIO_Init+0x2e4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6613      	str	r3, [r2, #96]	; 0x60
 80014b8:	4b58      	ldr	r3, [pc, #352]	; (800161c <HAL_GPIO_Init+0x2e4>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c4:	4a56      	ldr	r2, [pc, #344]	; (8001620 <HAL_GPIO_Init+0x2e8>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ee:	d01f      	beq.n	8001530 <HAL_GPIO_Init+0x1f8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x2ec>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d019      	beq.n	800152c <HAL_GPIO_Init+0x1f4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_GPIO_Init+0x2f0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d013      	beq.n	8001528 <HAL_GPIO_Init+0x1f0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_GPIO_Init+0x2f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d00d      	beq.n	8001524 <HAL_GPIO_Init+0x1ec>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a49      	ldr	r2, [pc, #292]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d007      	beq.n	8001520 <HAL_GPIO_Init+0x1e8>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a48      	ldr	r2, [pc, #288]	; (8001634 <HAL_GPIO_Init+0x2fc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d101      	bne.n	800151c <HAL_GPIO_Init+0x1e4>
 8001518:	2305      	movs	r3, #5
 800151a:	e00a      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 800151c:	2306      	movs	r3, #6
 800151e:	e008      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001520:	2304      	movs	r3, #4
 8001522:	e006      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001524:	2303      	movs	r3, #3
 8001526:	e004      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_Init+0x1fa>
 8001530:	2300      	movs	r3, #0
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001542:	4937      	ldr	r1, [pc, #220]	; (8001620 <HAL_GPIO_Init+0x2e8>)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_GPIO_Init+0x300>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001574:	4a30      	ldr	r2, [pc, #192]	; (8001638 <HAL_GPIO_Init+0x300>)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_GPIO_Init+0x300>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800159e:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_GPIO_Init+0x300>)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_GPIO_Init+0x300>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c8:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_GPIO_Init+0x300>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_GPIO_Init+0x300>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f2:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_GPIO_Init+0x300>)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	f47f ae9d 	bne.w	8001348 <HAL_GPIO_Init+0x10>
  }
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800
 800162c:	48000c00 	.word	0x48000c00
 8001630:	48001000 	.word	0x48001000
 8001634:	48001400 	.word	0x48001400
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001658:	e002      	b.n	8001660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f806 	bl	800169c <HAL_GPIO_EXTI_Callback>
  }
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d141      	bne.n	8001746 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016c2:	4b4b      	ldr	r3, [pc, #300]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ce:	d131      	bne.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d0:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	4a46      	ldr	r2, [pc, #280]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e0:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e8:	4a41      	ldr	r2, [pc, #260]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2232      	movs	r2, #50	; 0x32
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	4a3f      	ldr	r2, [pc, #252]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	0c9b      	lsrs	r3, r3, #18
 8001702:	3301      	adds	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001706:	e002      	b.n	800170e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3b01      	subs	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171a:	d102      	bne.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f2      	bne.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172e:	d158      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e057      	b.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800173a:	4a2d      	ldr	r2, [pc, #180]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001744:	e04d      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174c:	d141      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175a:	d131      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001774:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2232      	movs	r2, #50	; 0x32
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	0c9b      	lsrs	r3, r3, #18
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001792:	e002      	b.n	800179a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3b01      	subs	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d102      	bne.n	80017ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f2      	bne.n	8001794 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ba:	d112      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e011      	b.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017d0:	e007      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40007000 	.word	0x40007000
 80017f4:	20000098 	.word	0x20000098
 80017f8:	431bde83 	.word	0x431bde83

080017fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180a:	6093      	str	r3, [r2, #8]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40007000 	.word	0x40007000

0800181c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e306      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d075      	beq.n	8001926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4b97      	ldr	r3, [pc, #604]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001844:	4b94      	ldr	r3, [pc, #592]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d102      	bne.n	800185a <HAL_RCC_OscConfig+0x3e>
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d002      	beq.n	8001860 <HAL_RCC_OscConfig+0x44>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b08      	cmp	r3, #8
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b8d      	ldr	r3, [pc, #564]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x108>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d157      	bne.n	8001924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e2e1      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x74>
 8001882:	4b85      	ldr	r3, [pc, #532]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a84      	ldr	r2, [pc, #528]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xb0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x98>
 800189a:	4b7f      	ldr	r3, [pc, #508]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7e      	ldr	r2, [pc, #504]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7b      	ldr	r2, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xb0>
 80018b4:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a77      	ldr	r2, [pc, #476]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b75      	ldr	r3, [pc, #468]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a74      	ldr	r2, [pc, #464]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fbf2 	bl	80010bc <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fbee 	bl	80010bc <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e2a6      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ee:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xc0>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fbde 	bl	80010bc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fbda 	bl	80010bc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e292      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001916:	4b60      	ldr	r3, [pc, #384]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0xe8>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d075      	beq.n	8001a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001932:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193c:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b0c      	cmp	r3, #12
 800194a:	d102      	bne.n	8001952 <HAL_RCC_OscConfig+0x136>
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d002      	beq.n	8001958 <HAL_RCC_OscConfig+0x13c>
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d11f      	bne.n	8001998 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001958:	4b4f      	ldr	r3, [pc, #316]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_OscConfig+0x154>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e265      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	4946      	ldr	r1, [pc, #280]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001984:	4b45      	ldr	r3, [pc, #276]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fb4b 	bl	8001024 <HAL_InitTick>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d043      	beq.n	8001a1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e251      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d023      	beq.n	80019e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a3c      	ldr	r2, [pc, #240]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb86 	bl	80010bc <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff fb82 	bl	80010bc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e23a      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	061b      	lsls	r3, r3, #24
 80019e0:	492d      	ldr	r1, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
 80019e6:	e01a      	b.n	8001a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2a      	ldr	r2, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb62 	bl	80010bc <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff fb5e 	bl	80010bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e216      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1e0>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d041      	beq.n	8001aae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01c      	beq.n	8001a6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff fb3b 	bl	80010bc <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fb37 	bl	80010bc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1ef      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0ef      	beq.n	8001a4a <HAL_RCC_OscConfig+0x22e>
 8001a6a:	e020      	b.n	8001aae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x27c>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fb1e 	bl	80010bc <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a82:	e00d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff fb1a 	bl	80010bc <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d906      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1d2      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ea      	bne.n	8001a84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a6 	beq.w	8001c08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2b4>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2b6>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00d      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	4a7e      	ldr	r2, [pc, #504]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aee:	2301      	movs	r3, #1
 8001af0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_RCC_OscConfig+0x4bc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afe:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <HAL_RCC_OscConfig+0x4bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a75      	ldr	r2, [pc, #468]	; (8001cd8 <HAL_RCC_OscConfig+0x4bc>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fad7 	bl	80010bc <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7ff fad3 	bl	80010bc <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e18b      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b24:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <HAL_RCC_OscConfig+0x4bc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_RCC_OscConfig+0x32e>
 8001b38:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b48:	e024      	b.n	8001b94 <HAL_RCC_OscConfig+0x378>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d110      	bne.n	8001b74 <HAL_RCC_OscConfig+0x358>
 8001b52:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	4a5e      	ldr	r2, [pc, #376]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b62:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b68:	4a5a      	ldr	r2, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b72:	e00f      	b.n	8001b94 <HAL_RCC_OscConfig+0x378>
 8001b74:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	4a56      	ldr	r2, [pc, #344]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d016      	beq.n	8001bca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fa8e 	bl	80010bc <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fa8a 	bl	80010bc <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e140      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ed      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x388>
 8001bc8:	e015      	b.n	8001bf6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bca:	f7ff fa77 	bl	80010bc <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fa73 	bl	80010bc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e129      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ed      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c22:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff fa46 	bl	80010bc <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c34:	f7ff fa42 	bl	80010bc <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0fa      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ef      	beq.n	8001c34 <HAL_RCC_OscConfig+0x418>
 8001c54:	e01b      	b.n	8001c8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa29 	bl	80010bc <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c6e:	f7ff fa25 	bl	80010bc <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0dd      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ef      	bne.n	8001c6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80d1 	beq.w	8001e3a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	f000 808b 	beq.w	8001dbc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d15e      	bne.n	8001d6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_RCC_OscConfig+0x4b8>)
 8001cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff f9ff 	bl	80010bc <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc0:	e00c      	b.n	8001cdc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff f9fb 	bl	80010bc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d905      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0b3      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cdc:	4b59      	ldr	r3, [pc, #356]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ec      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce8:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <HAL_RCC_OscConfig+0x62c>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6a11      	ldr	r1, [r2, #32]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf8:	3a01      	subs	r2, #1
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	4311      	orrs	r1, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d02:	0212      	lsls	r2, r2, #8
 8001d04:	4311      	orrs	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d0a:	0852      	lsrs	r2, r2, #1
 8001d0c:	3a01      	subs	r2, #1
 8001d0e:	0552      	lsls	r2, r2, #21
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d16:	0852      	lsrs	r2, r2, #1
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	0652      	lsls	r2, r2, #25
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d22:	06d2      	lsls	r2, r2, #27
 8001d24:	430a      	orrs	r2, r1
 8001d26:	4947      	ldr	r1, [pc, #284]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a44      	ldr	r2, [pc, #272]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a41      	ldr	r2, [pc, #260]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff f9ba 	bl	80010bc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f9b6 	bl	80010bc <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e06e      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x530>
 8001d6a:	e066      	b.n	8001e3a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a31      	ldr	r2, [pc, #196]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d84:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a2e      	ldr	r2, [pc, #184]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001d8a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f992 	bl	80010bc <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f98e 	bl	80010bc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e046      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x580>
 8001dba:	e03e      	b.n	8001e3a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e039      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_RCC_OscConfig+0x628>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d12c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	3b01      	subs	r3, #1
 8001de8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d123      	bne.n	8001e36 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d11b      	bne.n	8001e36 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d113      	bne.n	8001e36 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	019f800c 	.word	0x019f800c

08001e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e11e      	b.n	80020a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b91      	ldr	r3, [pc, #580]	; (80020ac <HAL_RCC_ClockConfig+0x260>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d910      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b8e      	ldr	r3, [pc, #568]	; (80020ac <HAL_RCC_ClockConfig+0x260>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 020f 	bic.w	r2, r3, #15
 8001e7a:	498c      	ldr	r1, [pc, #560]	; (80020ac <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b8a      	ldr	r3, [pc, #552]	; (80020ac <HAL_RCC_ClockConfig+0x260>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e106      	b.n	80020a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d073      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d129      	bne.n	8001efc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea8:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0f4      	b.n	80020a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001eb8:	f000 f99e 	bl	80021f8 <RCC_GetSysClockFreqFromPLLSource>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4a7c      	ldr	r2, [pc, #496]	; (80020b4 <HAL_RCC_ClockConfig+0x268>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d93f      	bls.n	8001f46 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ec6:	4b7a      	ldr	r3, [pc, #488]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d033      	beq.n	8001f46 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d12f      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eee:	4a70      	ldr	r2, [pc, #448]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e024      	b.n	8001f46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f04:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0c6      	b.n	80020a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0be      	b.n	80020a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f24:	f000 f8ce 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4a61      	ldr	r2, [pc, #388]	; (80020b4 <HAL_RCC_ClockConfig+0x268>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d909      	bls.n	8001f46 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f32:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f3a:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f40:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4957      	ldr	r1, [pc, #348]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f58:	f7ff f8b0 	bl	80010bc <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7ff f8ac 	bl	80010bc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e095      	b.n	80020a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b4e      	ldr	r3, [pc, #312]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a42      	ldr	r2, [pc, #264]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001faa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fb8:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001fc0:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001fc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4936      	ldr	r1, [pc, #216]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
 8001fda:	e008      	b.n	8001fee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b80      	cmp	r3, #128	; 0x80
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8001fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fee:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_RCC_ClockConfig+0x260>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d21d      	bcs.n	8002038 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_RCC_ClockConfig+0x260>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 020f 	bic.w	r2, r3, #15
 8002004:	4929      	ldr	r1, [pc, #164]	; (80020ac <HAL_RCC_ClockConfig+0x260>)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800200c:	f7ff f856 	bl	80010bc <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7ff f852 	bl	80010bc <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e03b      	b.n	80020a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_RCC_ClockConfig+0x260>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d1ed      	bne.n	8002014 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4917      	ldr	r1, [pc, #92]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	490f      	ldr	r1, [pc, #60]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002076:	f000 f825 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 800207a:	4602      	mov	r2, r0
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_RCC_ClockConfig+0x264>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	490c      	ldr	r1, [pc, #48]	; (80020b8 <HAL_RCC_ClockConfig+0x26c>)
 8002088:	5ccb      	ldrb	r3, [r1, r3]
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_RCC_ClockConfig+0x270>)
 8002094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x274>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe ffc2 	bl	8001024 <HAL_InitTick>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40022000 	.word	0x40022000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	04c4b400 	.word	0x04c4b400
 80020b8:	08006388 	.word	0x08006388
 80020bc:	20000098 	.word	0x20000098
 80020c0:	2000009c 	.word	0x2000009c

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d102      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	e047      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020e8:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e03e      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d136      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3301      	adds	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002118:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_RCC_GetSysClockFreq+0xc0>)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002122:	68d2      	ldr	r2, [r2, #12]
 8002124:	0a12      	lsrs	r2, r2, #8
 8002126:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
      break;
 8002130:	e00c      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002132:	4a13      	ldr	r2, [pc, #76]	; (8002180 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	fbb2 f3f3 	udiv	r3, r2, r3
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 800213c:	68d2      	ldr	r2, [r2, #12]
 800213e:	0a12      	lsrs	r2, r2, #8
 8002140:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
      break;
 800214a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0e5b      	lsrs	r3, r3, #25
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	3301      	adds	r3, #1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	e001      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800216c:	693b      	ldr	r3, [r7, #16]
}
 800216e:	4618      	mov	r0, r3
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	00f42400 	.word	0x00f42400
 8002184:	016e3600 	.word	0x016e3600

08002188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_RCC_GetHCLKFreq+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000098 	.word	0x20000098

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021a4:	f7ff fff0 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4904      	ldr	r1, [pc, #16]	; (80021c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08006398 	.word	0x08006398

080021cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021d0:	f7ff ffda 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	0adb      	lsrs	r3, r3, #11
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	4904      	ldr	r1, [pc, #16]	; (80021f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08006398 	.word	0x08006398

080021f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3301      	adds	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d10c      	bne.n	8002236 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800221c:	4a17      	ldr	r2, [pc, #92]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002226:	68d2      	ldr	r2, [r2, #12]
 8002228:	0a12      	lsrs	r2, r2, #8
 800222a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	617b      	str	r3, [r7, #20]
    break;
 8002234:	e00c      	b.n	8002250 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002240:	68d2      	ldr	r2, [r2, #12]
 8002242:	0a12      	lsrs	r2, r2, #8
 8002244:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    break;
 800224e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0e5b      	lsrs	r3, r3, #25
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	3301      	adds	r3, #1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800226a:	687b      	ldr	r3, [r7, #4]
}
 800226c:	4618      	mov	r0, r3
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40021000 	.word	0x40021000
 800227c:	016e3600 	.word	0x016e3600
 8002280:	00f42400 	.word	0x00f42400

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800228c:	2300      	movs	r3, #0
 800228e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002290:	2300      	movs	r3, #0
 8002292:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8098 	beq.w	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	4a3f      	ldr	r2, [pc, #252]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	; 0x58
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ce:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022da:	f7fe feef 	bl	80010bc <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e0:	e009      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7fe feeb 	bl	80010bc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d902      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	74fb      	strb	r3, [r7, #19]
        break;
 80022f4:	e005      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ef      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d159      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002312:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01e      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	d019      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002340:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	4a1b      	ldr	r2, [pc, #108]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002350:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe feab 	bl	80010bc <HAL_GetTick>
 8002366:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002368:	e00b      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fea7 	bl	80010bc <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d902      	bls.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	74fb      	strb	r3, [r7, #19]
            break;
 8002380:	e006      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ec      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10b      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ac:	e008      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	74bb      	strb	r3, [r7, #18]
 80023b2:	e005      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c0:	7c7b      	ldrb	r3, [r7, #17]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4ba7      	ldr	r3, [pc, #668]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4aa6      	ldr	r2, [pc, #664]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023de:	4ba1      	ldr	r3, [pc, #644]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f023 0203 	bic.w	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	499d      	ldr	r1, [pc, #628]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002400:	4b98      	ldr	r3, [pc, #608]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 020c 	bic.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4995      	ldr	r1, [pc, #596]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002422:	4b90      	ldr	r3, [pc, #576]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	498c      	ldr	r1, [pc, #560]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002444:	4b87      	ldr	r3, [pc, #540]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	4984      	ldr	r1, [pc, #528]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002466:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	497b      	ldr	r1, [pc, #492]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002488:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4973      	ldr	r1, [pc, #460]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024aa:	4b6e      	ldr	r3, [pc, #440]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	496a      	ldr	r1, [pc, #424]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024cc:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4962      	ldr	r1, [pc, #392]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ee:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	4959      	ldr	r1, [pc, #356]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002510:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	4951      	ldr	r1, [pc, #324]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002532:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	4948      	ldr	r1, [pc, #288]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002554:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4940      	ldr	r1, [pc, #256]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002572:	d105      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a3a      	ldr	r2, [pc, #232]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002588:	2b00      	cmp	r3, #0
 800258a:	d015      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	4932      	ldr	r1, [pc, #200]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d105      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	4924      	ldr	r1, [pc, #144]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e2:	d105      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d015      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261a:	d105      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d019      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002652:	d109      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a02      	ldr	r2, [pc, #8]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265e:	60d3      	str	r3, [r2, #12]
 8002660:	e002      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d015      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4926      	ldr	r1, [pc, #152]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002692:	d105      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a20      	ldr	r2, [pc, #128]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	4918      	ldr	r1, [pc, #96]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ca:	d105      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002702:	d105      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800270a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002710:	7cbb      	ldrb	r3, [r7, #18]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e049      	b.n	80027c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fb2e 	bl	8000da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 fa5c 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_TIM_PWM_Start+0x24>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e03c      	b.n	800286e <HAL_TIM_PWM_Start+0x9e>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d109      	bne.n	800280e <HAL_TIM_PWM_Start+0x3e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	e02f      	b.n	800286e <HAL_TIM_PWM_Start+0x9e>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d109      	bne.n	8002828 <HAL_TIM_PWM_Start+0x58>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e022      	b.n	800286e <HAL_TIM_PWM_Start+0x9e>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d109      	bne.n	8002842 <HAL_TIM_PWM_Start+0x72>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e015      	b.n	800286e <HAL_TIM_PWM_Start+0x9e>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b10      	cmp	r3, #16
 8002846:	d109      	bne.n	800285c <HAL_TIM_PWM_Start+0x8c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e008      	b.n	800286e <HAL_TIM_PWM_Start+0x9e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0a6      	b.n	80029c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_TIM_PWM_Start+0xb6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	e023      	b.n	80028ce <HAL_TIM_PWM_Start+0xfe>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d104      	bne.n	8002896 <HAL_TIM_PWM_Start+0xc6>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002894:	e01b      	b.n	80028ce <HAL_TIM_PWM_Start+0xfe>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_PWM_Start+0xd6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a4:	e013      	b.n	80028ce <HAL_TIM_PWM_Start+0xfe>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_PWM_Start+0xe6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028b4:	e00b      	b.n	80028ce <HAL_TIM_PWM_Start+0xfe>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_PWM_Start+0xf6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c4:	e003      	b.n	80028ce <HAL_TIM_PWM_Start+0xfe>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	6839      	ldr	r1, [r7, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fd72 	bl	80033c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <HAL_TIM_PWM_Start+0x1fc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d018      	beq.n	8002918 <HAL_TIM_PWM_Start+0x148>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a39      	ldr	r2, [pc, #228]	; (80029d0 <HAL_TIM_PWM_Start+0x200>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d013      	beq.n	8002918 <HAL_TIM_PWM_Start+0x148>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a37      	ldr	r2, [pc, #220]	; (80029d4 <HAL_TIM_PWM_Start+0x204>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00e      	beq.n	8002918 <HAL_TIM_PWM_Start+0x148>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a36      	ldr	r2, [pc, #216]	; (80029d8 <HAL_TIM_PWM_Start+0x208>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d009      	beq.n	8002918 <HAL_TIM_PWM_Start+0x148>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a34      	ldr	r2, [pc, #208]	; (80029dc <HAL_TIM_PWM_Start+0x20c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_TIM_PWM_Start+0x148>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <HAL_TIM_PWM_Start+0x210>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_TIM_PWM_Start+0x14c>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_TIM_PWM_Start+0x14e>
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <HAL_TIM_PWM_Start+0x1fc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <HAL_TIM_PWM_Start+0x1b2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d01d      	beq.n	8002982 <HAL_TIM_PWM_Start+0x1b2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <HAL_TIM_PWM_Start+0x214>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d018      	beq.n	8002982 <HAL_TIM_PWM_Start+0x1b2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <HAL_TIM_PWM_Start+0x218>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_TIM_PWM_Start+0x1b2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_TIM_PWM_Start+0x21c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00e      	beq.n	8002982 <HAL_TIM_PWM_Start+0x1b2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_TIM_PWM_Start+0x200>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_TIM_PWM_Start+0x1b2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_TIM_PWM_Start+0x204>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_TIM_PWM_Start+0x1b2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_TIM_PWM_Start+0x210>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d115      	bne.n	80029ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_TIM_PWM_Start+0x220>)
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b06      	cmp	r3, #6
 8002992:	d015      	beq.n	80029c0 <HAL_TIM_PWM_Start+0x1f0>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299a:	d011      	beq.n	80029c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	e008      	b.n	80029c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e000      	b.n	80029c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40013400 	.word	0x40013400
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	40015000 	.word	0x40015000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	00010007 	.word	0x00010007

080029f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0ff      	b.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b14      	cmp	r3, #20
 8002a1e:	f200 80f0 	bhi.w	8002c02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a22:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a28:	08002a7d 	.word	0x08002a7d
 8002a2c:	08002c03 	.word	0x08002c03
 8002a30:	08002c03 	.word	0x08002c03
 8002a34:	08002c03 	.word	0x08002c03
 8002a38:	08002abd 	.word	0x08002abd
 8002a3c:	08002c03 	.word	0x08002c03
 8002a40:	08002c03 	.word	0x08002c03
 8002a44:	08002c03 	.word	0x08002c03
 8002a48:	08002aff 	.word	0x08002aff
 8002a4c:	08002c03 	.word	0x08002c03
 8002a50:	08002c03 	.word	0x08002c03
 8002a54:	08002c03 	.word	0x08002c03
 8002a58:	08002b3f 	.word	0x08002b3f
 8002a5c:	08002c03 	.word	0x08002c03
 8002a60:	08002c03 	.word	0x08002c03
 8002a64:	08002c03 	.word	0x08002c03
 8002a68:	08002b81 	.word	0x08002b81
 8002a6c:	08002c03 	.word	0x08002c03
 8002a70:	08002c03 	.word	0x08002c03
 8002a74:	08002c03 	.word	0x08002c03
 8002a78:	08002bc1 	.word	0x08002bc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f972 	bl	8002d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6999      	ldr	r1, [r3, #24]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	619a      	str	r2, [r3, #24]
      break;
 8002aba:	e0a5      	b.n	8002c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f9ec 	bl	8002ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6999      	ldr	r1, [r3, #24]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	021a      	lsls	r2, r3, #8
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	619a      	str	r2, [r3, #24]
      break;
 8002afc:	e084      	b.n	8002c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fa5f 	bl	8002fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0208 	orr.w	r2, r2, #8
 8002b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0204 	bic.w	r2, r2, #4
 8002b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69d9      	ldr	r1, [r3, #28]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	61da      	str	r2, [r3, #28]
      break;
 8002b3c:	e064      	b.n	8002c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fad1 	bl	80030ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69d9      	ldr	r1, [r3, #28]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	021a      	lsls	r2, r3, #8
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	61da      	str	r2, [r3, #28]
      break;
 8002b7e:	e043      	b.n	8002c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fb44 	bl	8003214 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0208 	orr.w	r2, r2, #8
 8002b9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002bbe:	e023      	b.n	8002c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fb8e 	bl	80032e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	021a      	lsls	r2, r3, #8
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c00:	e002      	b.n	8002c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
      break;
 8002c06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop

08002c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <TIM_Base_SetConfig+0x12c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d017      	beq.n	8002c64 <TIM_Base_SetConfig+0x48>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3a:	d013      	beq.n	8002c64 <TIM_Base_SetConfig+0x48>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a43      	ldr	r2, [pc, #268]	; (8002d4c <TIM_Base_SetConfig+0x130>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00f      	beq.n	8002c64 <TIM_Base_SetConfig+0x48>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <TIM_Base_SetConfig+0x134>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00b      	beq.n	8002c64 <TIM_Base_SetConfig+0x48>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a41      	ldr	r2, [pc, #260]	; (8002d54 <TIM_Base_SetConfig+0x138>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_Base_SetConfig+0x48>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <TIM_Base_SetConfig+0x13c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x48>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3f      	ldr	r2, [pc, #252]	; (8002d5c <TIM_Base_SetConfig+0x140>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a33      	ldr	r2, [pc, #204]	; (8002d48 <TIM_Base_SetConfig+0x12c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d023      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d01f      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <TIM_Base_SetConfig+0x130>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01b      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a2f      	ldr	r2, [pc, #188]	; (8002d50 <TIM_Base_SetConfig+0x134>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d017      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <TIM_Base_SetConfig+0x138>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2d      	ldr	r2, [pc, #180]	; (8002d58 <TIM_Base_SetConfig+0x13c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00f      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2d      	ldr	r2, [pc, #180]	; (8002d60 <TIM_Base_SetConfig+0x144>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00b      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a2c      	ldr	r2, [pc, #176]	; (8002d64 <TIM_Base_SetConfig+0x148>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	; (8002d68 <TIM_Base_SetConfig+0x14c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d003      	beq.n	8002cc6 <TIM_Base_SetConfig+0xaa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <TIM_Base_SetConfig+0x140>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d108      	bne.n	8002cd8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <TIM_Base_SetConfig+0x12c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <TIM_Base_SetConfig+0x110>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <TIM_Base_SetConfig+0x13c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00f      	beq.n	8002d2c <TIM_Base_SetConfig+0x110>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <TIM_Base_SetConfig+0x144>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <TIM_Base_SetConfig+0x110>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <TIM_Base_SetConfig+0x148>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <TIM_Base_SetConfig+0x110>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <TIM_Base_SetConfig+0x14c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_Base_SetConfig+0x110>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <TIM_Base_SetConfig+0x140>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	615a      	str	r2, [r3, #20]
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40013400 	.word	0x40013400
 8002d5c:	40015000 	.word	0x40015000
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40014400 	.word	0x40014400
 8002d68:	40014800 	.word	0x40014800

08002d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0201 	bic.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f023 0302 	bic.w	r3, r3, #2
 8002db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a30      	ldr	r2, [pc, #192]	; (8002e88 <TIM_OC1_SetConfig+0x11c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <TIM_OC1_SetConfig+0x88>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <TIM_OC1_SetConfig+0x120>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00f      	beq.n	8002df4 <TIM_OC1_SetConfig+0x88>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a2e      	ldr	r2, [pc, #184]	; (8002e90 <TIM_OC1_SetConfig+0x124>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00b      	beq.n	8002df4 <TIM_OC1_SetConfig+0x88>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a2d      	ldr	r2, [pc, #180]	; (8002e94 <TIM_OC1_SetConfig+0x128>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d007      	beq.n	8002df4 <TIM_OC1_SetConfig+0x88>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <TIM_OC1_SetConfig+0x12c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_OC1_SetConfig+0x88>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <TIM_OC1_SetConfig+0x130>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10c      	bne.n	8002e0e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0308 	bic.w	r3, r3, #8
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <TIM_OC1_SetConfig+0x11c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <TIM_OC1_SetConfig+0xd2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <TIM_OC1_SetConfig+0x120>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00f      	beq.n	8002e3e <TIM_OC1_SetConfig+0xd2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <TIM_OC1_SetConfig+0x124>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_OC1_SetConfig+0xd2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <TIM_OC1_SetConfig+0x128>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_OC1_SetConfig+0xd2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <TIM_OC1_SetConfig+0x12c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_OC1_SetConfig+0xd2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <TIM_OC1_SetConfig+0x130>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d111      	bne.n	8002e62 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	621a      	str	r2, [r3, #32]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40013400 	.word	0x40013400
 8002e90:	40014000 	.word	0x40014000
 8002e94:	40014400 	.word	0x40014400
 8002e98:	40014800 	.word	0x40014800
 8002e9c:	40015000 	.word	0x40015000

08002ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f023 0210 	bic.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0320 	bic.w	r3, r3, #32
 8002eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a2c      	ldr	r2, [pc, #176]	; (8002fb0 <TIM_OC2_SetConfig+0x110>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d007      	beq.n	8002f14 <TIM_OC2_SetConfig+0x74>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a2b      	ldr	r2, [pc, #172]	; (8002fb4 <TIM_OC2_SetConfig+0x114>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <TIM_OC2_SetConfig+0x74>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a2a      	ldr	r2, [pc, #168]	; (8002fb8 <TIM_OC2_SetConfig+0x118>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10d      	bne.n	8002f30 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <TIM_OC2_SetConfig+0x110>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <TIM_OC2_SetConfig+0xc0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <TIM_OC2_SetConfig+0x114>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00f      	beq.n	8002f60 <TIM_OC2_SetConfig+0xc0>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <TIM_OC2_SetConfig+0x11c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <TIM_OC2_SetConfig+0xc0>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <TIM_OC2_SetConfig+0x120>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_OC2_SetConfig+0xc0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <TIM_OC2_SetConfig+0x124>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_OC2_SetConfig+0xc0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <TIM_OC2_SetConfig+0x118>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d113      	bne.n	8002f88 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40013400 	.word	0x40013400
 8002fb8:	40015000 	.word	0x40015000
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40014400 	.word	0x40014400
 8002fc4:	40014800 	.word	0x40014800

08002fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <TIM_OC3_SetConfig+0x10c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <TIM_OC3_SetConfig+0x72>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <TIM_OC3_SetConfig+0x110>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <TIM_OC3_SetConfig+0x72>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a29      	ldr	r2, [pc, #164]	; (80030dc <TIM_OC3_SetConfig+0x114>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d10d      	bne.n	8003056 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <TIM_OC3_SetConfig+0x10c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <TIM_OC3_SetConfig+0xbe>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <TIM_OC3_SetConfig+0x110>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00f      	beq.n	8003086 <TIM_OC3_SetConfig+0xbe>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <TIM_OC3_SetConfig+0x118>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_OC3_SetConfig+0xbe>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <TIM_OC3_SetConfig+0x11c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <TIM_OC3_SetConfig+0xbe>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <TIM_OC3_SetConfig+0x120>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_OC3_SetConfig+0xbe>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a16      	ldr	r2, [pc, #88]	; (80030dc <TIM_OC3_SetConfig+0x114>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d113      	bne.n	80030ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800308c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	621a      	str	r2, [r3, #32]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40013400 	.word	0x40013400
 80030dc:	40015000 	.word	0x40015000
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40014400 	.word	0x40014400
 80030e8:	40014800 	.word	0x40014800

080030ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800313a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	031b      	lsls	r3, r3, #12
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <TIM_OC4_SetConfig+0x110>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <TIM_OC4_SetConfig+0x74>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <TIM_OC4_SetConfig+0x114>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_OC4_SetConfig+0x74>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <TIM_OC4_SetConfig+0x118>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d10d      	bne.n	800317c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800317a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <TIM_OC4_SetConfig+0x110>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <TIM_OC4_SetConfig+0xc0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <TIM_OC4_SetConfig+0x114>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00f      	beq.n	80031ac <TIM_OC4_SetConfig+0xc0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <TIM_OC4_SetConfig+0x11c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00b      	beq.n	80031ac <TIM_OC4_SetConfig+0xc0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a1d      	ldr	r2, [pc, #116]	; (800320c <TIM_OC4_SetConfig+0x120>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <TIM_OC4_SetConfig+0xc0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <TIM_OC4_SetConfig+0x124>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_OC4_SetConfig+0xc0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <TIM_OC4_SetConfig+0x118>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d113      	bne.n	80031d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	019b      	lsls	r3, r3, #6
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40013400 	.word	0x40013400
 8003204:	40015000 	.word	0x40015000
 8003208:	40014000 	.word	0x40014000
 800320c:	40014400 	.word	0x40014400
 8003210:	40014800 	.word	0x40014800

08003214 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003258:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <TIM_OC5_SetConfig+0xbc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <TIM_OC5_SetConfig+0x82>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <TIM_OC5_SetConfig+0xc0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00f      	beq.n	8003296 <TIM_OC5_SetConfig+0x82>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <TIM_OC5_SetConfig+0xc4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_OC5_SetConfig+0x82>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <TIM_OC5_SetConfig+0xc8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_OC5_SetConfig+0x82>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <TIM_OC5_SetConfig+0xcc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_OC5_SetConfig+0x82>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <TIM_OC5_SetConfig+0xd0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d109      	bne.n	80032aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40013400 	.word	0x40013400
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800
 80032e4:	40015000 	.word	0x40015000

080032e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800332e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	051b      	lsls	r3, r3, #20
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <TIM_OC6_SetConfig+0xc0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <TIM_OC6_SetConfig+0x84>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a19      	ldr	r2, [pc, #100]	; (80033ac <TIM_OC6_SetConfig+0xc4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00f      	beq.n	800336c <TIM_OC6_SetConfig+0x84>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <TIM_OC6_SetConfig+0xc8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_OC6_SetConfig+0x84>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <TIM_OC6_SetConfig+0xcc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_OC6_SetConfig+0x84>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <TIM_OC6_SetConfig+0xd0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_OC6_SetConfig+0x84>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a15      	ldr	r2, [pc, #84]	; (80033bc <TIM_OC6_SetConfig+0xd4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d109      	bne.n	8003380 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40013400 	.word	0x40013400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800
 80033bc:	40015000 	.word	0x40015000

080033c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2201      	movs	r2, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_TIMEx_PWMN_Start+0x24>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e022      	b.n	8003476 <HAL_TIMEx_PWMN_Start+0x6a>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d109      	bne.n	800344a <HAL_TIMEx_PWMN_Start+0x3e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e015      	b.n	8003476 <HAL_TIMEx_PWMN_Start+0x6a>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d109      	bne.n	8003464 <HAL_TIMEx_PWMN_Start+0x58>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e008      	b.n	8003476 <HAL_TIMEx_PWMN_Start+0x6a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e073      	b.n	8003566 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <HAL_TIMEx_PWMN_Start+0x82>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800348c:	e013      	b.n	80034b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d104      	bne.n	800349e <HAL_TIMEx_PWMN_Start+0x92>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800349c:	e00b      	b.n	80034b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d104      	bne.n	80034ae <HAL_TIMEx_PWMN_Start+0xa2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034ac:	e003      	b.n	80034b6 <HAL_TIMEx_PWMN_Start+0xaa>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2204      	movs	r2, #4
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f9c1 	bl	8003846 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <HAL_TIMEx_PWMN_Start+0x164>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d022      	beq.n	8003524 <HAL_TIMEx_PWMN_Start+0x118>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d01d      	beq.n	8003524 <HAL_TIMEx_PWMN_Start+0x118>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_TIMEx_PWMN_Start+0x168>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d018      	beq.n	8003524 <HAL_TIMEx_PWMN_Start+0x118>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a20      	ldr	r2, [pc, #128]	; (8003578 <HAL_TIMEx_PWMN_Start+0x16c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_TIMEx_PWMN_Start+0x118>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <HAL_TIMEx_PWMN_Start+0x170>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00e      	beq.n	8003524 <HAL_TIMEx_PWMN_Start+0x118>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <HAL_TIMEx_PWMN_Start+0x174>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_TIMEx_PWMN_Start+0x118>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <HAL_TIMEx_PWMN_Start+0x178>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_TIMEx_PWMN_Start+0x118>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <HAL_TIMEx_PWMN_Start+0x17c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d115      	bne.n	8003550 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <HAL_TIMEx_PWMN_Start+0x180>)
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d015      	beq.n	8003562 <HAL_TIMEx_PWMN_Start+0x156>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d011      	beq.n	8003562 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	e008      	b.n	8003562 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e000      	b.n	8003564 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40000c00 	.word	0x40000c00
 8003580:	40013400 	.word	0x40013400
 8003584:	40014000 	.word	0x40014000
 8003588:	40015000 	.word	0x40015000
 800358c:	00010007 	.word	0x00010007

08003590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e074      	b.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a34      	ldr	r2, [pc, #208]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a33      	ldr	r2, [pc, #204]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80035ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d022      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003628:	d01d      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d018      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00e      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10c      	bne.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4313      	orrs	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40013400 	.word	0x40013400
 80036a8:	40015000 	.word	0x40015000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40014000 	.word	0x40014000

080036bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e096      	b.n	8003806 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d009      	beq.n	8003770 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2d      	ldr	r2, [pc, #180]	; (8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2c      	ldr	r2, [pc, #176]	; (800381c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d106      	bne.n	800377e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a24      	ldr	r2, [pc, #144]	; (8003814 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a21      	ldr	r2, [pc, #132]	; (800381c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d12b      	bne.n	80037f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	051b      	lsls	r3, r3, #20
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a10      	ldr	r2, [pc, #64]	; (8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0e      	ldr	r2, [pc, #56]	; (800381c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d106      	bne.n	80037f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40013400 	.word	0x40013400
 800381c:	40015000 	.word	0x40015000

08003820 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003846:	b480      	push	{r7}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2204      	movs	r2, #4
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a1a      	ldr	r2, [r3, #32]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	43db      	mvns	r3, r3
 8003868:	401a      	ands	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1a      	ldr	r2, [r3, #32]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	431a      	orrs	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e042      	b.n	8003928 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fd fb1b 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2224      	movs	r2, #36	; 0x24
 80038be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f92e 	bl	8003b34 <UART_SetConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e022      	b.n	8003928 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fc1e 	bl	800412c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800390e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fca5 	bl	8004270 <UART_CheckIdleState>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003946:	2b20      	cmp	r3, #32
 8003948:	f040 8083 	bne.w	8003a52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_UART_Transmit+0x28>
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e07b      	b.n	8003a54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_UART_Transmit+0x3a>
 8003966:	2302      	movs	r3, #2
 8003968:	e074      	b.n	8003a54 <HAL_UART_Transmit+0x124>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2221      	movs	r2, #33	; 0x21
 800397e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003982:	f7fd fb9b 	bl	80010bc <HAL_GetTick>
 8003986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d108      	bne.n	80039b4 <HAL_UART_Transmit+0x84>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e003      	b.n	80039bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80039c4:	e02c      	b.n	8003a20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fc98 	bl	8004306 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e039      	b.n	8003a54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3302      	adds	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e007      	b.n	8003a0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1cc      	bne.n	80039c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	2140      	movs	r1, #64	; 0x40
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fc65 	bl	8004306 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e006      	b.n	8003a54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d142      	bne.n	8003afa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_UART_Receive_IT+0x24>
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e03b      	b.n	8003afc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Receive_IT+0x36>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e034      	b.n	8003afc <HAL_UART_Receive_IT+0xa0>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a17      	ldr	r2, [pc, #92]	; (8003b04 <HAL_UART_Receive_IT+0xa8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d018      	beq.n	8003aea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	69f9      	ldr	r1, [r7, #28]
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e6      	bne.n	8003ab8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	461a      	mov	r2, r3
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fcd1 	bl	8004498 <UART_Start_Receive_IT>
 8003af6:	4603      	mov	r3, r0
 8003af8:	e000      	b.n	8003afc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
  }
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3728      	adds	r7, #40	; 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40008000 	.word	0x40008000

08003b08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b38:	b08c      	sub	sp, #48	; 0x30
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4baa      	ldr	r3, [pc, #680]	; (8003e0c <UART_SetConfig+0x2d8>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a9f      	ldr	r2, [pc, #636]	; (8003e10 <UART_SetConfig+0x2dc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003baa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	f023 010f 	bic.w	r1, r3, #15
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a90      	ldr	r2, [pc, #576]	; (8003e14 <UART_SetConfig+0x2e0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d125      	bne.n	8003c24 <UART_SetConfig+0xf0>
 8003bd8:	4b8f      	ldr	r3, [pc, #572]	; (8003e18 <UART_SetConfig+0x2e4>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d81a      	bhi.n	8003c1c <UART_SetConfig+0xe8>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0xb8>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c0d 	.word	0x08003c0d
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c15 	.word	0x08003c15
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c02:	e116      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c04:	2302      	movs	r3, #2
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0a:	e112      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c12:	e10e      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c14:	2308      	movs	r3, #8
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1a:	e10a      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c22:	e106      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a7c      	ldr	r2, [pc, #496]	; (8003e1c <UART_SetConfig+0x2e8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d138      	bne.n	8003ca0 <UART_SetConfig+0x16c>
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	; (8003e18 <UART_SetConfig+0x2e4>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d82d      	bhi.n	8003c98 <UART_SetConfig+0x164>
 8003c3c:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <UART_SetConfig+0x110>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c99 	.word	0x08003c99
 8003c4c:	08003c99 	.word	0x08003c99
 8003c50:	08003c99 	.word	0x08003c99
 8003c54:	08003c89 	.word	0x08003c89
 8003c58:	08003c99 	.word	0x08003c99
 8003c5c:	08003c99 	.word	0x08003c99
 8003c60:	08003c99 	.word	0x08003c99
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	08003c99 	.word	0x08003c99
 8003c6c:	08003c99 	.word	0x08003c99
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	08003c91 	.word	0x08003c91
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e0d8      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e0d4      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e0d0      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e0cc      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e0c8      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5e      	ldr	r2, [pc, #376]	; (8003e20 <UART_SetConfig+0x2ec>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d125      	bne.n	8003cf6 <UART_SetConfig+0x1c2>
 8003caa:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <UART_SetConfig+0x2e4>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d016      	beq.n	8003ce6 <UART_SetConfig+0x1b2>
 8003cb8:	2b30      	cmp	r3, #48	; 0x30
 8003cba:	d818      	bhi.n	8003cee <UART_SetConfig+0x1ba>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d00a      	beq.n	8003cd6 <UART_SetConfig+0x1a2>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d814      	bhi.n	8003cee <UART_SetConfig+0x1ba>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <UART_SetConfig+0x19a>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d008      	beq.n	8003cde <UART_SetConfig+0x1aa>
 8003ccc:	e00f      	b.n	8003cee <UART_SetConfig+0x1ba>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd4:	e0ad      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cdc:	e0a9      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce4:	e0a5      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cec:	e0a1      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003cee:	2310      	movs	r3, #16
 8003cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf4:	e09d      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4a      	ldr	r2, [pc, #296]	; (8003e24 <UART_SetConfig+0x2f0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d125      	bne.n	8003d4c <UART_SetConfig+0x218>
 8003d00:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <UART_SetConfig+0x2e4>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d0c:	d016      	beq.n	8003d3c <UART_SetConfig+0x208>
 8003d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d10:	d818      	bhi.n	8003d44 <UART_SetConfig+0x210>
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d00a      	beq.n	8003d2c <UART_SetConfig+0x1f8>
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d814      	bhi.n	8003d44 <UART_SetConfig+0x210>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <UART_SetConfig+0x1f0>
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d008      	beq.n	8003d34 <UART_SetConfig+0x200>
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x210>
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2a:	e082      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d32:	e07e      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003d34:	2304      	movs	r3, #4
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3a:	e07a      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d42:	e076      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003d44:	2310      	movs	r3, #16
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4a:	e072      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <UART_SetConfig+0x2f4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d12a      	bne.n	8003dac <UART_SetConfig+0x278>
 8003d56:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <UART_SetConfig+0x2e4>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d64:	d01a      	beq.n	8003d9c <UART_SetConfig+0x268>
 8003d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6a:	d81b      	bhi.n	8003da4 <UART_SetConfig+0x270>
 8003d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d70:	d00c      	beq.n	8003d8c <UART_SetConfig+0x258>
 8003d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d76:	d815      	bhi.n	8003da4 <UART_SetConfig+0x270>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <UART_SetConfig+0x250>
 8003d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d80:	d008      	beq.n	8003d94 <UART_SetConfig+0x260>
 8003d82:	e00f      	b.n	8003da4 <UART_SetConfig+0x270>
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	e052      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d92:	e04e      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9a:	e04a      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da2:	e046      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003daa:	e042      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <UART_SetConfig+0x2dc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d13a      	bne.n	8003e2c <UART_SetConfig+0x2f8>
 8003db6:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <UART_SetConfig+0x2e4>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc4:	d01a      	beq.n	8003dfc <UART_SetConfig+0x2c8>
 8003dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dca:	d81b      	bhi.n	8003e04 <UART_SetConfig+0x2d0>
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd0:	d00c      	beq.n	8003dec <UART_SetConfig+0x2b8>
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d815      	bhi.n	8003e04 <UART_SetConfig+0x2d0>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <UART_SetConfig+0x2b0>
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d008      	beq.n	8003df4 <UART_SetConfig+0x2c0>
 8003de2:	e00f      	b.n	8003e04 <UART_SetConfig+0x2d0>
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e022      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003dec:	2302      	movs	r3, #2
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df2:	e01e      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003df4:	2304      	movs	r3, #4
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfa:	e01a      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e02:	e016      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0a:	e012      	b.n	8003e32 <UART_SetConfig+0x2fe>
 8003e0c:	cfff69f3 	.word	0xcfff69f3
 8003e10:	40008000 	.word	0x40008000
 8003e14:	40013800 	.word	0x40013800
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40004400 	.word	0x40004400
 8003e20:	40004800 	.word	0x40004800
 8003e24:	40004c00 	.word	0x40004c00
 8003e28:	40005000 	.word	0x40005000
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4aae      	ldr	r2, [pc, #696]	; (80040f0 <UART_SetConfig+0x5bc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	f040 8097 	bne.w	8003f6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d823      	bhi.n	8003e8e <UART_SetConfig+0x35a>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x318>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e8f 	.word	0x08003e8f
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e8f 	.word	0x08003e8f
 8003e5c:	08003e7f 	.word	0x08003e7f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e8f 	.word	0x08003e8f
 8003e68:	08003e8f 	.word	0x08003e8f
 8003e6c:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e70:	f7fe f996 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8003e74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e76:	e010      	b.n	8003e9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b9e      	ldr	r3, [pc, #632]	; (80040f4 <UART_SetConfig+0x5c0>)
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e7c:	e00d      	b.n	8003e9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7fe f921 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e84:	e009      	b.n	8003e9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e8c:	e005      	b.n	8003e9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8130 	beq.w	8004102 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	4a94      	ldr	r2, [pc, #592]	; (80040f8 <UART_SetConfig+0x5c4>)
 8003ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eac:	461a      	mov	r2, r3
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d305      	bcc.n	8003ed2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d903      	bls.n	8003eda <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ed8:	e113      	b.n	8004102 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	2200      	movs	r2, #0
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	60fa      	str	r2, [r7, #12]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	4a84      	ldr	r2, [pc, #528]	; (80040f8 <UART_SetConfig+0x5c4>)
 8003ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2200      	movs	r2, #0
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ef8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003efc:	f7fc f9f8 	bl	80002f0 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	020b      	lsls	r3, r1, #8
 8003f12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f16:	0202      	lsls	r2, r0, #8
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	6849      	ldr	r1, [r1, #4]
 8003f1c:	0849      	lsrs	r1, r1, #1
 8003f1e:	2000      	movs	r0, #0
 8003f20:	460c      	mov	r4, r1
 8003f22:	4605      	mov	r5, r0
 8003f24:	eb12 0804 	adds.w	r8, r2, r4
 8003f28:	eb43 0905 	adc.w	r9, r3, r5
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	469a      	mov	sl, r3
 8003f34:	4693      	mov	fp, r2
 8003f36:	4652      	mov	r2, sl
 8003f38:	465b      	mov	r3, fp
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	f7fc f9d7 	bl	80002f0 <__aeabi_uldivmod>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4613      	mov	r3, r2
 8003f48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f50:	d308      	bcc.n	8003f64 <UART_SetConfig+0x430>
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f58:	d204      	bcs.n	8003f64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	e0ce      	b.n	8004102 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f6a:	e0ca      	b.n	8004102 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f74:	d166      	bne.n	8004044 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d827      	bhi.n	8003fce <UART_SetConfig+0x49a>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <UART_SetConfig+0x450>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	08003fb1 	.word	0x08003fb1
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003fcf 	.word	0x08003fcf
 8003f94:	08003fbf 	.word	0x08003fbf
 8003f98:	08003fcf 	.word	0x08003fcf
 8003f9c:	08003fcf 	.word	0x08003fcf
 8003fa0:	08003fcf 	.word	0x08003fcf
 8003fa4:	08003fc7 	.word	0x08003fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f7fe f8fa 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fae:	e014      	b.n	8003fda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb0:	f7fe f90c 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fb6:	e010      	b.n	8003fda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb8:	4b4e      	ldr	r3, [pc, #312]	; (80040f4 <UART_SetConfig+0x5c0>)
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fbc:	e00d      	b.n	8003fda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fbe:	f7fe f881 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fc4:	e009      	b.n	8003fda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fcc:	e005      	b.n	8003fda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8090 	beq.w	8004102 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	4a44      	ldr	r2, [pc, #272]	; (80040f8 <UART_SetConfig+0x5c4>)
 8003fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ff4:	005a      	lsls	r2, r3, #1
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	441a      	add	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	fbb2 f3f3 	udiv	r3, r2, r3
 8004006:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	d916      	bls.n	800403c <UART_SetConfig+0x508>
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d212      	bcs.n	800403c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	b29b      	uxth	r3, r3
 800401a:	f023 030f 	bic.w	r3, r3, #15
 800401e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	b29b      	uxth	r3, r3
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	b29a      	uxth	r2, r3
 800402c:	8bfb      	ldrh	r3, [r7, #30]
 800402e:	4313      	orrs	r3, r2
 8004030:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	8bfa      	ldrh	r2, [r7, #30]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	e062      	b.n	8004102 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004042:	e05e      	b.n	8004102 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004048:	2b08      	cmp	r3, #8
 800404a:	d828      	bhi.n	800409e <UART_SetConfig+0x56a>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0x520>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004079 	.word	0x08004079
 8004058:	08004081 	.word	0x08004081
 800405c:	08004089 	.word	0x08004089
 8004060:	0800409f 	.word	0x0800409f
 8004064:	0800408f 	.word	0x0800408f
 8004068:	0800409f 	.word	0x0800409f
 800406c:	0800409f 	.word	0x0800409f
 8004070:	0800409f 	.word	0x0800409f
 8004074:	08004097 	.word	0x08004097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004078:	f7fe f892 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800407e:	e014      	b.n	80040aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004080:	f7fe f8a4 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 8004084:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004086:	e010      	b.n	80040aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004088:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <UART_SetConfig+0x5c0>)
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800408c:	e00d      	b.n	80040aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408e:	f7fe f819 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8004092:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004094:	e009      	b.n	80040aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800409c:	e005      	b.n	80040aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040a8:	bf00      	nop
    }

    if (pclk != 0U)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d028      	beq.n	8004102 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <UART_SetConfig+0x5c4>)
 80040b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	fbb3 f2f2 	udiv	r2, r3, r2
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	441a      	add	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	d910      	bls.n	80040fc <UART_SetConfig+0x5c8>
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e0:	d20c      	bcs.n	80040fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	e009      	b.n	8004102 <UART_SetConfig+0x5ce>
 80040ee:	bf00      	nop
 80040f0:	40008000 	.word	0x40008000
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	080063a0 	.word	0x080063a0
      }
      else
      {
        ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2201      	movs	r2, #1
 8004106:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2201      	movs	r2, #1
 800410e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2200      	movs	r2, #0
 8004116:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2200      	movs	r2, #0
 800411c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800411e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004122:	4618      	mov	r0, r3
 8004124:	3730      	adds	r7, #48	; 0x30
 8004126:	46bd      	mov	sp, r7
 8004128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800412c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01a      	beq.n	8004242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422a:	d10a      	bne.n	8004242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004280:	f7fc ff1c 	bl	80010bc <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b08      	cmp	r3, #8
 8004292:	d10e      	bne.n	80042b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f82f 	bl	8004306 <UART_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e025      	b.n	80042fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d10e      	bne.n	80042de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f819 	bl	8004306 <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e00f      	b.n	80042fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b09c      	sub	sp, #112	; 0x70
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004316:	e0a9      	b.n	800446c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431e:	f000 80a5 	beq.w	800446c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fc fecb 	bl	80010bc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <UART_WaitOnFlagUntilTimeout+0x32>
 8004332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004334:	2b00      	cmp	r3, #0
 8004336:	d140      	bne.n	80043ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800434c:	667b      	str	r3, [r7, #100]	; 0x64
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004358:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800435c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e6      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	663b      	str	r3, [r7, #96]	; 0x60
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3308      	adds	r3, #8
 8004388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800438a:	64ba      	str	r2, [r7, #72]	; 0x48
 800438c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e069      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d051      	beq.n	800446c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d6:	d149      	bne.n	800446c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
 8004402:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e6      	bne.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	613b      	str	r3, [r7, #16]
   return(result);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	66bb      	str	r3, [r7, #104]	; 0x68
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004434:	623a      	str	r2, [r7, #32]
 8004436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	69f9      	ldr	r1, [r7, #28]
 800443a:	6a3a      	ldr	r2, [r7, #32]
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	61bb      	str	r3, [r7, #24]
   return(result);
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e5      	bne.n	8004414 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e010      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	bf0c      	ite	eq
 800447c:	2301      	moveq	r3, #1
 800447e:	2300      	movne	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	429a      	cmp	r2, r3
 8004488:	f43f af46 	beq.w	8004318 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3770      	adds	r7, #112	; 0x70
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004498:	b480      	push	{r7}
 800449a:	b0a3      	sub	sp, #140	; 0x8c
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ca:	d10e      	bne.n	80044ea <UART_Start_Receive_IT+0x52>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d105      	bne.n	80044e0 <UART_Start_Receive_IT+0x48>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044de:	e02d      	b.n	800453c <UART_Start_Receive_IT+0xa4>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	22ff      	movs	r2, #255	; 0xff
 80044e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044e8:	e028      	b.n	800453c <UART_Start_Receive_IT+0xa4>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <UART_Start_Receive_IT+0x76>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <UART_Start_Receive_IT+0x6c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	22ff      	movs	r2, #255	; 0xff
 80044fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004502:	e01b      	b.n	800453c <UART_Start_Receive_IT+0xa4>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	227f      	movs	r2, #127	; 0x7f
 8004508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800450c:	e016      	b.n	800453c <UART_Start_Receive_IT+0xa4>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004516:	d10d      	bne.n	8004534 <UART_Start_Receive_IT+0x9c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <UART_Start_Receive_IT+0x92>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	227f      	movs	r2, #127	; 0x7f
 8004524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004528:	e008      	b.n	800453c <UART_Start_Receive_IT+0xa4>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	223f      	movs	r2, #63	; 0x3f
 800452e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004532:	e003      	b.n	800453c <UART_Start_Receive_IT+0xa4>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2222      	movs	r2, #34	; 0x22
 8004548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800455c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3308      	adds	r3, #8
 800456c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004570:	673a      	str	r2, [r7, #112]	; 0x70
 8004572:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004576:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800457e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e3      	bne.n	800454c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458c:	d153      	bne.n	8004636 <UART_Start_Receive_IT+0x19e>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	429a      	cmp	r2, r3
 8004598:	d34d      	bcc.n	8004636 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d107      	bne.n	80045b4 <UART_Start_Receive_IT+0x11c>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d103      	bne.n	80045b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a4b      	ldr	r2, [pc, #300]	; (80046dc <UART_Start_Receive_IT+0x244>)
 80045b0:	671a      	str	r2, [r3, #112]	; 0x70
 80045b2:	e002      	b.n	80045ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a4a      	ldr	r2, [pc, #296]	; (80046e0 <UART_Start_Receive_IT+0x248>)
 80045b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01a      	beq.n	8004600 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e4      	bne.n	80045ca <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3308      	adds	r3, #8
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004616:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3308      	adds	r3, #8
 800461e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004620:	64ba      	str	r2, [r7, #72]	; 0x48
 8004622:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800462e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_Start_Receive_IT+0x168>
 8004634:	e04a      	b.n	80046cc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	d107      	bne.n	8004650 <UART_Start_Receive_IT+0x1b8>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <UART_Start_Receive_IT+0x24c>)
 800464c:	671a      	str	r2, [r3, #112]	; 0x70
 800464e:	e002      	b.n	8004656 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <UART_Start_Receive_IT+0x250>)
 8004654:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d019      	beq.n	800469a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800467a:	677b      	str	r3, [r7, #116]	; 0x74
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
 8004686:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800468a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e6      	bne.n	8004666 <UART_Start_Receive_IT+0x1ce>
 8004698:	e018      	b.n	80046cc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	613b      	str	r3, [r7, #16]
   return(result);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f043 0320 	orr.w	r3, r3, #32
 80046ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	69f9      	ldr	r1, [r7, #28]
 80046be:	6a3a      	ldr	r2, [r7, #32]
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e6      	bne.n	800469a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	378c      	adds	r7, #140	; 0x8c
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	08004ca5 	.word	0x08004ca5
 80046e0:	080049ad 	.word	0x080049ad
 80046e4:	0800484d 	.word	0x0800484d
 80046e8:	080046ed 	.word	0x080046ed

080046ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b096      	sub	sp, #88	; 0x58
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80046fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	2b22      	cmp	r3, #34	; 0x22
 8004706:	f040 8095 	bne.w	8004834 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004714:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004718:	b2d9      	uxtb	r1, r3
 800471a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800471e:	b2da      	uxtb	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	400a      	ands	r2, r1
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d178      	bne.n	8004844 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004766:	653b      	str	r3, [r7, #80]	; 0x50
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004770:	647b      	str	r3, [r7, #68]	; 0x44
 8004772:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800477e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e6      	bne.n	8004752 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3308      	adds	r3, #8
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	623b      	str	r3, [r7, #32]
   return(result);
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3308      	adds	r3, #8
 80047a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047a4:	633a      	str	r2, [r7, #48]	; 0x30
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e5      	bne.n	8004784 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d12e      	bne.n	800482c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f023 0310 	bic.w	r3, r3, #16
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	69b9      	ldr	r1, [r7, #24]
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	617b      	str	r3, [r7, #20]
   return(result);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e6      	bne.n	80047d4 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b10      	cmp	r3, #16
 8004812:	d103      	bne.n	800481c <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2210      	movs	r2, #16
 800481a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff f979 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800482a:	e00b      	b.n	8004844 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fc f8cb 	bl	80009c8 <HAL_UART_RxCpltCallback>
}
 8004832:	e007      	b.n	8004844 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0208 	orr.w	r2, r2, #8
 8004842:	619a      	str	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	3758      	adds	r7, #88	; 0x58
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b096      	sub	sp, #88	; 0x58
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800485a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	2b22      	cmp	r3, #34	; 0x22
 8004866:	f040 8095 	bne.w	8004994 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800487a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800487e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004882:	4013      	ands	r3, r2
 8004884:	b29a      	uxth	r2, r3
 8004886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004888:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	1c9a      	adds	r2, r3, #2
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d178      	bne.n	80049a4 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d0:	643b      	str	r3, [r7, #64]	; 0x40
 80048d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e6      	bne.n	80048b2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004904:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e5      	bne.n	80048e4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d12e      	bne.n	800498c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	60bb      	str	r3, [r7, #8]
   return(result);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 0310 	bic.w	r3, r3, #16
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	613b      	str	r3, [r7, #16]
   return(result);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e6      	bne.n	8004934 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d103      	bne.n	800497c <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2210      	movs	r2, #16
 800497a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff f8c9 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800498a:	e00b      	b.n	80049a4 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fc f81b 	bl	80009c8 <HAL_UART_RxCpltCallback>
}
 8004992:	e007      	b.n	80049a4 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0208 	orr.w	r2, r2, #8
 80049a2:	619a      	str	r2, [r3, #24]
}
 80049a4:	bf00      	nop
 80049a6:	3758      	adds	r7, #88	; 0x58
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b0a6      	sub	sp, #152	; 0x98
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80049ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	2b22      	cmp	r3, #34	; 0x22
 80049e4:	f040 814f 	bne.w	8004c86 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80049ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049f2:	e0f6      	b.n	8004be2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004a02:	b2d9      	uxtb	r1, r3
 8004a04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	400a      	ands	r2, r1
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004a3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d053      	beq.n	8004aee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d011      	beq.n	8004a76 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2201      	movs	r2, #1
 8004a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6c:	f043 0201 	orr.w	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d011      	beq.n	8004aa6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2202      	movs	r2, #2
 8004a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9c:	f043 0204 	orr.w	r2, r3, #4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d011      	beq.n	8004ad6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004acc:	f043 0202 	orr.w	r2, r3, #2
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d006      	beq.n	8004aee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff f811 	bl	8003b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d173      	bne.n	8004be2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b1e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004b22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e4      	bne.n	8004afa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004b54:	657a      	str	r2, [r7, #84]	; 0x54
 8004b56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e3      	bne.n	8004b30 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d12e      	bne.n	8004bdc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	f023 0310 	bic.w	r3, r3, #16
 8004b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e6      	bne.n	8004b84 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d103      	bne.n	8004bcc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2210      	movs	r2, #16
 8004bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fe ffa1 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
 8004bda:	e002      	b.n	8004be2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fb fef3 	bl	80009c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004be2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d006      	beq.n	8004bf8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8004bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f47f aefe 	bne.w	80049f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004c02:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d045      	beq.n	8004c96 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d23e      	bcs.n	8004c96 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	673b      	str	r3, [r7, #112]	; 0x70
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004c50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f043 0320 	orr.w	r3, r3, #32
 8004c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6979      	ldr	r1, [r7, #20]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c84:	e007      	b.n	8004c96 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0208 	orr.w	r2, r2, #8
 8004c94:	619a      	str	r2, [r3, #24]
}
 8004c96:	bf00      	nop
 8004c98:	3798      	adds	r7, #152	; 0x98
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	080046ed 	.word	0x080046ed

08004ca4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b0a8      	sub	sp, #160	; 0xa0
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004cb2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	2b22      	cmp	r3, #34	; 0x22
 8004cdc:	f040 8153 	bne.w	8004f86 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ce6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004cea:	e0fa      	b.n	8004ee2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8004cfe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004d02:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004d06:	4013      	ands	r3, r2
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d053      	beq.n	8004dea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d011      	beq.n	8004d72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004d4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d68:	f043 0201 	orr.w	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d011      	beq.n	8004da2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d98:	f043 0204 	orr.w	r2, r3, #4
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004da2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d011      	beq.n	8004dd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc8:	f043 0202 	orr.w	r2, r3, #2
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d006      	beq.n	8004dea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fe fe93 	bl	8003b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d175      	bne.n	8004ee2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e1a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e4      	bne.n	8004df6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e54:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e1      	bne.n	8004e2c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d12e      	bne.n	8004edc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e94:	f023 0310 	bic.w	r3, r3, #16
 8004e98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e6      	bne.n	8004e84 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d103      	bne.n	8004ecc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2210      	movs	r2, #16
 8004eca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7fe fe21 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
 8004eda:	e002      	b.n	8004ee2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7fb fd73 	bl	80009c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ee2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d006      	beq.n	8004ef8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8004eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f47f aefa 	bne.w	8004cec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004efe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d045      	beq.n	8004f96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004f10:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d23e      	bcs.n	8004f96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	623b      	str	r3, [r7, #32]
   return(result);
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	677b      	str	r3, [r7, #116]	; 0x74
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3308      	adds	r3, #8
 8004f36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f38:	633a      	str	r2, [r7, #48]	; 0x30
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e5      	bne.n	8004f18 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8004f50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f043 0320 	orr.w	r3, r3, #32
 8004f66:	673b      	str	r3, [r7, #112]	; 0x70
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e6      	bne.n	8004f52 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f84:	e007      	b.n	8004f96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0208 	orr.w	r2, r2, #8
 8004f94:	619a      	str	r2, [r3, #24]
}
 8004f96:	bf00      	nop
 8004f98:	37a0      	adds	r7, #160	; 0xa0
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	0800484d 	.word	0x0800484d

08004fa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_UARTEx_DisableFifoMode+0x16>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e027      	b.n	800500a <HAL_UARTEx_DisableFifoMode+0x66>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2224      	movs	r2, #36	; 0x24
 8004fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800502a:	2302      	movs	r3, #2
 800502c:	e02d      	b.n	800508a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2224      	movs	r2, #36	; 0x24
 800503a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f850 	bl	8005110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e02d      	b.n	8005106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2224      	movs	r2, #36	; 0x24
 80050b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f812 	bl	8005110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511c:	2b00      	cmp	r3, #0
 800511e:	d108      	bne.n	8005132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005130:	e031      	b.n	8005196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005132:	2308      	movs	r3, #8
 8005134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005136:	2308      	movs	r3, #8
 8005138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	0e5b      	lsrs	r3, r3, #25
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	0f5b      	lsrs	r3, r3, #29
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800515a:	7bbb      	ldrb	r3, [r7, #14]
 800515c:	7b3a      	ldrb	r2, [r7, #12]
 800515e:	4911      	ldr	r1, [pc, #68]	; (80051a4 <UARTEx_SetNbDataToProcess+0x94>)
 8005160:	5c8a      	ldrb	r2, [r1, r2]
 8005162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005166:	7b3a      	ldrb	r2, [r7, #12]
 8005168:	490f      	ldr	r1, [pc, #60]	; (80051a8 <UARTEx_SetNbDataToProcess+0x98>)
 800516a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800516c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005170:	b29a      	uxth	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	7b7a      	ldrb	r2, [r7, #13]
 800517c:	4909      	ldr	r1, [pc, #36]	; (80051a4 <UARTEx_SetNbDataToProcess+0x94>)
 800517e:	5c8a      	ldrb	r2, [r1, r2]
 8005180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005184:	7b7a      	ldrb	r2, [r7, #13]
 8005186:	4908      	ldr	r1, [pc, #32]	; (80051a8 <UARTEx_SetNbDataToProcess+0x98>)
 8005188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800518a:	fb93 f3f2 	sdiv	r3, r3, r2
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	080063b8 	.word	0x080063b8
 80051a8:	080063c0 	.word	0x080063c0

080051ac <__errno>:
 80051ac:	4b01      	ldr	r3, [pc, #4]	; (80051b4 <__errno+0x8>)
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	200000a4 	.word	0x200000a4

080051b8 <__libc_init_array>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4d0d      	ldr	r5, [pc, #52]	; (80051f0 <__libc_init_array+0x38>)
 80051bc:	4c0d      	ldr	r4, [pc, #52]	; (80051f4 <__libc_init_array+0x3c>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	2600      	movs	r6, #0
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	d109      	bne.n	80051dc <__libc_init_array+0x24>
 80051c8:	4d0b      	ldr	r5, [pc, #44]	; (80051f8 <__libc_init_array+0x40>)
 80051ca:	4c0c      	ldr	r4, [pc, #48]	; (80051fc <__libc_init_array+0x44>)
 80051cc:	f001 f876 	bl	80062bc <_init>
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	2600      	movs	r6, #0
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	d105      	bne.n	80051e6 <__libc_init_array+0x2e>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e0:	4798      	blx	r3
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7ee      	b.n	80051c4 <__libc_init_array+0xc>
 80051e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ea:	4798      	blx	r3
 80051ec:	3601      	adds	r6, #1
 80051ee:	e7f2      	b.n	80051d6 <__libc_init_array+0x1e>
 80051f0:	08006518 	.word	0x08006518
 80051f4:	08006518 	.word	0x08006518
 80051f8:	08006518 	.word	0x08006518
 80051fc:	0800651c 	.word	0x0800651c

08005200 <memset>:
 8005200:	4402      	add	r2, r0
 8005202:	4603      	mov	r3, r0
 8005204:	4293      	cmp	r3, r2
 8005206:	d100      	bne.n	800520a <memset+0xa>
 8005208:	4770      	bx	lr
 800520a:	f803 1b01 	strb.w	r1, [r3], #1
 800520e:	e7f9      	b.n	8005204 <memset+0x4>

08005210 <strtok>:
 8005210:	4b16      	ldr	r3, [pc, #88]	; (800526c <strtok+0x5c>)
 8005212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005214:	681e      	ldr	r6, [r3, #0]
 8005216:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005218:	4605      	mov	r5, r0
 800521a:	b9fc      	cbnz	r4, 800525c <strtok+0x4c>
 800521c:	2050      	movs	r0, #80	; 0x50
 800521e:	9101      	str	r1, [sp, #4]
 8005220:	f000 f882 	bl	8005328 <malloc>
 8005224:	9901      	ldr	r1, [sp, #4]
 8005226:	65b0      	str	r0, [r6, #88]	; 0x58
 8005228:	4602      	mov	r2, r0
 800522a:	b920      	cbnz	r0, 8005236 <strtok+0x26>
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <strtok+0x60>)
 800522e:	4811      	ldr	r0, [pc, #68]	; (8005274 <strtok+0x64>)
 8005230:	2157      	movs	r1, #87	; 0x57
 8005232:	f000 f849 	bl	80052c8 <__assert_func>
 8005236:	e9c0 4400 	strd	r4, r4, [r0]
 800523a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800523e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005242:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005246:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800524a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800524e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005252:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005256:	6184      	str	r4, [r0, #24]
 8005258:	7704      	strb	r4, [r0, #28]
 800525a:	6244      	str	r4, [r0, #36]	; 0x24
 800525c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800525e:	2301      	movs	r3, #1
 8005260:	4628      	mov	r0, r5
 8005262:	b002      	add	sp, #8
 8005264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005268:	f000 b806 	b.w	8005278 <__strtok_r>
 800526c:	200000a4 	.word	0x200000a4
 8005270:	080063cc 	.word	0x080063cc
 8005274:	080063e3 	.word	0x080063e3

08005278 <__strtok_r>:
 8005278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800527a:	b908      	cbnz	r0, 8005280 <__strtok_r+0x8>
 800527c:	6810      	ldr	r0, [r2, #0]
 800527e:	b188      	cbz	r0, 80052a4 <__strtok_r+0x2c>
 8005280:	4604      	mov	r4, r0
 8005282:	4620      	mov	r0, r4
 8005284:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005288:	460f      	mov	r7, r1
 800528a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800528e:	b91e      	cbnz	r6, 8005298 <__strtok_r+0x20>
 8005290:	b965      	cbnz	r5, 80052ac <__strtok_r+0x34>
 8005292:	6015      	str	r5, [r2, #0]
 8005294:	4628      	mov	r0, r5
 8005296:	e005      	b.n	80052a4 <__strtok_r+0x2c>
 8005298:	42b5      	cmp	r5, r6
 800529a:	d1f6      	bne.n	800528a <__strtok_r+0x12>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <__strtok_r+0xa>
 80052a0:	6014      	str	r4, [r2, #0]
 80052a2:	7003      	strb	r3, [r0, #0]
 80052a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a6:	461c      	mov	r4, r3
 80052a8:	e00c      	b.n	80052c4 <__strtok_r+0x4c>
 80052aa:	b915      	cbnz	r5, 80052b2 <__strtok_r+0x3a>
 80052ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052b0:	460e      	mov	r6, r1
 80052b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80052b6:	42ab      	cmp	r3, r5
 80052b8:	d1f7      	bne.n	80052aa <__strtok_r+0x32>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f3      	beq.n	80052a6 <__strtok_r+0x2e>
 80052be:	2300      	movs	r3, #0
 80052c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80052c4:	6014      	str	r4, [r2, #0]
 80052c6:	e7ed      	b.n	80052a4 <__strtok_r+0x2c>

080052c8 <__assert_func>:
 80052c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052ca:	4614      	mov	r4, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <__assert_func+0x2c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4605      	mov	r5, r0
 80052d4:	68d8      	ldr	r0, [r3, #12]
 80052d6:	b14c      	cbz	r4, 80052ec <__assert_func+0x24>
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <__assert_func+0x30>)
 80052da:	9100      	str	r1, [sp, #0]
 80052dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052e0:	4906      	ldr	r1, [pc, #24]	; (80052fc <__assert_func+0x34>)
 80052e2:	462b      	mov	r3, r5
 80052e4:	f000 f80e 	bl	8005304 <fiprintf>
 80052e8:	f000 fcc4 	bl	8005c74 <abort>
 80052ec:	4b04      	ldr	r3, [pc, #16]	; (8005300 <__assert_func+0x38>)
 80052ee:	461c      	mov	r4, r3
 80052f0:	e7f3      	b.n	80052da <__assert_func+0x12>
 80052f2:	bf00      	nop
 80052f4:	200000a4 	.word	0x200000a4
 80052f8:	08006440 	.word	0x08006440
 80052fc:	0800644d 	.word	0x0800644d
 8005300:	0800647b 	.word	0x0800647b

08005304 <fiprintf>:
 8005304:	b40e      	push	{r1, r2, r3}
 8005306:	b503      	push	{r0, r1, lr}
 8005308:	4601      	mov	r1, r0
 800530a:	ab03      	add	r3, sp, #12
 800530c:	4805      	ldr	r0, [pc, #20]	; (8005324 <fiprintf+0x20>)
 800530e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005312:	6800      	ldr	r0, [r0, #0]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	f000 f919 	bl	800554c <_vfiprintf_r>
 800531a:	b002      	add	sp, #8
 800531c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005320:	b003      	add	sp, #12
 8005322:	4770      	bx	lr
 8005324:	200000a4 	.word	0x200000a4

08005328 <malloc>:
 8005328:	4b02      	ldr	r3, [pc, #8]	; (8005334 <malloc+0xc>)
 800532a:	4601      	mov	r1, r0
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	f000 b86f 	b.w	8005410 <_malloc_r>
 8005332:	bf00      	nop
 8005334:	200000a4 	.word	0x200000a4

08005338 <_free_r>:
 8005338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800533a:	2900      	cmp	r1, #0
 800533c:	d044      	beq.n	80053c8 <_free_r+0x90>
 800533e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005342:	9001      	str	r0, [sp, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f1a1 0404 	sub.w	r4, r1, #4
 800534a:	bfb8      	it	lt
 800534c:	18e4      	addlt	r4, r4, r3
 800534e:	f000 feb9 	bl	80060c4 <__malloc_lock>
 8005352:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <_free_r+0x94>)
 8005354:	9801      	ldr	r0, [sp, #4]
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	b933      	cbnz	r3, 8005368 <_free_r+0x30>
 800535a:	6063      	str	r3, [r4, #4]
 800535c:	6014      	str	r4, [r2, #0]
 800535e:	b003      	add	sp, #12
 8005360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005364:	f000 beb4 	b.w	80060d0 <__malloc_unlock>
 8005368:	42a3      	cmp	r3, r4
 800536a:	d908      	bls.n	800537e <_free_r+0x46>
 800536c:	6825      	ldr	r5, [r4, #0]
 800536e:	1961      	adds	r1, r4, r5
 8005370:	428b      	cmp	r3, r1
 8005372:	bf01      	itttt	eq
 8005374:	6819      	ldreq	r1, [r3, #0]
 8005376:	685b      	ldreq	r3, [r3, #4]
 8005378:	1949      	addeq	r1, r1, r5
 800537a:	6021      	streq	r1, [r4, #0]
 800537c:	e7ed      	b.n	800535a <_free_r+0x22>
 800537e:	461a      	mov	r2, r3
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	b10b      	cbz	r3, 8005388 <_free_r+0x50>
 8005384:	42a3      	cmp	r3, r4
 8005386:	d9fa      	bls.n	800537e <_free_r+0x46>
 8005388:	6811      	ldr	r1, [r2, #0]
 800538a:	1855      	adds	r5, r2, r1
 800538c:	42a5      	cmp	r5, r4
 800538e:	d10b      	bne.n	80053a8 <_free_r+0x70>
 8005390:	6824      	ldr	r4, [r4, #0]
 8005392:	4421      	add	r1, r4
 8005394:	1854      	adds	r4, r2, r1
 8005396:	42a3      	cmp	r3, r4
 8005398:	6011      	str	r1, [r2, #0]
 800539a:	d1e0      	bne.n	800535e <_free_r+0x26>
 800539c:	681c      	ldr	r4, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	6053      	str	r3, [r2, #4]
 80053a2:	4421      	add	r1, r4
 80053a4:	6011      	str	r1, [r2, #0]
 80053a6:	e7da      	b.n	800535e <_free_r+0x26>
 80053a8:	d902      	bls.n	80053b0 <_free_r+0x78>
 80053aa:	230c      	movs	r3, #12
 80053ac:	6003      	str	r3, [r0, #0]
 80053ae:	e7d6      	b.n	800535e <_free_r+0x26>
 80053b0:	6825      	ldr	r5, [r4, #0]
 80053b2:	1961      	adds	r1, r4, r5
 80053b4:	428b      	cmp	r3, r1
 80053b6:	bf04      	itt	eq
 80053b8:	6819      	ldreq	r1, [r3, #0]
 80053ba:	685b      	ldreq	r3, [r3, #4]
 80053bc:	6063      	str	r3, [r4, #4]
 80053be:	bf04      	itt	eq
 80053c0:	1949      	addeq	r1, r1, r5
 80053c2:	6021      	streq	r1, [r4, #0]
 80053c4:	6054      	str	r4, [r2, #4]
 80053c6:	e7ca      	b.n	800535e <_free_r+0x26>
 80053c8:	b003      	add	sp, #12
 80053ca:	bd30      	pop	{r4, r5, pc}
 80053cc:	20000250 	.word	0x20000250

080053d0 <sbrk_aligned>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4e0e      	ldr	r6, [pc, #56]	; (800540c <sbrk_aligned+0x3c>)
 80053d4:	460c      	mov	r4, r1
 80053d6:	6831      	ldr	r1, [r6, #0]
 80053d8:	4605      	mov	r5, r0
 80053da:	b911      	cbnz	r1, 80053e2 <sbrk_aligned+0x12>
 80053dc:	f000 fb7a 	bl	8005ad4 <_sbrk_r>
 80053e0:	6030      	str	r0, [r6, #0]
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 fb75 	bl	8005ad4 <_sbrk_r>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	d00a      	beq.n	8005404 <sbrk_aligned+0x34>
 80053ee:	1cc4      	adds	r4, r0, #3
 80053f0:	f024 0403 	bic.w	r4, r4, #3
 80053f4:	42a0      	cmp	r0, r4
 80053f6:	d007      	beq.n	8005408 <sbrk_aligned+0x38>
 80053f8:	1a21      	subs	r1, r4, r0
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 fb6a 	bl	8005ad4 <_sbrk_r>
 8005400:	3001      	adds	r0, #1
 8005402:	d101      	bne.n	8005408 <sbrk_aligned+0x38>
 8005404:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005408:	4620      	mov	r0, r4
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	20000254 	.word	0x20000254

08005410 <_malloc_r>:
 8005410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005414:	1ccd      	adds	r5, r1, #3
 8005416:	f025 0503 	bic.w	r5, r5, #3
 800541a:	3508      	adds	r5, #8
 800541c:	2d0c      	cmp	r5, #12
 800541e:	bf38      	it	cc
 8005420:	250c      	movcc	r5, #12
 8005422:	2d00      	cmp	r5, #0
 8005424:	4607      	mov	r7, r0
 8005426:	db01      	blt.n	800542c <_malloc_r+0x1c>
 8005428:	42a9      	cmp	r1, r5
 800542a:	d905      	bls.n	8005438 <_malloc_r+0x28>
 800542c:	230c      	movs	r3, #12
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	2600      	movs	r6, #0
 8005432:	4630      	mov	r0, r6
 8005434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005438:	4e2e      	ldr	r6, [pc, #184]	; (80054f4 <_malloc_r+0xe4>)
 800543a:	f000 fe43 	bl	80060c4 <__malloc_lock>
 800543e:	6833      	ldr	r3, [r6, #0]
 8005440:	461c      	mov	r4, r3
 8005442:	bb34      	cbnz	r4, 8005492 <_malloc_r+0x82>
 8005444:	4629      	mov	r1, r5
 8005446:	4638      	mov	r0, r7
 8005448:	f7ff ffc2 	bl	80053d0 <sbrk_aligned>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	4604      	mov	r4, r0
 8005450:	d14d      	bne.n	80054ee <_malloc_r+0xde>
 8005452:	6834      	ldr	r4, [r6, #0]
 8005454:	4626      	mov	r6, r4
 8005456:	2e00      	cmp	r6, #0
 8005458:	d140      	bne.n	80054dc <_malloc_r+0xcc>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	4631      	mov	r1, r6
 800545e:	4638      	mov	r0, r7
 8005460:	eb04 0803 	add.w	r8, r4, r3
 8005464:	f000 fb36 	bl	8005ad4 <_sbrk_r>
 8005468:	4580      	cmp	r8, r0
 800546a:	d13a      	bne.n	80054e2 <_malloc_r+0xd2>
 800546c:	6821      	ldr	r1, [r4, #0]
 800546e:	3503      	adds	r5, #3
 8005470:	1a6d      	subs	r5, r5, r1
 8005472:	f025 0503 	bic.w	r5, r5, #3
 8005476:	3508      	adds	r5, #8
 8005478:	2d0c      	cmp	r5, #12
 800547a:	bf38      	it	cc
 800547c:	250c      	movcc	r5, #12
 800547e:	4629      	mov	r1, r5
 8005480:	4638      	mov	r0, r7
 8005482:	f7ff ffa5 	bl	80053d0 <sbrk_aligned>
 8005486:	3001      	adds	r0, #1
 8005488:	d02b      	beq.n	80054e2 <_malloc_r+0xd2>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	442b      	add	r3, r5
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	e00e      	b.n	80054b0 <_malloc_r+0xa0>
 8005492:	6822      	ldr	r2, [r4, #0]
 8005494:	1b52      	subs	r2, r2, r5
 8005496:	d41e      	bmi.n	80054d6 <_malloc_r+0xc6>
 8005498:	2a0b      	cmp	r2, #11
 800549a:	d916      	bls.n	80054ca <_malloc_r+0xba>
 800549c:	1961      	adds	r1, r4, r5
 800549e:	42a3      	cmp	r3, r4
 80054a0:	6025      	str	r5, [r4, #0]
 80054a2:	bf18      	it	ne
 80054a4:	6059      	strne	r1, [r3, #4]
 80054a6:	6863      	ldr	r3, [r4, #4]
 80054a8:	bf08      	it	eq
 80054aa:	6031      	streq	r1, [r6, #0]
 80054ac:	5162      	str	r2, [r4, r5]
 80054ae:	604b      	str	r3, [r1, #4]
 80054b0:	4638      	mov	r0, r7
 80054b2:	f104 060b 	add.w	r6, r4, #11
 80054b6:	f000 fe0b 	bl	80060d0 <__malloc_unlock>
 80054ba:	f026 0607 	bic.w	r6, r6, #7
 80054be:	1d23      	adds	r3, r4, #4
 80054c0:	1af2      	subs	r2, r6, r3
 80054c2:	d0b6      	beq.n	8005432 <_malloc_r+0x22>
 80054c4:	1b9b      	subs	r3, r3, r6
 80054c6:	50a3      	str	r3, [r4, r2]
 80054c8:	e7b3      	b.n	8005432 <_malloc_r+0x22>
 80054ca:	6862      	ldr	r2, [r4, #4]
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	bf0c      	ite	eq
 80054d0:	6032      	streq	r2, [r6, #0]
 80054d2:	605a      	strne	r2, [r3, #4]
 80054d4:	e7ec      	b.n	80054b0 <_malloc_r+0xa0>
 80054d6:	4623      	mov	r3, r4
 80054d8:	6864      	ldr	r4, [r4, #4]
 80054da:	e7b2      	b.n	8005442 <_malloc_r+0x32>
 80054dc:	4634      	mov	r4, r6
 80054de:	6876      	ldr	r6, [r6, #4]
 80054e0:	e7b9      	b.n	8005456 <_malloc_r+0x46>
 80054e2:	230c      	movs	r3, #12
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4638      	mov	r0, r7
 80054e8:	f000 fdf2 	bl	80060d0 <__malloc_unlock>
 80054ec:	e7a1      	b.n	8005432 <_malloc_r+0x22>
 80054ee:	6025      	str	r5, [r4, #0]
 80054f0:	e7de      	b.n	80054b0 <_malloc_r+0xa0>
 80054f2:	bf00      	nop
 80054f4:	20000250 	.word	0x20000250

080054f8 <__sfputc_r>:
 80054f8:	6893      	ldr	r3, [r2, #8]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	b410      	push	{r4}
 8005500:	6093      	str	r3, [r2, #8]
 8005502:	da08      	bge.n	8005516 <__sfputc_r+0x1e>
 8005504:	6994      	ldr	r4, [r2, #24]
 8005506:	42a3      	cmp	r3, r4
 8005508:	db01      	blt.n	800550e <__sfputc_r+0x16>
 800550a:	290a      	cmp	r1, #10
 800550c:	d103      	bne.n	8005516 <__sfputc_r+0x1e>
 800550e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005512:	f000 baef 	b.w	8005af4 <__swbuf_r>
 8005516:	6813      	ldr	r3, [r2, #0]
 8005518:	1c58      	adds	r0, r3, #1
 800551a:	6010      	str	r0, [r2, #0]
 800551c:	7019      	strb	r1, [r3, #0]
 800551e:	4608      	mov	r0, r1
 8005520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005524:	4770      	bx	lr

08005526 <__sfputs_r>:
 8005526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005528:	4606      	mov	r6, r0
 800552a:	460f      	mov	r7, r1
 800552c:	4614      	mov	r4, r2
 800552e:	18d5      	adds	r5, r2, r3
 8005530:	42ac      	cmp	r4, r5
 8005532:	d101      	bne.n	8005538 <__sfputs_r+0x12>
 8005534:	2000      	movs	r0, #0
 8005536:	e007      	b.n	8005548 <__sfputs_r+0x22>
 8005538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553c:	463a      	mov	r2, r7
 800553e:	4630      	mov	r0, r6
 8005540:	f7ff ffda 	bl	80054f8 <__sfputc_r>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d1f3      	bne.n	8005530 <__sfputs_r+0xa>
 8005548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800554c <_vfiprintf_r>:
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	460d      	mov	r5, r1
 8005552:	b09d      	sub	sp, #116	; 0x74
 8005554:	4614      	mov	r4, r2
 8005556:	4698      	mov	r8, r3
 8005558:	4606      	mov	r6, r0
 800555a:	b118      	cbz	r0, 8005564 <_vfiprintf_r+0x18>
 800555c:	6983      	ldr	r3, [r0, #24]
 800555e:	b90b      	cbnz	r3, 8005564 <_vfiprintf_r+0x18>
 8005560:	f000 fcaa 	bl	8005eb8 <__sinit>
 8005564:	4b89      	ldr	r3, [pc, #548]	; (800578c <_vfiprintf_r+0x240>)
 8005566:	429d      	cmp	r5, r3
 8005568:	d11b      	bne.n	80055a2 <_vfiprintf_r+0x56>
 800556a:	6875      	ldr	r5, [r6, #4]
 800556c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800556e:	07d9      	lsls	r1, r3, #31
 8005570:	d405      	bmi.n	800557e <_vfiprintf_r+0x32>
 8005572:	89ab      	ldrh	r3, [r5, #12]
 8005574:	059a      	lsls	r2, r3, #22
 8005576:	d402      	bmi.n	800557e <_vfiprintf_r+0x32>
 8005578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800557a:	f000 fd3b 	bl	8005ff4 <__retarget_lock_acquire_recursive>
 800557e:	89ab      	ldrh	r3, [r5, #12]
 8005580:	071b      	lsls	r3, r3, #28
 8005582:	d501      	bpl.n	8005588 <_vfiprintf_r+0x3c>
 8005584:	692b      	ldr	r3, [r5, #16]
 8005586:	b9eb      	cbnz	r3, 80055c4 <_vfiprintf_r+0x78>
 8005588:	4629      	mov	r1, r5
 800558a:	4630      	mov	r0, r6
 800558c:	f000 fb04 	bl	8005b98 <__swsetup_r>
 8005590:	b1c0      	cbz	r0, 80055c4 <_vfiprintf_r+0x78>
 8005592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005594:	07dc      	lsls	r4, r3, #31
 8005596:	d50e      	bpl.n	80055b6 <_vfiprintf_r+0x6a>
 8005598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800559c:	b01d      	add	sp, #116	; 0x74
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	4b7b      	ldr	r3, [pc, #492]	; (8005790 <_vfiprintf_r+0x244>)
 80055a4:	429d      	cmp	r5, r3
 80055a6:	d101      	bne.n	80055ac <_vfiprintf_r+0x60>
 80055a8:	68b5      	ldr	r5, [r6, #8]
 80055aa:	e7df      	b.n	800556c <_vfiprintf_r+0x20>
 80055ac:	4b79      	ldr	r3, [pc, #484]	; (8005794 <_vfiprintf_r+0x248>)
 80055ae:	429d      	cmp	r5, r3
 80055b0:	bf08      	it	eq
 80055b2:	68f5      	ldreq	r5, [r6, #12]
 80055b4:	e7da      	b.n	800556c <_vfiprintf_r+0x20>
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	0598      	lsls	r0, r3, #22
 80055ba:	d4ed      	bmi.n	8005598 <_vfiprintf_r+0x4c>
 80055bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055be:	f000 fd1a 	bl	8005ff6 <__retarget_lock_release_recursive>
 80055c2:	e7e9      	b.n	8005598 <_vfiprintf_r+0x4c>
 80055c4:	2300      	movs	r3, #0
 80055c6:	9309      	str	r3, [sp, #36]	; 0x24
 80055c8:	2320      	movs	r3, #32
 80055ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80055d2:	2330      	movs	r3, #48	; 0x30
 80055d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005798 <_vfiprintf_r+0x24c>
 80055d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055dc:	f04f 0901 	mov.w	r9, #1
 80055e0:	4623      	mov	r3, r4
 80055e2:	469a      	mov	sl, r3
 80055e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055e8:	b10a      	cbz	r2, 80055ee <_vfiprintf_r+0xa2>
 80055ea:	2a25      	cmp	r2, #37	; 0x25
 80055ec:	d1f9      	bne.n	80055e2 <_vfiprintf_r+0x96>
 80055ee:	ebba 0b04 	subs.w	fp, sl, r4
 80055f2:	d00b      	beq.n	800560c <_vfiprintf_r+0xc0>
 80055f4:	465b      	mov	r3, fp
 80055f6:	4622      	mov	r2, r4
 80055f8:	4629      	mov	r1, r5
 80055fa:	4630      	mov	r0, r6
 80055fc:	f7ff ff93 	bl	8005526 <__sfputs_r>
 8005600:	3001      	adds	r0, #1
 8005602:	f000 80aa 	beq.w	800575a <_vfiprintf_r+0x20e>
 8005606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005608:	445a      	add	r2, fp
 800560a:	9209      	str	r2, [sp, #36]	; 0x24
 800560c:	f89a 3000 	ldrb.w	r3, [sl]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80a2 	beq.w	800575a <_vfiprintf_r+0x20e>
 8005616:	2300      	movs	r3, #0
 8005618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800561c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005620:	f10a 0a01 	add.w	sl, sl, #1
 8005624:	9304      	str	r3, [sp, #16]
 8005626:	9307      	str	r3, [sp, #28]
 8005628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800562c:	931a      	str	r3, [sp, #104]	; 0x68
 800562e:	4654      	mov	r4, sl
 8005630:	2205      	movs	r2, #5
 8005632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005636:	4858      	ldr	r0, [pc, #352]	; (8005798 <_vfiprintf_r+0x24c>)
 8005638:	f7fa fe0a 	bl	8000250 <memchr>
 800563c:	9a04      	ldr	r2, [sp, #16]
 800563e:	b9d8      	cbnz	r0, 8005678 <_vfiprintf_r+0x12c>
 8005640:	06d1      	lsls	r1, r2, #27
 8005642:	bf44      	itt	mi
 8005644:	2320      	movmi	r3, #32
 8005646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800564a:	0713      	lsls	r3, r2, #28
 800564c:	bf44      	itt	mi
 800564e:	232b      	movmi	r3, #43	; 0x2b
 8005650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005654:	f89a 3000 	ldrb.w	r3, [sl]
 8005658:	2b2a      	cmp	r3, #42	; 0x2a
 800565a:	d015      	beq.n	8005688 <_vfiprintf_r+0x13c>
 800565c:	9a07      	ldr	r2, [sp, #28]
 800565e:	4654      	mov	r4, sl
 8005660:	2000      	movs	r0, #0
 8005662:	f04f 0c0a 	mov.w	ip, #10
 8005666:	4621      	mov	r1, r4
 8005668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800566c:	3b30      	subs	r3, #48	; 0x30
 800566e:	2b09      	cmp	r3, #9
 8005670:	d94e      	bls.n	8005710 <_vfiprintf_r+0x1c4>
 8005672:	b1b0      	cbz	r0, 80056a2 <_vfiprintf_r+0x156>
 8005674:	9207      	str	r2, [sp, #28]
 8005676:	e014      	b.n	80056a2 <_vfiprintf_r+0x156>
 8005678:	eba0 0308 	sub.w	r3, r0, r8
 800567c:	fa09 f303 	lsl.w	r3, r9, r3
 8005680:	4313      	orrs	r3, r2
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	46a2      	mov	sl, r4
 8005686:	e7d2      	b.n	800562e <_vfiprintf_r+0xe2>
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	1d19      	adds	r1, r3, #4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	9103      	str	r1, [sp, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	bfbb      	ittet	lt
 8005694:	425b      	neglt	r3, r3
 8005696:	f042 0202 	orrlt.w	r2, r2, #2
 800569a:	9307      	strge	r3, [sp, #28]
 800569c:	9307      	strlt	r3, [sp, #28]
 800569e:	bfb8      	it	lt
 80056a0:	9204      	strlt	r2, [sp, #16]
 80056a2:	7823      	ldrb	r3, [r4, #0]
 80056a4:	2b2e      	cmp	r3, #46	; 0x2e
 80056a6:	d10c      	bne.n	80056c2 <_vfiprintf_r+0x176>
 80056a8:	7863      	ldrb	r3, [r4, #1]
 80056aa:	2b2a      	cmp	r3, #42	; 0x2a
 80056ac:	d135      	bne.n	800571a <_vfiprintf_r+0x1ce>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	9203      	str	r2, [sp, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bfb8      	it	lt
 80056ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056be:	3402      	adds	r4, #2
 80056c0:	9305      	str	r3, [sp, #20]
 80056c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057a8 <_vfiprintf_r+0x25c>
 80056c6:	7821      	ldrb	r1, [r4, #0]
 80056c8:	2203      	movs	r2, #3
 80056ca:	4650      	mov	r0, sl
 80056cc:	f7fa fdc0 	bl	8000250 <memchr>
 80056d0:	b140      	cbz	r0, 80056e4 <_vfiprintf_r+0x198>
 80056d2:	2340      	movs	r3, #64	; 0x40
 80056d4:	eba0 000a 	sub.w	r0, r0, sl
 80056d8:	fa03 f000 	lsl.w	r0, r3, r0
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	4303      	orrs	r3, r0
 80056e0:	3401      	adds	r4, #1
 80056e2:	9304      	str	r3, [sp, #16]
 80056e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e8:	482c      	ldr	r0, [pc, #176]	; (800579c <_vfiprintf_r+0x250>)
 80056ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056ee:	2206      	movs	r2, #6
 80056f0:	f7fa fdae 	bl	8000250 <memchr>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d03f      	beq.n	8005778 <_vfiprintf_r+0x22c>
 80056f8:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <_vfiprintf_r+0x254>)
 80056fa:	bb1b      	cbnz	r3, 8005744 <_vfiprintf_r+0x1f8>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	3307      	adds	r3, #7
 8005700:	f023 0307 	bic.w	r3, r3, #7
 8005704:	3308      	adds	r3, #8
 8005706:	9303      	str	r3, [sp, #12]
 8005708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800570a:	443b      	add	r3, r7
 800570c:	9309      	str	r3, [sp, #36]	; 0x24
 800570e:	e767      	b.n	80055e0 <_vfiprintf_r+0x94>
 8005710:	fb0c 3202 	mla	r2, ip, r2, r3
 8005714:	460c      	mov	r4, r1
 8005716:	2001      	movs	r0, #1
 8005718:	e7a5      	b.n	8005666 <_vfiprintf_r+0x11a>
 800571a:	2300      	movs	r3, #0
 800571c:	3401      	adds	r4, #1
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	4619      	mov	r1, r3
 8005722:	f04f 0c0a 	mov.w	ip, #10
 8005726:	4620      	mov	r0, r4
 8005728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800572c:	3a30      	subs	r2, #48	; 0x30
 800572e:	2a09      	cmp	r2, #9
 8005730:	d903      	bls.n	800573a <_vfiprintf_r+0x1ee>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0c5      	beq.n	80056c2 <_vfiprintf_r+0x176>
 8005736:	9105      	str	r1, [sp, #20]
 8005738:	e7c3      	b.n	80056c2 <_vfiprintf_r+0x176>
 800573a:	fb0c 2101 	mla	r1, ip, r1, r2
 800573e:	4604      	mov	r4, r0
 8005740:	2301      	movs	r3, #1
 8005742:	e7f0      	b.n	8005726 <_vfiprintf_r+0x1da>
 8005744:	ab03      	add	r3, sp, #12
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	462a      	mov	r2, r5
 800574a:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <_vfiprintf_r+0x258>)
 800574c:	a904      	add	r1, sp, #16
 800574e:	4630      	mov	r0, r6
 8005750:	f3af 8000 	nop.w
 8005754:	4607      	mov	r7, r0
 8005756:	1c78      	adds	r0, r7, #1
 8005758:	d1d6      	bne.n	8005708 <_vfiprintf_r+0x1bc>
 800575a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800575c:	07d9      	lsls	r1, r3, #31
 800575e:	d405      	bmi.n	800576c <_vfiprintf_r+0x220>
 8005760:	89ab      	ldrh	r3, [r5, #12]
 8005762:	059a      	lsls	r2, r3, #22
 8005764:	d402      	bmi.n	800576c <_vfiprintf_r+0x220>
 8005766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005768:	f000 fc45 	bl	8005ff6 <__retarget_lock_release_recursive>
 800576c:	89ab      	ldrh	r3, [r5, #12]
 800576e:	065b      	lsls	r3, r3, #25
 8005770:	f53f af12 	bmi.w	8005598 <_vfiprintf_r+0x4c>
 8005774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005776:	e711      	b.n	800559c <_vfiprintf_r+0x50>
 8005778:	ab03      	add	r3, sp, #12
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	462a      	mov	r2, r5
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <_vfiprintf_r+0x258>)
 8005780:	a904      	add	r1, sp, #16
 8005782:	4630      	mov	r0, r6
 8005784:	f000 f880 	bl	8005888 <_printf_i>
 8005788:	e7e4      	b.n	8005754 <_vfiprintf_r+0x208>
 800578a:	bf00      	nop
 800578c:	080064d0 	.word	0x080064d0
 8005790:	080064f0 	.word	0x080064f0
 8005794:	080064b0 	.word	0x080064b0
 8005798:	0800647c 	.word	0x0800647c
 800579c:	08006486 	.word	0x08006486
 80057a0:	00000000 	.word	0x00000000
 80057a4:	08005527 	.word	0x08005527
 80057a8:	08006482 	.word	0x08006482

080057ac <_printf_common>:
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	4616      	mov	r6, r2
 80057b2:	4699      	mov	r9, r3
 80057b4:	688a      	ldr	r2, [r1, #8]
 80057b6:	690b      	ldr	r3, [r1, #16]
 80057b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057bc:	4293      	cmp	r3, r2
 80057be:	bfb8      	it	lt
 80057c0:	4613      	movlt	r3, r2
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057c8:	4607      	mov	r7, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	b10a      	cbz	r2, 80057d2 <_printf_common+0x26>
 80057ce:	3301      	adds	r3, #1
 80057d0:	6033      	str	r3, [r6, #0]
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	0699      	lsls	r1, r3, #26
 80057d6:	bf42      	ittt	mi
 80057d8:	6833      	ldrmi	r3, [r6, #0]
 80057da:	3302      	addmi	r3, #2
 80057dc:	6033      	strmi	r3, [r6, #0]
 80057de:	6825      	ldr	r5, [r4, #0]
 80057e0:	f015 0506 	ands.w	r5, r5, #6
 80057e4:	d106      	bne.n	80057f4 <_printf_common+0x48>
 80057e6:	f104 0a19 	add.w	sl, r4, #25
 80057ea:	68e3      	ldr	r3, [r4, #12]
 80057ec:	6832      	ldr	r2, [r6, #0]
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	42ab      	cmp	r3, r5
 80057f2:	dc26      	bgt.n	8005842 <_printf_common+0x96>
 80057f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057f8:	1e13      	subs	r3, r2, #0
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	bf18      	it	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	0692      	lsls	r2, r2, #26
 8005802:	d42b      	bmi.n	800585c <_printf_common+0xb0>
 8005804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005808:	4649      	mov	r1, r9
 800580a:	4638      	mov	r0, r7
 800580c:	47c0      	blx	r8
 800580e:	3001      	adds	r0, #1
 8005810:	d01e      	beq.n	8005850 <_printf_common+0xa4>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	68e5      	ldr	r5, [r4, #12]
 8005816:	6832      	ldr	r2, [r6, #0]
 8005818:	f003 0306 	and.w	r3, r3, #6
 800581c:	2b04      	cmp	r3, #4
 800581e:	bf08      	it	eq
 8005820:	1aad      	subeq	r5, r5, r2
 8005822:	68a3      	ldr	r3, [r4, #8]
 8005824:	6922      	ldr	r2, [r4, #16]
 8005826:	bf0c      	ite	eq
 8005828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800582c:	2500      	movne	r5, #0
 800582e:	4293      	cmp	r3, r2
 8005830:	bfc4      	itt	gt
 8005832:	1a9b      	subgt	r3, r3, r2
 8005834:	18ed      	addgt	r5, r5, r3
 8005836:	2600      	movs	r6, #0
 8005838:	341a      	adds	r4, #26
 800583a:	42b5      	cmp	r5, r6
 800583c:	d11a      	bne.n	8005874 <_printf_common+0xc8>
 800583e:	2000      	movs	r0, #0
 8005840:	e008      	b.n	8005854 <_printf_common+0xa8>
 8005842:	2301      	movs	r3, #1
 8005844:	4652      	mov	r2, sl
 8005846:	4649      	mov	r1, r9
 8005848:	4638      	mov	r0, r7
 800584a:	47c0      	blx	r8
 800584c:	3001      	adds	r0, #1
 800584e:	d103      	bne.n	8005858 <_printf_common+0xac>
 8005850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	3501      	adds	r5, #1
 800585a:	e7c6      	b.n	80057ea <_printf_common+0x3e>
 800585c:	18e1      	adds	r1, r4, r3
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	2030      	movs	r0, #48	; 0x30
 8005862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005866:	4422      	add	r2, r4
 8005868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800586c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005870:	3302      	adds	r3, #2
 8005872:	e7c7      	b.n	8005804 <_printf_common+0x58>
 8005874:	2301      	movs	r3, #1
 8005876:	4622      	mov	r2, r4
 8005878:	4649      	mov	r1, r9
 800587a:	4638      	mov	r0, r7
 800587c:	47c0      	blx	r8
 800587e:	3001      	adds	r0, #1
 8005880:	d0e6      	beq.n	8005850 <_printf_common+0xa4>
 8005882:	3601      	adds	r6, #1
 8005884:	e7d9      	b.n	800583a <_printf_common+0x8e>
	...

08005888 <_printf_i>:
 8005888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	7e0f      	ldrb	r7, [r1, #24]
 800588e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005890:	2f78      	cmp	r7, #120	; 0x78
 8005892:	4691      	mov	r9, r2
 8005894:	4680      	mov	r8, r0
 8005896:	460c      	mov	r4, r1
 8005898:	469a      	mov	sl, r3
 800589a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800589e:	d807      	bhi.n	80058b0 <_printf_i+0x28>
 80058a0:	2f62      	cmp	r7, #98	; 0x62
 80058a2:	d80a      	bhi.n	80058ba <_printf_i+0x32>
 80058a4:	2f00      	cmp	r7, #0
 80058a6:	f000 80d8 	beq.w	8005a5a <_printf_i+0x1d2>
 80058aa:	2f58      	cmp	r7, #88	; 0x58
 80058ac:	f000 80a3 	beq.w	80059f6 <_printf_i+0x16e>
 80058b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058b8:	e03a      	b.n	8005930 <_printf_i+0xa8>
 80058ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058be:	2b15      	cmp	r3, #21
 80058c0:	d8f6      	bhi.n	80058b0 <_printf_i+0x28>
 80058c2:	a101      	add	r1, pc, #4	; (adr r1, 80058c8 <_printf_i+0x40>)
 80058c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058c8:	08005921 	.word	0x08005921
 80058cc:	08005935 	.word	0x08005935
 80058d0:	080058b1 	.word	0x080058b1
 80058d4:	080058b1 	.word	0x080058b1
 80058d8:	080058b1 	.word	0x080058b1
 80058dc:	080058b1 	.word	0x080058b1
 80058e0:	08005935 	.word	0x08005935
 80058e4:	080058b1 	.word	0x080058b1
 80058e8:	080058b1 	.word	0x080058b1
 80058ec:	080058b1 	.word	0x080058b1
 80058f0:	080058b1 	.word	0x080058b1
 80058f4:	08005a41 	.word	0x08005a41
 80058f8:	08005965 	.word	0x08005965
 80058fc:	08005a23 	.word	0x08005a23
 8005900:	080058b1 	.word	0x080058b1
 8005904:	080058b1 	.word	0x080058b1
 8005908:	08005a63 	.word	0x08005a63
 800590c:	080058b1 	.word	0x080058b1
 8005910:	08005965 	.word	0x08005965
 8005914:	080058b1 	.word	0x080058b1
 8005918:	080058b1 	.word	0x080058b1
 800591c:	08005a2b 	.word	0x08005a2b
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	602a      	str	r2, [r5, #0]
 8005928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800592c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005930:	2301      	movs	r3, #1
 8005932:	e0a3      	b.n	8005a7c <_printf_i+0x1f4>
 8005934:	6820      	ldr	r0, [r4, #0]
 8005936:	6829      	ldr	r1, [r5, #0]
 8005938:	0606      	lsls	r6, r0, #24
 800593a:	f101 0304 	add.w	r3, r1, #4
 800593e:	d50a      	bpl.n	8005956 <_printf_i+0xce>
 8005940:	680e      	ldr	r6, [r1, #0]
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	2e00      	cmp	r6, #0
 8005946:	da03      	bge.n	8005950 <_printf_i+0xc8>
 8005948:	232d      	movs	r3, #45	; 0x2d
 800594a:	4276      	negs	r6, r6
 800594c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005950:	485e      	ldr	r0, [pc, #376]	; (8005acc <_printf_i+0x244>)
 8005952:	230a      	movs	r3, #10
 8005954:	e019      	b.n	800598a <_printf_i+0x102>
 8005956:	680e      	ldr	r6, [r1, #0]
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800595e:	bf18      	it	ne
 8005960:	b236      	sxthne	r6, r6
 8005962:	e7ef      	b.n	8005944 <_printf_i+0xbc>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	1d19      	adds	r1, r3, #4
 800596a:	6029      	str	r1, [r5, #0]
 800596c:	0601      	lsls	r1, r0, #24
 800596e:	d501      	bpl.n	8005974 <_printf_i+0xec>
 8005970:	681e      	ldr	r6, [r3, #0]
 8005972:	e002      	b.n	800597a <_printf_i+0xf2>
 8005974:	0646      	lsls	r6, r0, #25
 8005976:	d5fb      	bpl.n	8005970 <_printf_i+0xe8>
 8005978:	881e      	ldrh	r6, [r3, #0]
 800597a:	4854      	ldr	r0, [pc, #336]	; (8005acc <_printf_i+0x244>)
 800597c:	2f6f      	cmp	r7, #111	; 0x6f
 800597e:	bf0c      	ite	eq
 8005980:	2308      	moveq	r3, #8
 8005982:	230a      	movne	r3, #10
 8005984:	2100      	movs	r1, #0
 8005986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800598a:	6865      	ldr	r5, [r4, #4]
 800598c:	60a5      	str	r5, [r4, #8]
 800598e:	2d00      	cmp	r5, #0
 8005990:	bfa2      	ittt	ge
 8005992:	6821      	ldrge	r1, [r4, #0]
 8005994:	f021 0104 	bicge.w	r1, r1, #4
 8005998:	6021      	strge	r1, [r4, #0]
 800599a:	b90e      	cbnz	r6, 80059a0 <_printf_i+0x118>
 800599c:	2d00      	cmp	r5, #0
 800599e:	d04d      	beq.n	8005a3c <_printf_i+0x1b4>
 80059a0:	4615      	mov	r5, r2
 80059a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059a6:	fb03 6711 	mls	r7, r3, r1, r6
 80059aa:	5dc7      	ldrb	r7, [r0, r7]
 80059ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059b0:	4637      	mov	r7, r6
 80059b2:	42bb      	cmp	r3, r7
 80059b4:	460e      	mov	r6, r1
 80059b6:	d9f4      	bls.n	80059a2 <_printf_i+0x11a>
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d10b      	bne.n	80059d4 <_printf_i+0x14c>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	07de      	lsls	r6, r3, #31
 80059c0:	d508      	bpl.n	80059d4 <_printf_i+0x14c>
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	6861      	ldr	r1, [r4, #4]
 80059c6:	4299      	cmp	r1, r3
 80059c8:	bfde      	ittt	le
 80059ca:	2330      	movle	r3, #48	; 0x30
 80059cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059d4:	1b52      	subs	r2, r2, r5
 80059d6:	6122      	str	r2, [r4, #16]
 80059d8:	f8cd a000 	str.w	sl, [sp]
 80059dc:	464b      	mov	r3, r9
 80059de:	aa03      	add	r2, sp, #12
 80059e0:	4621      	mov	r1, r4
 80059e2:	4640      	mov	r0, r8
 80059e4:	f7ff fee2 	bl	80057ac <_printf_common>
 80059e8:	3001      	adds	r0, #1
 80059ea:	d14c      	bne.n	8005a86 <_printf_i+0x1fe>
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f0:	b004      	add	sp, #16
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	4835      	ldr	r0, [pc, #212]	; (8005acc <_printf_i+0x244>)
 80059f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059fc:	6829      	ldr	r1, [r5, #0]
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a04:	6029      	str	r1, [r5, #0]
 8005a06:	061d      	lsls	r5, r3, #24
 8005a08:	d514      	bpl.n	8005a34 <_printf_i+0x1ac>
 8005a0a:	07df      	lsls	r7, r3, #31
 8005a0c:	bf44      	itt	mi
 8005a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a12:	6023      	strmi	r3, [r4, #0]
 8005a14:	b91e      	cbnz	r6, 8005a1e <_printf_i+0x196>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f023 0320 	bic.w	r3, r3, #32
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	2310      	movs	r3, #16
 8005a20:	e7b0      	b.n	8005984 <_printf_i+0xfc>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	f043 0320 	orr.w	r3, r3, #32
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	2378      	movs	r3, #120	; 0x78
 8005a2c:	4828      	ldr	r0, [pc, #160]	; (8005ad0 <_printf_i+0x248>)
 8005a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a32:	e7e3      	b.n	80059fc <_printf_i+0x174>
 8005a34:	0659      	lsls	r1, r3, #25
 8005a36:	bf48      	it	mi
 8005a38:	b2b6      	uxthmi	r6, r6
 8005a3a:	e7e6      	b.n	8005a0a <_printf_i+0x182>
 8005a3c:	4615      	mov	r5, r2
 8005a3e:	e7bb      	b.n	80059b8 <_printf_i+0x130>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	6826      	ldr	r6, [r4, #0]
 8005a44:	6961      	ldr	r1, [r4, #20]
 8005a46:	1d18      	adds	r0, r3, #4
 8005a48:	6028      	str	r0, [r5, #0]
 8005a4a:	0635      	lsls	r5, r6, #24
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	d501      	bpl.n	8005a54 <_printf_i+0x1cc>
 8005a50:	6019      	str	r1, [r3, #0]
 8005a52:	e002      	b.n	8005a5a <_printf_i+0x1d2>
 8005a54:	0670      	lsls	r0, r6, #25
 8005a56:	d5fb      	bpl.n	8005a50 <_printf_i+0x1c8>
 8005a58:	8019      	strh	r1, [r3, #0]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	4615      	mov	r5, r2
 8005a60:	e7ba      	b.n	80059d8 <_printf_i+0x150>
 8005a62:	682b      	ldr	r3, [r5, #0]
 8005a64:	1d1a      	adds	r2, r3, #4
 8005a66:	602a      	str	r2, [r5, #0]
 8005a68:	681d      	ldr	r5, [r3, #0]
 8005a6a:	6862      	ldr	r2, [r4, #4]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f7fa fbee 	bl	8000250 <memchr>
 8005a74:	b108      	cbz	r0, 8005a7a <_printf_i+0x1f2>
 8005a76:	1b40      	subs	r0, r0, r5
 8005a78:	6060      	str	r0, [r4, #4]
 8005a7a:	6863      	ldr	r3, [r4, #4]
 8005a7c:	6123      	str	r3, [r4, #16]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a84:	e7a8      	b.n	80059d8 <_printf_i+0x150>
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	47d0      	blx	sl
 8005a90:	3001      	adds	r0, #1
 8005a92:	d0ab      	beq.n	80059ec <_printf_i+0x164>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	079b      	lsls	r3, r3, #30
 8005a98:	d413      	bmi.n	8005ac2 <_printf_i+0x23a>
 8005a9a:	68e0      	ldr	r0, [r4, #12]
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	4298      	cmp	r0, r3
 8005aa0:	bfb8      	it	lt
 8005aa2:	4618      	movlt	r0, r3
 8005aa4:	e7a4      	b.n	80059f0 <_printf_i+0x168>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	4649      	mov	r1, r9
 8005aac:	4640      	mov	r0, r8
 8005aae:	47d0      	blx	sl
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d09b      	beq.n	80059ec <_printf_i+0x164>
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	9903      	ldr	r1, [sp, #12]
 8005aba:	1a5b      	subs	r3, r3, r1
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dcf2      	bgt.n	8005aa6 <_printf_i+0x21e>
 8005ac0:	e7eb      	b.n	8005a9a <_printf_i+0x212>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	f104 0619 	add.w	r6, r4, #25
 8005ac8:	e7f5      	b.n	8005ab6 <_printf_i+0x22e>
 8005aca:	bf00      	nop
 8005acc:	0800648d 	.word	0x0800648d
 8005ad0:	0800649e 	.word	0x0800649e

08005ad4 <_sbrk_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d06      	ldr	r5, [pc, #24]	; (8005af0 <_sbrk_r+0x1c>)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	f7fb f874 	bl	8000bcc <_sbrk>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_sbrk_r+0x1a>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_sbrk_r+0x1a>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	2000025c 	.word	0x2000025c

08005af4 <__swbuf_r>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	460e      	mov	r6, r1
 8005af8:	4614      	mov	r4, r2
 8005afa:	4605      	mov	r5, r0
 8005afc:	b118      	cbz	r0, 8005b06 <__swbuf_r+0x12>
 8005afe:	6983      	ldr	r3, [r0, #24]
 8005b00:	b90b      	cbnz	r3, 8005b06 <__swbuf_r+0x12>
 8005b02:	f000 f9d9 	bl	8005eb8 <__sinit>
 8005b06:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <__swbuf_r+0x98>)
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	d12b      	bne.n	8005b64 <__swbuf_r+0x70>
 8005b0c:	686c      	ldr	r4, [r5, #4]
 8005b0e:	69a3      	ldr	r3, [r4, #24]
 8005b10:	60a3      	str	r3, [r4, #8]
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	071a      	lsls	r2, r3, #28
 8005b16:	d52f      	bpl.n	8005b78 <__swbuf_r+0x84>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	b36b      	cbz	r3, 8005b78 <__swbuf_r+0x84>
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	6820      	ldr	r0, [r4, #0]
 8005b20:	1ac0      	subs	r0, r0, r3
 8005b22:	6963      	ldr	r3, [r4, #20]
 8005b24:	b2f6      	uxtb	r6, r6
 8005b26:	4283      	cmp	r3, r0
 8005b28:	4637      	mov	r7, r6
 8005b2a:	dc04      	bgt.n	8005b36 <__swbuf_r+0x42>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 f92e 	bl	8005d90 <_fflush_r>
 8005b34:	bb30      	cbnz	r0, 8005b84 <__swbuf_r+0x90>
 8005b36:	68a3      	ldr	r3, [r4, #8]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	60a3      	str	r3, [r4, #8]
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	6022      	str	r2, [r4, #0]
 8005b42:	701e      	strb	r6, [r3, #0]
 8005b44:	6963      	ldr	r3, [r4, #20]
 8005b46:	3001      	adds	r0, #1
 8005b48:	4283      	cmp	r3, r0
 8005b4a:	d004      	beq.n	8005b56 <__swbuf_r+0x62>
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	07db      	lsls	r3, r3, #31
 8005b50:	d506      	bpl.n	8005b60 <__swbuf_r+0x6c>
 8005b52:	2e0a      	cmp	r6, #10
 8005b54:	d104      	bne.n	8005b60 <__swbuf_r+0x6c>
 8005b56:	4621      	mov	r1, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 f919 	bl	8005d90 <_fflush_r>
 8005b5e:	b988      	cbnz	r0, 8005b84 <__swbuf_r+0x90>
 8005b60:	4638      	mov	r0, r7
 8005b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <__swbuf_r+0x9c>)
 8005b66:	429c      	cmp	r4, r3
 8005b68:	d101      	bne.n	8005b6e <__swbuf_r+0x7a>
 8005b6a:	68ac      	ldr	r4, [r5, #8]
 8005b6c:	e7cf      	b.n	8005b0e <__swbuf_r+0x1a>
 8005b6e:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <__swbuf_r+0xa0>)
 8005b70:	429c      	cmp	r4, r3
 8005b72:	bf08      	it	eq
 8005b74:	68ec      	ldreq	r4, [r5, #12]
 8005b76:	e7ca      	b.n	8005b0e <__swbuf_r+0x1a>
 8005b78:	4621      	mov	r1, r4
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 f80c 	bl	8005b98 <__swsetup_r>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d0cb      	beq.n	8005b1c <__swbuf_r+0x28>
 8005b84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b88:	e7ea      	b.n	8005b60 <__swbuf_r+0x6c>
 8005b8a:	bf00      	nop
 8005b8c:	080064d0 	.word	0x080064d0
 8005b90:	080064f0 	.word	0x080064f0
 8005b94:	080064b0 	.word	0x080064b0

08005b98 <__swsetup_r>:
 8005b98:	4b32      	ldr	r3, [pc, #200]	; (8005c64 <__swsetup_r+0xcc>)
 8005b9a:	b570      	push	{r4, r5, r6, lr}
 8005b9c:	681d      	ldr	r5, [r3, #0]
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	b125      	cbz	r5, 8005bae <__swsetup_r+0x16>
 8005ba4:	69ab      	ldr	r3, [r5, #24]
 8005ba6:	b913      	cbnz	r3, 8005bae <__swsetup_r+0x16>
 8005ba8:	4628      	mov	r0, r5
 8005baa:	f000 f985 	bl	8005eb8 <__sinit>
 8005bae:	4b2e      	ldr	r3, [pc, #184]	; (8005c68 <__swsetup_r+0xd0>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	d10f      	bne.n	8005bd4 <__swsetup_r+0x3c>
 8005bb4:	686c      	ldr	r4, [r5, #4]
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bbc:	0719      	lsls	r1, r3, #28
 8005bbe:	d42c      	bmi.n	8005c1a <__swsetup_r+0x82>
 8005bc0:	06dd      	lsls	r5, r3, #27
 8005bc2:	d411      	bmi.n	8005be8 <__swsetup_r+0x50>
 8005bc4:	2309      	movs	r3, #9
 8005bc6:	6033      	str	r3, [r6, #0]
 8005bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd2:	e03e      	b.n	8005c52 <__swsetup_r+0xba>
 8005bd4:	4b25      	ldr	r3, [pc, #148]	; (8005c6c <__swsetup_r+0xd4>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d101      	bne.n	8005bde <__swsetup_r+0x46>
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	e7eb      	b.n	8005bb6 <__swsetup_r+0x1e>
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <__swsetup_r+0xd8>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf08      	it	eq
 8005be4:	68ec      	ldreq	r4, [r5, #12]
 8005be6:	e7e6      	b.n	8005bb6 <__swsetup_r+0x1e>
 8005be8:	0758      	lsls	r0, r3, #29
 8005bea:	d512      	bpl.n	8005c12 <__swsetup_r+0x7a>
 8005bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bee:	b141      	cbz	r1, 8005c02 <__swsetup_r+0x6a>
 8005bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	d002      	beq.n	8005bfe <__swsetup_r+0x66>
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f7ff fb9d 	bl	8005338 <_free_r>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6363      	str	r3, [r4, #52]	; 0x34
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6063      	str	r3, [r4, #4]
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	f043 0308 	orr.w	r3, r3, #8
 8005c18:	81a3      	strh	r3, [r4, #12]
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	b94b      	cbnz	r3, 8005c32 <__swsetup_r+0x9a>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c28:	d003      	beq.n	8005c32 <__swsetup_r+0x9a>
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f000 fa09 	bl	8006044 <__smakebuf_r>
 8005c32:	89a0      	ldrh	r0, [r4, #12]
 8005c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c38:	f010 0301 	ands.w	r3, r0, #1
 8005c3c:	d00a      	beq.n	8005c54 <__swsetup_r+0xbc>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60a3      	str	r3, [r4, #8]
 8005c42:	6963      	ldr	r3, [r4, #20]
 8005c44:	425b      	negs	r3, r3
 8005c46:	61a3      	str	r3, [r4, #24]
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	b943      	cbnz	r3, 8005c5e <__swsetup_r+0xc6>
 8005c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c50:	d1ba      	bne.n	8005bc8 <__swsetup_r+0x30>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	0781      	lsls	r1, r0, #30
 8005c56:	bf58      	it	pl
 8005c58:	6963      	ldrpl	r3, [r4, #20]
 8005c5a:	60a3      	str	r3, [r4, #8]
 8005c5c:	e7f4      	b.n	8005c48 <__swsetup_r+0xb0>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e7f7      	b.n	8005c52 <__swsetup_r+0xba>
 8005c62:	bf00      	nop
 8005c64:	200000a4 	.word	0x200000a4
 8005c68:	080064d0 	.word	0x080064d0
 8005c6c:	080064f0 	.word	0x080064f0
 8005c70:	080064b0 	.word	0x080064b0

08005c74 <abort>:
 8005c74:	b508      	push	{r3, lr}
 8005c76:	2006      	movs	r0, #6
 8005c78:	f000 fa58 	bl	800612c <raise>
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7fa ff2d 	bl	8000adc <_exit>
	...

08005c84 <__sflush_r>:
 8005c84:	898a      	ldrh	r2, [r1, #12]
 8005c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	0710      	lsls	r0, r2, #28
 8005c8e:	460c      	mov	r4, r1
 8005c90:	d458      	bmi.n	8005d44 <__sflush_r+0xc0>
 8005c92:	684b      	ldr	r3, [r1, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dc05      	bgt.n	8005ca4 <__sflush_r+0x20>
 8005c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dc02      	bgt.n	8005ca4 <__sflush_r+0x20>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d0f9      	beq.n	8005c9e <__sflush_r+0x1a>
 8005caa:	2300      	movs	r3, #0
 8005cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cb0:	682f      	ldr	r7, [r5, #0]
 8005cb2:	602b      	str	r3, [r5, #0]
 8005cb4:	d032      	beq.n	8005d1c <__sflush_r+0x98>
 8005cb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	075a      	lsls	r2, r3, #29
 8005cbc:	d505      	bpl.n	8005cca <__sflush_r+0x46>
 8005cbe:	6863      	ldr	r3, [r4, #4]
 8005cc0:	1ac0      	subs	r0, r0, r3
 8005cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cc4:	b10b      	cbz	r3, 8005cca <__sflush_r+0x46>
 8005cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cc8:	1ac0      	subs	r0, r0, r3
 8005cca:	2300      	movs	r3, #0
 8005ccc:	4602      	mov	r2, r0
 8005cce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cd0:	6a21      	ldr	r1, [r4, #32]
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b0      	blx	r6
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	d106      	bne.n	8005cea <__sflush_r+0x66>
 8005cdc:	6829      	ldr	r1, [r5, #0]
 8005cde:	291d      	cmp	r1, #29
 8005ce0:	d82c      	bhi.n	8005d3c <__sflush_r+0xb8>
 8005ce2:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <__sflush_r+0x108>)
 8005ce4:	40ca      	lsrs	r2, r1
 8005ce6:	07d6      	lsls	r6, r2, #31
 8005ce8:	d528      	bpl.n	8005d3c <__sflush_r+0xb8>
 8005cea:	2200      	movs	r2, #0
 8005cec:	6062      	str	r2, [r4, #4]
 8005cee:	04d9      	lsls	r1, r3, #19
 8005cf0:	6922      	ldr	r2, [r4, #16]
 8005cf2:	6022      	str	r2, [r4, #0]
 8005cf4:	d504      	bpl.n	8005d00 <__sflush_r+0x7c>
 8005cf6:	1c42      	adds	r2, r0, #1
 8005cf8:	d101      	bne.n	8005cfe <__sflush_r+0x7a>
 8005cfa:	682b      	ldr	r3, [r5, #0]
 8005cfc:	b903      	cbnz	r3, 8005d00 <__sflush_r+0x7c>
 8005cfe:	6560      	str	r0, [r4, #84]	; 0x54
 8005d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d02:	602f      	str	r7, [r5, #0]
 8005d04:	2900      	cmp	r1, #0
 8005d06:	d0ca      	beq.n	8005c9e <__sflush_r+0x1a>
 8005d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d0c:	4299      	cmp	r1, r3
 8005d0e:	d002      	beq.n	8005d16 <__sflush_r+0x92>
 8005d10:	4628      	mov	r0, r5
 8005d12:	f7ff fb11 	bl	8005338 <_free_r>
 8005d16:	2000      	movs	r0, #0
 8005d18:	6360      	str	r0, [r4, #52]	; 0x34
 8005d1a:	e7c1      	b.n	8005ca0 <__sflush_r+0x1c>
 8005d1c:	6a21      	ldr	r1, [r4, #32]
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4628      	mov	r0, r5
 8005d22:	47b0      	blx	r6
 8005d24:	1c41      	adds	r1, r0, #1
 8005d26:	d1c7      	bne.n	8005cb8 <__sflush_r+0x34>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0c4      	beq.n	8005cb8 <__sflush_r+0x34>
 8005d2e:	2b1d      	cmp	r3, #29
 8005d30:	d001      	beq.n	8005d36 <__sflush_r+0xb2>
 8005d32:	2b16      	cmp	r3, #22
 8005d34:	d101      	bne.n	8005d3a <__sflush_r+0xb6>
 8005d36:	602f      	str	r7, [r5, #0]
 8005d38:	e7b1      	b.n	8005c9e <__sflush_r+0x1a>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	e7ad      	b.n	8005ca0 <__sflush_r+0x1c>
 8005d44:	690f      	ldr	r7, [r1, #16]
 8005d46:	2f00      	cmp	r7, #0
 8005d48:	d0a9      	beq.n	8005c9e <__sflush_r+0x1a>
 8005d4a:	0793      	lsls	r3, r2, #30
 8005d4c:	680e      	ldr	r6, [r1, #0]
 8005d4e:	bf08      	it	eq
 8005d50:	694b      	ldreq	r3, [r1, #20]
 8005d52:	600f      	str	r7, [r1, #0]
 8005d54:	bf18      	it	ne
 8005d56:	2300      	movne	r3, #0
 8005d58:	eba6 0807 	sub.w	r8, r6, r7
 8005d5c:	608b      	str	r3, [r1, #8]
 8005d5e:	f1b8 0f00 	cmp.w	r8, #0
 8005d62:	dd9c      	ble.n	8005c9e <__sflush_r+0x1a>
 8005d64:	6a21      	ldr	r1, [r4, #32]
 8005d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d68:	4643      	mov	r3, r8
 8005d6a:	463a      	mov	r2, r7
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b0      	blx	r6
 8005d70:	2800      	cmp	r0, #0
 8005d72:	dc06      	bgt.n	8005d82 <__sflush_r+0xfe>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d80:	e78e      	b.n	8005ca0 <__sflush_r+0x1c>
 8005d82:	4407      	add	r7, r0
 8005d84:	eba8 0800 	sub.w	r8, r8, r0
 8005d88:	e7e9      	b.n	8005d5e <__sflush_r+0xda>
 8005d8a:	bf00      	nop
 8005d8c:	20400001 	.word	0x20400001

08005d90 <_fflush_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	690b      	ldr	r3, [r1, #16]
 8005d94:	4605      	mov	r5, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	b913      	cbnz	r3, 8005da0 <_fflush_r+0x10>
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	b118      	cbz	r0, 8005daa <_fflush_r+0x1a>
 8005da2:	6983      	ldr	r3, [r0, #24]
 8005da4:	b90b      	cbnz	r3, 8005daa <_fflush_r+0x1a>
 8005da6:	f000 f887 	bl	8005eb8 <__sinit>
 8005daa:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <_fflush_r+0x6c>)
 8005dac:	429c      	cmp	r4, r3
 8005dae:	d11b      	bne.n	8005de8 <_fflush_r+0x58>
 8005db0:	686c      	ldr	r4, [r5, #4]
 8005db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0ef      	beq.n	8005d9a <_fflush_r+0xa>
 8005dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dbc:	07d0      	lsls	r0, r2, #31
 8005dbe:	d404      	bmi.n	8005dca <_fflush_r+0x3a>
 8005dc0:	0599      	lsls	r1, r3, #22
 8005dc2:	d402      	bmi.n	8005dca <_fflush_r+0x3a>
 8005dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dc6:	f000 f915 	bl	8005ff4 <__retarget_lock_acquire_recursive>
 8005dca:	4628      	mov	r0, r5
 8005dcc:	4621      	mov	r1, r4
 8005dce:	f7ff ff59 	bl	8005c84 <__sflush_r>
 8005dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd4:	07da      	lsls	r2, r3, #31
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	d4e0      	bmi.n	8005d9c <_fflush_r+0xc>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	059b      	lsls	r3, r3, #22
 8005dde:	d4dd      	bmi.n	8005d9c <_fflush_r+0xc>
 8005de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de2:	f000 f908 	bl	8005ff6 <__retarget_lock_release_recursive>
 8005de6:	e7d9      	b.n	8005d9c <_fflush_r+0xc>
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <_fflush_r+0x70>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d101      	bne.n	8005df2 <_fflush_r+0x62>
 8005dee:	68ac      	ldr	r4, [r5, #8]
 8005df0:	e7df      	b.n	8005db2 <_fflush_r+0x22>
 8005df2:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <_fflush_r+0x74>)
 8005df4:	429c      	cmp	r4, r3
 8005df6:	bf08      	it	eq
 8005df8:	68ec      	ldreq	r4, [r5, #12]
 8005dfa:	e7da      	b.n	8005db2 <_fflush_r+0x22>
 8005dfc:	080064d0 	.word	0x080064d0
 8005e00:	080064f0 	.word	0x080064f0
 8005e04:	080064b0 	.word	0x080064b0

08005e08 <std>:
 8005e08:	2300      	movs	r3, #0
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e16:	6083      	str	r3, [r0, #8]
 8005e18:	8181      	strh	r1, [r0, #12]
 8005e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e1c:	81c2      	strh	r2, [r0, #14]
 8005e1e:	6183      	str	r3, [r0, #24]
 8005e20:	4619      	mov	r1, r3
 8005e22:	2208      	movs	r2, #8
 8005e24:	305c      	adds	r0, #92	; 0x5c
 8005e26:	f7ff f9eb 	bl	8005200 <memset>
 8005e2a:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <std+0x38>)
 8005e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <std+0x3c>)
 8005e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <std+0x40>)
 8005e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e36:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <std+0x44>)
 8005e38:	6224      	str	r4, [r4, #32]
 8005e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e3c:	bd10      	pop	{r4, pc}
 8005e3e:	bf00      	nop
 8005e40:	08006165 	.word	0x08006165
 8005e44:	08006187 	.word	0x08006187
 8005e48:	080061bf 	.word	0x080061bf
 8005e4c:	080061e3 	.word	0x080061e3

08005e50 <_cleanup_r>:
 8005e50:	4901      	ldr	r1, [pc, #4]	; (8005e58 <_cleanup_r+0x8>)
 8005e52:	f000 b8af 	b.w	8005fb4 <_fwalk_reent>
 8005e56:	bf00      	nop
 8005e58:	08005d91 	.word	0x08005d91

08005e5c <__sfmoreglue>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	2268      	movs	r2, #104	; 0x68
 8005e60:	1e4d      	subs	r5, r1, #1
 8005e62:	4355      	muls	r5, r2
 8005e64:	460e      	mov	r6, r1
 8005e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e6a:	f7ff fad1 	bl	8005410 <_malloc_r>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	b140      	cbz	r0, 8005e84 <__sfmoreglue+0x28>
 8005e72:	2100      	movs	r1, #0
 8005e74:	e9c0 1600 	strd	r1, r6, [r0]
 8005e78:	300c      	adds	r0, #12
 8005e7a:	60a0      	str	r0, [r4, #8]
 8005e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e80:	f7ff f9be 	bl	8005200 <memset>
 8005e84:	4620      	mov	r0, r4
 8005e86:	bd70      	pop	{r4, r5, r6, pc}

08005e88 <__sfp_lock_acquire>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__sfp_lock_acquire+0x8>)
 8005e8a:	f000 b8b3 	b.w	8005ff4 <__retarget_lock_acquire_recursive>
 8005e8e:	bf00      	nop
 8005e90:	20000259 	.word	0x20000259

08005e94 <__sfp_lock_release>:
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <__sfp_lock_release+0x8>)
 8005e96:	f000 b8ae 	b.w	8005ff6 <__retarget_lock_release_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	20000259 	.word	0x20000259

08005ea0 <__sinit_lock_acquire>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	; (8005ea8 <__sinit_lock_acquire+0x8>)
 8005ea2:	f000 b8a7 	b.w	8005ff4 <__retarget_lock_acquire_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	2000025a 	.word	0x2000025a

08005eac <__sinit_lock_release>:
 8005eac:	4801      	ldr	r0, [pc, #4]	; (8005eb4 <__sinit_lock_release+0x8>)
 8005eae:	f000 b8a2 	b.w	8005ff6 <__retarget_lock_release_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	2000025a 	.word	0x2000025a

08005eb8 <__sinit>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	4604      	mov	r4, r0
 8005ebc:	f7ff fff0 	bl	8005ea0 <__sinit_lock_acquire>
 8005ec0:	69a3      	ldr	r3, [r4, #24]
 8005ec2:	b11b      	cbz	r3, 8005ecc <__sinit+0x14>
 8005ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec8:	f7ff bff0 	b.w	8005eac <__sinit_lock_release>
 8005ecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ed0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ed2:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <__sinit+0x68>)
 8005ed4:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <__sinit+0x6c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005eda:	42a3      	cmp	r3, r4
 8005edc:	bf04      	itt	eq
 8005ede:	2301      	moveq	r3, #1
 8005ee0:	61a3      	streq	r3, [r4, #24]
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f820 	bl	8005f28 <__sfp>
 8005ee8:	6060      	str	r0, [r4, #4]
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 f81c 	bl	8005f28 <__sfp>
 8005ef0:	60a0      	str	r0, [r4, #8]
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f818 	bl	8005f28 <__sfp>
 8005ef8:	2200      	movs	r2, #0
 8005efa:	60e0      	str	r0, [r4, #12]
 8005efc:	2104      	movs	r1, #4
 8005efe:	6860      	ldr	r0, [r4, #4]
 8005f00:	f7ff ff82 	bl	8005e08 <std>
 8005f04:	68a0      	ldr	r0, [r4, #8]
 8005f06:	2201      	movs	r2, #1
 8005f08:	2109      	movs	r1, #9
 8005f0a:	f7ff ff7d 	bl	8005e08 <std>
 8005f0e:	68e0      	ldr	r0, [r4, #12]
 8005f10:	2202      	movs	r2, #2
 8005f12:	2112      	movs	r1, #18
 8005f14:	f7ff ff78 	bl	8005e08 <std>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	61a3      	str	r3, [r4, #24]
 8005f1c:	e7d2      	b.n	8005ec4 <__sinit+0xc>
 8005f1e:	bf00      	nop
 8005f20:	080063c8 	.word	0x080063c8
 8005f24:	08005e51 	.word	0x08005e51

08005f28 <__sfp>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	4607      	mov	r7, r0
 8005f2c:	f7ff ffac 	bl	8005e88 <__sfp_lock_acquire>
 8005f30:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <__sfp+0x84>)
 8005f32:	681e      	ldr	r6, [r3, #0]
 8005f34:	69b3      	ldr	r3, [r6, #24]
 8005f36:	b913      	cbnz	r3, 8005f3e <__sfp+0x16>
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f7ff ffbd 	bl	8005eb8 <__sinit>
 8005f3e:	3648      	adds	r6, #72	; 0x48
 8005f40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	d503      	bpl.n	8005f50 <__sfp+0x28>
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	b30b      	cbz	r3, 8005f90 <__sfp+0x68>
 8005f4c:	6836      	ldr	r6, [r6, #0]
 8005f4e:	e7f7      	b.n	8005f40 <__sfp+0x18>
 8005f50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f54:	b9d5      	cbnz	r5, 8005f8c <__sfp+0x64>
 8005f56:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <__sfp+0x88>)
 8005f58:	60e3      	str	r3, [r4, #12]
 8005f5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f5e:	6665      	str	r5, [r4, #100]	; 0x64
 8005f60:	f000 f847 	bl	8005ff2 <__retarget_lock_init_recursive>
 8005f64:	f7ff ff96 	bl	8005e94 <__sfp_lock_release>
 8005f68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	61a5      	str	r5, [r4, #24]
 8005f74:	2208      	movs	r2, #8
 8005f76:	4629      	mov	r1, r5
 8005f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f7c:	f7ff f940 	bl	8005200 <memset>
 8005f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f88:	4620      	mov	r0, r4
 8005f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f8c:	3468      	adds	r4, #104	; 0x68
 8005f8e:	e7d9      	b.n	8005f44 <__sfp+0x1c>
 8005f90:	2104      	movs	r1, #4
 8005f92:	4638      	mov	r0, r7
 8005f94:	f7ff ff62 	bl	8005e5c <__sfmoreglue>
 8005f98:	4604      	mov	r4, r0
 8005f9a:	6030      	str	r0, [r6, #0]
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d1d5      	bne.n	8005f4c <__sfp+0x24>
 8005fa0:	f7ff ff78 	bl	8005e94 <__sfp_lock_release>
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	e7ee      	b.n	8005f88 <__sfp+0x60>
 8005faa:	bf00      	nop
 8005fac:	080063c8 	.word	0x080063c8
 8005fb0:	ffff0001 	.word	0xffff0001

08005fb4 <_fwalk_reent>:
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	4606      	mov	r6, r0
 8005fba:	4688      	mov	r8, r1
 8005fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fc0:	2700      	movs	r7, #0
 8005fc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fc6:	f1b9 0901 	subs.w	r9, r9, #1
 8005fca:	d505      	bpl.n	8005fd8 <_fwalk_reent+0x24>
 8005fcc:	6824      	ldr	r4, [r4, #0]
 8005fce:	2c00      	cmp	r4, #0
 8005fd0:	d1f7      	bne.n	8005fc2 <_fwalk_reent+0xe>
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd8:	89ab      	ldrh	r3, [r5, #12]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d907      	bls.n	8005fee <_fwalk_reent+0x3a>
 8005fde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	d003      	beq.n	8005fee <_fwalk_reent+0x3a>
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4630      	mov	r0, r6
 8005fea:	47c0      	blx	r8
 8005fec:	4307      	orrs	r7, r0
 8005fee:	3568      	adds	r5, #104	; 0x68
 8005ff0:	e7e9      	b.n	8005fc6 <_fwalk_reent+0x12>

08005ff2 <__retarget_lock_init_recursive>:
 8005ff2:	4770      	bx	lr

08005ff4 <__retarget_lock_acquire_recursive>:
 8005ff4:	4770      	bx	lr

08005ff6 <__retarget_lock_release_recursive>:
 8005ff6:	4770      	bx	lr

08005ff8 <__swhatbuf_r>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	460e      	mov	r6, r1
 8005ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006000:	2900      	cmp	r1, #0
 8006002:	b096      	sub	sp, #88	; 0x58
 8006004:	4614      	mov	r4, r2
 8006006:	461d      	mov	r5, r3
 8006008:	da08      	bge.n	800601c <__swhatbuf_r+0x24>
 800600a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	602a      	str	r2, [r5, #0]
 8006012:	061a      	lsls	r2, r3, #24
 8006014:	d410      	bmi.n	8006038 <__swhatbuf_r+0x40>
 8006016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800601a:	e00e      	b.n	800603a <__swhatbuf_r+0x42>
 800601c:	466a      	mov	r2, sp
 800601e:	f000 f907 	bl	8006230 <_fstat_r>
 8006022:	2800      	cmp	r0, #0
 8006024:	dbf1      	blt.n	800600a <__swhatbuf_r+0x12>
 8006026:	9a01      	ldr	r2, [sp, #4]
 8006028:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800602c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006030:	425a      	negs	r2, r3
 8006032:	415a      	adcs	r2, r3
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	e7ee      	b.n	8006016 <__swhatbuf_r+0x1e>
 8006038:	2340      	movs	r3, #64	; 0x40
 800603a:	2000      	movs	r0, #0
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	b016      	add	sp, #88	; 0x58
 8006040:	bd70      	pop	{r4, r5, r6, pc}
	...

08006044 <__smakebuf_r>:
 8006044:	898b      	ldrh	r3, [r1, #12]
 8006046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006048:	079d      	lsls	r5, r3, #30
 800604a:	4606      	mov	r6, r0
 800604c:	460c      	mov	r4, r1
 800604e:	d507      	bpl.n	8006060 <__smakebuf_r+0x1c>
 8006050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	2301      	movs	r3, #1
 800605a:	6163      	str	r3, [r4, #20]
 800605c:	b002      	add	sp, #8
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	ab01      	add	r3, sp, #4
 8006062:	466a      	mov	r2, sp
 8006064:	f7ff ffc8 	bl	8005ff8 <__swhatbuf_r>
 8006068:	9900      	ldr	r1, [sp, #0]
 800606a:	4605      	mov	r5, r0
 800606c:	4630      	mov	r0, r6
 800606e:	f7ff f9cf 	bl	8005410 <_malloc_r>
 8006072:	b948      	cbnz	r0, 8006088 <__smakebuf_r+0x44>
 8006074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006078:	059a      	lsls	r2, r3, #22
 800607a:	d4ef      	bmi.n	800605c <__smakebuf_r+0x18>
 800607c:	f023 0303 	bic.w	r3, r3, #3
 8006080:	f043 0302 	orr.w	r3, r3, #2
 8006084:	81a3      	strh	r3, [r4, #12]
 8006086:	e7e3      	b.n	8006050 <__smakebuf_r+0xc>
 8006088:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <__smakebuf_r+0x7c>)
 800608a:	62b3      	str	r3, [r6, #40]	; 0x28
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	6020      	str	r0, [r4, #0]
 8006090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	9b00      	ldr	r3, [sp, #0]
 8006098:	6163      	str	r3, [r4, #20]
 800609a:	9b01      	ldr	r3, [sp, #4]
 800609c:	6120      	str	r0, [r4, #16]
 800609e:	b15b      	cbz	r3, 80060b8 <__smakebuf_r+0x74>
 80060a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060a4:	4630      	mov	r0, r6
 80060a6:	f000 f8d5 	bl	8006254 <_isatty_r>
 80060aa:	b128      	cbz	r0, 80060b8 <__smakebuf_r+0x74>
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	89a0      	ldrh	r0, [r4, #12]
 80060ba:	4305      	orrs	r5, r0
 80060bc:	81a5      	strh	r5, [r4, #12]
 80060be:	e7cd      	b.n	800605c <__smakebuf_r+0x18>
 80060c0:	08005e51 	.word	0x08005e51

080060c4 <__malloc_lock>:
 80060c4:	4801      	ldr	r0, [pc, #4]	; (80060cc <__malloc_lock+0x8>)
 80060c6:	f7ff bf95 	b.w	8005ff4 <__retarget_lock_acquire_recursive>
 80060ca:	bf00      	nop
 80060cc:	20000258 	.word	0x20000258

080060d0 <__malloc_unlock>:
 80060d0:	4801      	ldr	r0, [pc, #4]	; (80060d8 <__malloc_unlock+0x8>)
 80060d2:	f7ff bf90 	b.w	8005ff6 <__retarget_lock_release_recursive>
 80060d6:	bf00      	nop
 80060d8:	20000258 	.word	0x20000258

080060dc <_raise_r>:
 80060dc:	291f      	cmp	r1, #31
 80060de:	b538      	push	{r3, r4, r5, lr}
 80060e0:	4604      	mov	r4, r0
 80060e2:	460d      	mov	r5, r1
 80060e4:	d904      	bls.n	80060f0 <_raise_r+0x14>
 80060e6:	2316      	movs	r3, #22
 80060e8:	6003      	str	r3, [r0, #0]
 80060ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060f2:	b112      	cbz	r2, 80060fa <_raise_r+0x1e>
 80060f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060f8:	b94b      	cbnz	r3, 800610e <_raise_r+0x32>
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 f830 	bl	8006160 <_getpid_r>
 8006100:	462a      	mov	r2, r5
 8006102:	4601      	mov	r1, r0
 8006104:	4620      	mov	r0, r4
 8006106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800610a:	f000 b817 	b.w	800613c <_kill_r>
 800610e:	2b01      	cmp	r3, #1
 8006110:	d00a      	beq.n	8006128 <_raise_r+0x4c>
 8006112:	1c59      	adds	r1, r3, #1
 8006114:	d103      	bne.n	800611e <_raise_r+0x42>
 8006116:	2316      	movs	r3, #22
 8006118:	6003      	str	r3, [r0, #0]
 800611a:	2001      	movs	r0, #1
 800611c:	e7e7      	b.n	80060ee <_raise_r+0x12>
 800611e:	2400      	movs	r4, #0
 8006120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006124:	4628      	mov	r0, r5
 8006126:	4798      	blx	r3
 8006128:	2000      	movs	r0, #0
 800612a:	e7e0      	b.n	80060ee <_raise_r+0x12>

0800612c <raise>:
 800612c:	4b02      	ldr	r3, [pc, #8]	; (8006138 <raise+0xc>)
 800612e:	4601      	mov	r1, r0
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	f7ff bfd3 	b.w	80060dc <_raise_r>
 8006136:	bf00      	nop
 8006138:	200000a4 	.word	0x200000a4

0800613c <_kill_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d07      	ldr	r5, [pc, #28]	; (800615c <_kill_r+0x20>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	4611      	mov	r1, r2
 8006148:	602b      	str	r3, [r5, #0]
 800614a:	f7fa fcb7 	bl	8000abc <_kill>
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	d102      	bne.n	8006158 <_kill_r+0x1c>
 8006152:	682b      	ldr	r3, [r5, #0]
 8006154:	b103      	cbz	r3, 8006158 <_kill_r+0x1c>
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	bd38      	pop	{r3, r4, r5, pc}
 800615a:	bf00      	nop
 800615c:	2000025c 	.word	0x2000025c

08006160 <_getpid_r>:
 8006160:	f7fa bca4 	b.w	8000aac <_getpid>

08006164 <__sread>:
 8006164:	b510      	push	{r4, lr}
 8006166:	460c      	mov	r4, r1
 8006168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616c:	f000 f894 	bl	8006298 <_read_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	bfab      	itete	ge
 8006174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006176:	89a3      	ldrhlt	r3, [r4, #12]
 8006178:	181b      	addge	r3, r3, r0
 800617a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800617e:	bfac      	ite	ge
 8006180:	6563      	strge	r3, [r4, #84]	; 0x54
 8006182:	81a3      	strhlt	r3, [r4, #12]
 8006184:	bd10      	pop	{r4, pc}

08006186 <__swrite>:
 8006186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618a:	461f      	mov	r7, r3
 800618c:	898b      	ldrh	r3, [r1, #12]
 800618e:	05db      	lsls	r3, r3, #23
 8006190:	4605      	mov	r5, r0
 8006192:	460c      	mov	r4, r1
 8006194:	4616      	mov	r6, r2
 8006196:	d505      	bpl.n	80061a4 <__swrite+0x1e>
 8006198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619c:	2302      	movs	r3, #2
 800619e:	2200      	movs	r2, #0
 80061a0:	f000 f868 	bl	8006274 <_lseek_r>
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	4632      	mov	r2, r6
 80061b2:	463b      	mov	r3, r7
 80061b4:	4628      	mov	r0, r5
 80061b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ba:	f000 b817 	b.w	80061ec <_write_r>

080061be <__sseek>:
 80061be:	b510      	push	{r4, lr}
 80061c0:	460c      	mov	r4, r1
 80061c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c6:	f000 f855 	bl	8006274 <_lseek_r>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	bf15      	itete	ne
 80061d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80061d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061da:	81a3      	strheq	r3, [r4, #12]
 80061dc:	bf18      	it	ne
 80061de:	81a3      	strhne	r3, [r4, #12]
 80061e0:	bd10      	pop	{r4, pc}

080061e2 <__sclose>:
 80061e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e6:	f000 b813 	b.w	8006210 <_close_r>
	...

080061ec <_write_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4d07      	ldr	r5, [pc, #28]	; (800620c <_write_r+0x20>)
 80061f0:	4604      	mov	r4, r0
 80061f2:	4608      	mov	r0, r1
 80061f4:	4611      	mov	r1, r2
 80061f6:	2200      	movs	r2, #0
 80061f8:	602a      	str	r2, [r5, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f7fa fc95 	bl	8000b2a <_write>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_write_r+0x1e>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_write_r+0x1e>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	2000025c 	.word	0x2000025c

08006210 <_close_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d06      	ldr	r5, [pc, #24]	; (800622c <_close_r+0x1c>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	f7fa fca1 	bl	8000b62 <_close>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d102      	bne.n	800622a <_close_r+0x1a>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	b103      	cbz	r3, 800622a <_close_r+0x1a>
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	2000025c 	.word	0x2000025c

08006230 <_fstat_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d07      	ldr	r5, [pc, #28]	; (8006250 <_fstat_r+0x20>)
 8006234:	2300      	movs	r3, #0
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	f7fa fc9c 	bl	8000b7a <_fstat>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d102      	bne.n	800624c <_fstat_r+0x1c>
 8006246:	682b      	ldr	r3, [r5, #0]
 8006248:	b103      	cbz	r3, 800624c <_fstat_r+0x1c>
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	bd38      	pop	{r3, r4, r5, pc}
 800624e:	bf00      	nop
 8006250:	2000025c 	.word	0x2000025c

08006254 <_isatty_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d06      	ldr	r5, [pc, #24]	; (8006270 <_isatty_r+0x1c>)
 8006258:	2300      	movs	r3, #0
 800625a:	4604      	mov	r4, r0
 800625c:	4608      	mov	r0, r1
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	f7fa fc9b 	bl	8000b9a <_isatty>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_isatty_r+0x1a>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_isatty_r+0x1a>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	2000025c 	.word	0x2000025c

08006274 <_lseek_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d07      	ldr	r5, [pc, #28]	; (8006294 <_lseek_r+0x20>)
 8006278:	4604      	mov	r4, r0
 800627a:	4608      	mov	r0, r1
 800627c:	4611      	mov	r1, r2
 800627e:	2200      	movs	r2, #0
 8006280:	602a      	str	r2, [r5, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	f7fa fc94 	bl	8000bb0 <_lseek>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_lseek_r+0x1e>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_lseek_r+0x1e>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	2000025c 	.word	0x2000025c

08006298 <_read_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d07      	ldr	r5, [pc, #28]	; (80062b8 <_read_r+0x20>)
 800629c:	4604      	mov	r4, r0
 800629e:	4608      	mov	r0, r1
 80062a0:	4611      	mov	r1, r2
 80062a2:	2200      	movs	r2, #0
 80062a4:	602a      	str	r2, [r5, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f7fa fc22 	bl	8000af0 <_read>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_read_r+0x1e>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_read_r+0x1e>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	2000025c 	.word	0x2000025c

080062bc <_init>:
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062be:	bf00      	nop
 80062c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c2:	bc08      	pop	{r3}
 80062c4:	469e      	mov	lr, r3
 80062c6:	4770      	bx	lr

080062c8 <_fini>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	bf00      	nop
 80062cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ce:	bc08      	pop	{r3}
 80062d0:	469e      	mov	lr, r3
 80062d2:	4770      	bx	lr

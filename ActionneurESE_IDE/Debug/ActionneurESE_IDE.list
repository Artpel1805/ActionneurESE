
ActionneurESE_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000992c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e08  08009e08  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e10  08009e10  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e10  08009e10  00019e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08009e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000118  08009f30  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08009f30  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af21  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003511  00000000  00000000  0003b069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a340  00000000  00000000  00040fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa5c  00000000  00000000  0006b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f10  00000000  00000000  00085d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00199c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069e4  00000000  00000000  00199ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000118 	.word	0x20000118
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009af4 	.word	0x08009af4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000011c 	.word	0x2000011c
 800021c:	08009af4 	.word	0x08009af4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2220      	movs	r2, #32
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f007 fba1 	bl	8008540 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e48:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e6e:	f001 f9cd 	bl	800220c <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000e78:	f000 fbaa 	bl	80015d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000e88:	f002 f9c6 	bl	8003218 <HAL_ADCEx_MultiModeConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000e92:	f000 fb9d 	bl	80015d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_ADC1_Init+0xf0>)
 8000e98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea2:	237f      	movs	r3, #127	; 0x7f
 8000ea4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_ADC1_Init+0xec>)
 8000eb4:	f001 fc54 	bl	8002760 <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ebe:	f000 fb87 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	; 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000134 	.word	0x20000134
 8000ed0:	04300002 	.word	0x04300002

08000ed4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b09e      	sub	sp, #120	; 0x78
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2254      	movs	r2, #84	; 0x54
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 fb23 	bl	8008540 <memset>
  if(adcHandle->Instance==ADC1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f02:	d15f      	bne.n	8000fc4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f0e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fe6f 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f20:	f000 fb56 	bl	80015d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_ADC_MspInit+0xf8>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f54:	2301      	movs	r3, #1
 8000f56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f64:	4619      	mov	r1, r3
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f002 fe9f 	bl	8003cac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_ADC_MspInit+0x100>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f76:	2205      	movs	r2, #5
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000faa:	f002 fb4d 	bl	8003648 <HAL_DMA_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000fb4:	f000 fb0c 	bl	80015d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_ADC_MspInit+0xfc>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3778      	adds	r7, #120	; 0x78
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	200001a0 	.word	0x200001a0
 8000fd4:	40020008 	.word	0x40020008

08000fd8 <get_ccr_value>:
#include "asservissement.h"
#include "power_module.h"

extern uint32_t ADC_Buffer[ADC_BUF_SIZE];

int get_ccr_value(int rapport_cyclique){
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	if(rapport_cyclique > 100){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	dd02      	ble.n	8000fec <get_ccr_value+0x14>
		return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e012      	b.n	8001012 <get_ccr_value+0x3a>
	}
	if(rapport_cyclique<0){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da02      	bge.n	8000ff8 <get_ccr_value+0x20>
		return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e00c      	b.n	8001012 <get_ccr_value+0x3a>
	}
	int arr = TIM1 -> ARR;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <get_ccr_value+0x48>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	60fb      	str	r3, [r7, #12]
	return (rapport_cyclique * arr) / 100;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <get_ccr_value+0x4c>)
 8001008:	fb82 1203 	smull	r1, r2, r2, r3
 800100c:	1152      	asrs	r2, r2, #5
 800100e:	17db      	asrs	r3, r3, #31
 8001010:	1ad3      	subs	r3, r2, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40012c00 	.word	0x40012c00
 8001024:	51eb851f 	.word	0x51eb851f

08001028 <change_ccr>:


void change_ccr(int rapport_cyclique){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	int goalCCR1 = get_ccr_value(rapport_cyclique);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffd1 	bl	8000fd8 <get_ccr_value>
 8001036:	60f8      	str	r0, [r7, #12]
	if(goalCCR1 == -1){
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103e:	d02d      	beq.n	800109c <change_ccr+0x74>
		return;
	}
	if( goalCCR1 > TIM1 -> CCR1){
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <change_ccr+0x7c>)
 8001042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d211      	bcs.n	800106e <change_ccr+0x46>
		while(TIM1 -> CCR1 != goalCCR1){
 800104a:	e00a      	b.n	8001062 <change_ccr+0x3a>
			TIM1 -> CCR1 ++;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <change_ccr+0x7c>)
 800104e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001050:	3201      	adds	r2, #1
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1 -> CCR2 --;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <change_ccr+0x7c>)
 8001056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001058:	3a01      	subs	r2, #1
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 800105c:	2032      	movs	r0, #50	; 0x32
 800105e:	f000 fe91 	bl	8001d84 <HAL_Delay>
		while(TIM1 -> CCR1 != goalCCR1){
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <change_ccr+0x7c>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d1ef      	bne.n	800104c <change_ccr+0x24>
		}
		return;
 800106c:	e017      	b.n	800109e <change_ccr+0x76>
	}
	if( goalCCR1 < TIM1 -> CCR1){
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <change_ccr+0x7c>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d912      	bls.n	800109e <change_ccr+0x76>
		while(TIM1 -> CCR1 != goalCCR1){
 8001078:	e00a      	b.n	8001090 <change_ccr+0x68>
			TIM1 -> CCR1 --;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <change_ccr+0x7c>)
 800107c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107e:	3a01      	subs	r2, #1
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1 -> CCR2 ++;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <change_ccr+0x7c>)
 8001084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001086:	3201      	adds	r2, #1
 8001088:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 800108a:	2032      	movs	r0, #50	; 0x32
 800108c:	f000 fe7a 	bl	8001d84 <HAL_Delay>
		while(TIM1 -> CCR1 != goalCCR1){
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <change_ccr+0x7c>)
 8001092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	429a      	cmp	r2, r3
 8001098:	d1ef      	bne.n	800107a <change_ccr+0x52>
		}
		return;
 800109a:	e000      	b.n	800109e <change_ccr+0x76>
		return;
 800109c:	bf00      	nop
	}
}
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40012c00 	.word	0x40012c00

080010a8 <get_mean_current>:

int get_mean_current(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	int current = 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
	current = (int)ADC_Buffer[0];
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <get_mean_current+0x78>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	607b      	str	r3, [r7, #4]
	current = ((current * 3.3 / 4096) - 2.5 ) * 12;
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fa6b 	bl	8000594 <__aeabi_i2d>
 80010be:	a316      	add	r3, pc, #88	; (adr r3, 8001118 <get_mean_current+0x70>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fad0 	bl	8000668 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <get_mean_current+0x7c>)
 80010d6:	f7ff fbf1 	bl	80008bc <__aeabi_ddiv>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <get_mean_current+0x80>)
 80010e8:	f7ff f906 	bl	80002f8 <__aeabi_dsub>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <get_mean_current+0x84>)
 80010fa:	f7ff fab5 	bl	8000668 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fcc1 	bl	8000a8c <__aeabi_d2iz>
 800110a:	4603      	mov	r3, r0
 800110c:	607b      	str	r3, [r7, #4]
	return current;
 800110e:	687b      	ldr	r3, [r7, #4]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	66666666 	.word	0x66666666
 800111c:	400a6666 	.word	0x400a6666
 8001120:	20000248 	.word	0x20000248
 8001124:	40b00000 	.word	0x40b00000
 8001128:	40040000 	.word	0x40040000
 800112c:	40280000 	.word	0x40280000

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_DMA_Init+0x50>)
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <MX_DMA_Init+0x50>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6493      	str	r3, [r2, #72]	; 0x48
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_DMA_Init+0x50>)
 8001144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_DMA_Init+0x50>)
 8001150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <MX_DMA_Init+0x50>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6493      	str	r3, [r2, #72]	; 0x48
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_DMA_Init+0x50>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	200b      	movs	r0, #11
 800116c:	f002 fa37 	bl	80035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001170:	200b      	movs	r0, #11
 8001172:	f002 fa4e 	bl	8003612 <HAL_NVIC_EnableIRQ>

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b33      	ldr	r3, [pc, #204]	; (8001268 <MX_GPIO_Init+0xe4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a32      	ldr	r2, [pc, #200]	; (8001268 <MX_GPIO_Init+0xe4>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <MX_GPIO_Init+0xe4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <MX_GPIO_Init+0xe4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <MX_GPIO_Init+0xe4>)
 80011b8:	f043 0320 	orr.w	r3, r3, #32
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <MX_GPIO_Init+0xe4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_GPIO_Init+0xe4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a26      	ldr	r2, [pc, #152]	; (8001268 <MX_GPIO_Init+0xe4>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_GPIO_Init+0xe4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	4821      	ldr	r0, [pc, #132]	; (800126c <MX_GPIO_Init+0xe8>)
 80011e8:	f002 fee2 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2120      	movs	r1, #32
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f4:	f002 fedc 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <MX_GPIO_Init+0xe8>)
 8001210:	f002 fd4c 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8001214:	2308      	movs	r3, #8
 8001216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <MX_GPIO_Init+0xe8>)
 800122c:	f002 fd3e 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001230:	2320      	movs	r3, #32
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f002 fd2f 	bl	8003cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	2028      	movs	r0, #40	; 0x28
 8001254:	f002 f9c3 	bl	80035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001258:	2028      	movs	r0, #40	; 0x28
 800125a:	f002 f9da 	bl	8003612 <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	48000800 	.word	0x48000800

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b09e      	sub	sp, #120	; 0x78
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f000 fd10 	bl	8001ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001282:	f000 f93b 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001286:	f7ff ff7d 	bl	8001184 <MX_GPIO_Init>
  MX_DMA_Init();
 800128a:	f7ff ff51 	bl	8001130 <MX_DMA_Init>
  MX_TIM1_Init();
 800128e:	f000 fb35 	bl	80018fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001292:	f000 fc31 	bl	8001af8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001296:	f7ff fda3 	bl	8000de0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, ADC_BUF_SIZE))
 800129a:	2201      	movs	r2, #1
 800129c:	4982      	ldr	r1, [pc, #520]	; (80014a8 <main+0x238>)
 800129e:	4883      	ldr	r0, [pc, #524]	; (80014ac <main+0x23c>)
 80012a0:	f001 f976 	bl	8002590 <HAL_ADC_Start_DMA>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <main+0x48>
		HAL_UART_Transmit(&huart2, ADCError, sizeof(ADCError), HAL_MAX_DELAY);
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	220f      	movs	r2, #15
 80012b0:	497f      	ldr	r1, [pc, #508]	; (80014b0 <main+0x240>)
 80012b2:	4880      	ldr	r0, [pc, #512]	; (80014b4 <main+0x244>)
 80012b4:	f005 f8f0 	bl	8006498 <HAL_UART_Transmit>

	memset(argv,0,MAX_ARGS*sizeof(char*));
 80012b8:	463b      	mov	r3, r7
 80012ba:	2224      	movs	r2, #36	; 0x24
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 f93e 	bl	8008540 <memset>
	memset(cmdBuffer,0,CMD_BUFFER_SIZE*sizeof(char));
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	2240      	movs	r2, #64	; 0x40
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f007 f937 	bl	8008540 <memset>
 80012d2:	4b79      	ldr	r3, [pc, #484]	; (80014b8 <main+0x248>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,0,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,0,UART_TX_BUFFER_SIZE*sizeof(char));
 80012d8:	2240      	movs	r2, #64	; 0x40
 80012da:	2100      	movs	r1, #0
 80012dc:	4877      	ldr	r0, [pc, #476]	; (80014bc <main+0x24c>)
 80012de:	f007 f92f 	bl	8008540 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80012e2:	2201      	movs	r2, #1
 80012e4:	4974      	ldr	r1, [pc, #464]	; (80014b8 <main+0x248>)
 80012e6:	4873      	ldr	r0, [pc, #460]	; (80014b4 <main+0x244>)
 80012e8:	f005 f96c 	bl	80065c4 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f000 fd49 	bl	8001d84 <HAL_Delay>

	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	2266      	movs	r2, #102	; 0x66
 80012f8:	4971      	ldr	r1, [pc, #452]	; (80014c0 <main+0x250>)
 80012fa:	486e      	ldr	r0, [pc, #440]	; (80014b4 <main+0x244>)
 80012fc:	f005 f8cc 	bl	8006498 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	2218      	movs	r2, #24
 8001306:	496f      	ldr	r1, [pc, #444]	; (80014c4 <main+0x254>)
 8001308:	486a      	ldr	r0, [pc, #424]	; (80014b4 <main+0x244>)
 800130a:	f005 f8c5 	bl	8006498 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <main+0x258>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d056      	beq.n	80013c4 <main+0x154>
			switch(uartRxBuffer[0]){
 8001316:	4b68      	ldr	r3, [pc, #416]	; (80014b8 <main+0x248>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b0d      	cmp	r3, #13
 800131c:	d002      	beq.n	8001324 <main+0xb4>
 800131e:	2b7f      	cmp	r3, #127	; 0x7f
 8001320:	d02d      	beq.n	800137e <main+0x10e>
 8001322:	e03c      	b.n	800139e <main+0x12e>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	2203      	movs	r2, #3
 800132a:	4968      	ldr	r1, [pc, #416]	; (80014cc <main+0x25c>)
 800132c:	4861      	ldr	r0, [pc, #388]	; (80014b4 <main+0x244>)
 800132e:	f005 f8b3 	bl	8006498 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8001332:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001338:	4413      	add	r3, r2
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
				argc = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, "=");//
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4962      	ldr	r1, [pc, #392]	; (80014d0 <main+0x260>)
 8001348:	4618      	mov	r0, r3
 800134a:	f007 f935 	bl	80085b8 <strtok>
 800134e:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 8001350:	e00d      	b.n	800136e <main+0xfe>
					argv[argc++] = token;
 8001352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	673a      	str	r2, [r7, #112]	; 0x70
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	3378      	adds	r3, #120	; 0x78
 800135c:	443b      	add	r3, r7
 800135e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001360:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 8001364:	495b      	ldr	r1, [pc, #364]	; (80014d4 <main+0x264>)
 8001366:	2000      	movs	r0, #0
 8001368:	f007 f926 	bl	80085b8 <strtok>
 800136c:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 800136e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1ee      	bne.n	8001352 <main+0xe2>
				}
				idx_cmd = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 8001378:	2301      	movs	r3, #1
 800137a:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 800137c:	e01f      	b.n	80013be <main+0x14e>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 800137e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001380:	1e5a      	subs	r2, r3, #1
 8001382:	677a      	str	r2, [r7, #116]	; 0x74
 8001384:	3378      	adds	r3, #120	; 0x78
 8001386:	443b      	add	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	2201      	movs	r2, #1
 8001394:	4948      	ldr	r1, [pc, #288]	; (80014b8 <main+0x248>)
 8001396:	4847      	ldr	r0, [pc, #284]	; (80014b4 <main+0x244>)
 8001398:	f005 f87e 	bl	8006498 <HAL_UART_Transmit>
				break;
 800139c:	e00f      	b.n	80013be <main+0x14e>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800139e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	677a      	str	r2, [r7, #116]	; 0x74
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <main+0x248>)
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	3378      	adds	r3, #120	; 0x78
 80013aa:	443b      	add	r3, r7
 80013ac:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	2201      	movs	r2, #1
 80013b6:	4940      	ldr	r1, [pc, #256]	; (80014b8 <main+0x248>)
 80013b8:	483e      	ldr	r0, [pc, #248]	; (80014b4 <main+0x244>)
 80013ba:	f005 f86d 	bl	8006498 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80013be:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <main+0x258>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 80013c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0a1      	beq.n	800130e <main+0x9e>

			if(strcmp(argv[0],"speed")==0){
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	4942      	ldr	r1, [pc, #264]	; (80014d8 <main+0x268>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe ff26 	bl	8000220 <strcmp>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d117      	bne.n	800140a <main+0x19a>
				if(strlen(argv[1])==2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe ff29 	bl	8000234 <strlen>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d108      	bne.n	80013fa <main+0x18a>
				{
					change_ccr(atoi(argv[1]));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 f87a 	bl	80084e4 <atoi>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fe18 	bl	8001028 <change_ccr>
 80013f8:	e04b      	b.n	8001492 <main+0x222>
				}
				else {
					HAL_UART_Transmit(&huart2, vitesseNotFound, sizeof(vitesseNotFound), HAL_MAX_DELAY);                      }
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2217      	movs	r2, #23
 8001400:	4936      	ldr	r1, [pc, #216]	; (80014dc <main+0x26c>)
 8001402:	482c      	ldr	r0, [pc, #176]	; (80014b4 <main+0x244>)
 8001404:	f005 f848 	bl	8006498 <HAL_UART_Transmit>
 8001408:	e043      	b.n	8001492 <main+0x222>

			}
			else if(strcmp(argv[0],"start")==0)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	4934      	ldr	r1, [pc, #208]	; (80014e0 <main+0x270>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe ff06 	bl	8000220 <strcmp>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <main+0x1be>
			{
				start_module();
 800141a:	f000 f8df 	bl	80015dc <start_module>
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	220d      	movs	r2, #13
 8001424:	492f      	ldr	r1, [pc, #188]	; (80014e4 <main+0x274>)
 8001426:	4823      	ldr	r0, [pc, #140]	; (80014b4 <main+0x244>)
 8001428:	f005 f836 	bl	8006498 <HAL_UART_Transmit>
 800142c:	e031      	b.n	8001492 <main+0x222>

			}
			else if(strcmp(argv[0],"stop")==0)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	492d      	ldr	r1, [pc, #180]	; (80014e8 <main+0x278>)
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe fef4 	bl	8000220 <strcmp>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <main+0x1e2>
			{
				stop_module();
 800143e:	f000 f8f3 	bl	8001628 <stop_module>
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	220e      	movs	r2, #14
 8001448:	4928      	ldr	r1, [pc, #160]	; (80014ec <main+0x27c>)
 800144a:	481a      	ldr	r0, [pc, #104]	; (80014b4 <main+0x244>)
 800144c:	f005 f824 	bl	8006498 <HAL_UART_Transmit>
 8001450:	e01f      	b.n	8001492 <main+0x222>
			}
			else if(strcmp(argv[0],"current")==0)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	4926      	ldr	r1, [pc, #152]	; (80014f0 <main+0x280>)
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe fee2 	bl	8000220 <strcmp>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d110      	bne.n	8001484 <main+0x214>
			{
				int current = get_mean_current();
 8001462:	f7ff fe21 	bl	80010a8 <get_mean_current>
 8001466:	6678      	str	r0, [r7, #100]	; 0x64
				snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE, "\r\nCurrent = %d \r\n", current);
 8001468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800146a:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <main+0x284>)
 800146c:	2140      	movs	r1, #64	; 0x40
 800146e:	4813      	ldr	r0, [pc, #76]	; (80014bc <main+0x24c>)
 8001470:	f007 f86e 	bl	8008550 <sniprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	2240      	movs	r2, #64	; 0x40
 800147a:	4910      	ldr	r1, [pc, #64]	; (80014bc <main+0x24c>)
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <main+0x244>)
 800147e:	f005 f80b 	bl	8006498 <HAL_UART_Transmit>
 8001482:	e006      	b.n	8001492 <main+0x222>
			}

			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	2214      	movs	r2, #20
 800148a:	491b      	ldr	r1, [pc, #108]	; (80014f8 <main+0x288>)
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <main+0x244>)
 800148e:	f005 f803 	bl	8006498 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	490a      	ldr	r1, [pc, #40]	; (80014c4 <main+0x254>)
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <main+0x244>)
 800149c:	f004 fffc 	bl	8006498 <HAL_UART_Transmit>
			newCmdReady = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 80014a4:	e733      	b.n	800130e <main+0x9e>
 80014a6:	bf00      	nop
 80014a8:	20000248 	.word	0x20000248
 80014ac:	20000134 	.word	0x20000134
 80014b0:	20000098 	.word	0x20000098
 80014b4:	2000029c 	.word	0x2000029c
 80014b8:	20000204 	.word	0x20000204
 80014bc:	20000208 	.word	0x20000208
 80014c0:	20000018 	.word	0x20000018
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000200 	.word	0x20000200
 80014cc:	20000080 	.word	0x20000080
 80014d0:	08009b0c 	.word	0x08009b0c
 80014d4:	08009b10 	.word	0x08009b10
 80014d8:	08009b14 	.word	0x08009b14
 80014dc:	08009b68 	.word	0x08009b68
 80014e0:	08009b1c 	.word	0x08009b1c
 80014e4:	08009b48 	.word	0x08009b48
 80014e8:	08009b24 	.word	0x08009b24
 80014ec:	08009b58 	.word	0x08009b58
 80014f0:	08009b2c 	.word	0x08009b2c
 80014f4:	08009b34 	.word	0x08009b34
 80014f8:	20000084 	.word	0x20000084

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	2238      	movs	r2, #56	; 0x38
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f007 f818 	bl	8008540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800151e:	2000      	movs	r0, #0
 8001520:	f002 fd82 	bl	8004028 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800152c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001532:	2303      	movs	r3, #3
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001536:	2306      	movs	r3, #6
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800153a:	2355      	movs	r3, #85	; 0x55
 800153c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fe1e 	bl	8004190 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800155a:	f000 f839 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2303      	movs	r3, #3
 8001564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2104      	movs	r1, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f003 f922 	bl	80047c0 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001582:	f000 f825 	bl	80015d0 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3750      	adds	r7, #80	; 0x50
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_UART_RxCpltCallback+0x20>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800159e:	2201      	movs	r2, #1
 80015a0:	4904      	ldr	r1, [pc, #16]	; (80015b4 <HAL_UART_RxCpltCallback+0x24>)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_UART_RxCpltCallback+0x28>)
 80015a4:	f005 f80e 	bl	80065c4 <HAL_UART_Receive_IT>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000200 	.word	0x20000200
 80015b4:	20000204 	.word	0x20000204
 80015b8:	2000029c 	.word	0x2000029c

080015bc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <start_module>:
#include "power_module.h"
#include "main.h"
#include "tim.h"


void start_module(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2108      	movs	r1, #8
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <start_module+0x44>)
 80015e6:	f002 fce3 	bl	8003fb0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80015ea:	2002      	movs	r0, #2
 80015ec:	f000 fbca 	bl	8001d84 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2108      	movs	r1, #8
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <start_module+0x44>)
 80015f6:	f002 fcdb 	bl	8003fb0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015fa:	2100      	movs	r1, #0
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <start_module+0x48>)
 80015fe:	f003 fda1 	bl	8005144 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001602:	2100      	movs	r1, #0
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <start_module+0x48>)
 8001606:	f004 fc57 	bl	8005eb8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800160a:	2104      	movs	r1, #4
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <start_module+0x48>)
 800160e:	f003 fd99 	bl	8005144 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001612:	2104      	movs	r1, #4
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <start_module+0x48>)
 8001616:	f004 fc4f 	bl	8005eb8 <HAL_TIMEx_PWMN_Start>

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	48000800 	.word	0x48000800
 8001624:	20000250 	.word	0x20000250

08001628 <stop_module>:

void stop_module(){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800162c:	2100      	movs	r1, #0
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <stop_module+0x28>)
 8001630:	f003 fe9a 	bl	8005368 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001634:	2100      	movs	r1, #0
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <stop_module+0x28>)
 8001638:	f004 fd00 	bl	800603c <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800163c:	2104      	movs	r1, #4
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <stop_module+0x28>)
 8001640:	f003 fe92 	bl	8005368 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001644:	2104      	movs	r1, #4
 8001646:	4802      	ldr	r0, [pc, #8]	; (8001650 <stop_module+0x28>)
 8001648:	f004 fcf8 	bl	800603c <HAL_TIMEx_PWMN_Stop>

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000250 	.word	0x20000250

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_MspInit+0x54>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_MspInit+0x54>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6613      	str	r3, [r2, #96]	; 0x60
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_MspInit+0x54>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_MspInit+0x54>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <HAL_MspInit+0x54>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_MspInit+0x54>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	2005      	movs	r0, #5
 8001690:	f001 ffa5 	bl	80035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001694:	2005      	movs	r0, #5
 8001696:	f001 ffbc 	bl	8003612 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800169a:	f002 fd69 	bl	8004170 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 fb26 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Channel1_IRQHandler+0x10>)
 8001716:	f002 f97a 	bl	8003a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001a0 	.word	0x200001a0

08001724 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <USART2_IRQHandler+0x10>)
 800172a:	f004 ffa1 	bl	8006670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000029c 	.word	0x2000029c

08001738 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	start_module(); // Don't forget to put a lower priority as SySTick
 800173c:	f7ff ff4e 	bl	80015dc <start_module>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001744:	f002 fc4c 	bl	8003fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001766:	f006 fec1 	bl	80084ec <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
	return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
	while (1) {}		/* Make sure we hang here */
 800178e:	e7fe      	b.n	800178e <_exit+0x12>

08001790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00a      	b.n	80017b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	4601      	mov	r1, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf0      	blt.n	80017a2 <_read+0x12>
	}

return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e009      	b.n	80017f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf1      	blt.n	80017dc <_write+0x12>
	}
	return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182a:	605a      	str	r2, [r3, #4]
	return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_isatty>:

int _isatty(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f006 fe26 	bl	80084ec <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20020000 	.word	0x20020000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	2000024c 	.word	0x2000024c
 80018d4:	20000340 	.word	0x20000340

080018d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b098      	sub	sp, #96	; 0x60
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2234      	movs	r2, #52	; 0x34
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f006 fe09 	bl	8008540 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <MX_TIM1_Init+0x144>)
 8001930:	4a44      	ldr	r2, [pc, #272]	; (8001a44 <MX_TIM1_Init+0x148>)
 8001932:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <MX_TIM1_Init+0x144>)
 8001936:	2209      	movs	r2, #9
 8001938:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <MX_TIM1_Init+0x144>)
 800193c:	2220      	movs	r2, #32
 800193e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <MX_TIM1_Init+0x144>)
 8001942:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001946:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <MX_TIM1_Init+0x144>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800194e:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <MX_TIM1_Init+0x144>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <MX_TIM1_Init+0x144>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800195a:	4839      	ldr	r0, [pc, #228]	; (8001a40 <MX_TIM1_Init+0x144>)
 800195c:	f003 fb9a 	bl	8005094 <HAL_TIM_PWM_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001966:	f7ff fe33 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800196a:	2320      	movs	r3, #32
 800196c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001976:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800197a:	4619      	mov	r1, r3
 800197c:	4830      	ldr	r0, [pc, #192]	; (8001a40 <MX_TIM1_Init+0x144>)
 800197e:	f004 fbbb 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001988:	f7ff fe22 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198c:	2360      	movs	r3, #96	; 0x60
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 614;
 8001990:	f240 2366 	movw	r3, #614	; 0x266
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ae:	2200      	movs	r2, #0
 80019b0:	4619      	mov	r1, r3
 80019b2:	4823      	ldr	r0, [pc, #140]	; (8001a40 <MX_TIM1_Init+0x144>)
 80019b4:	f003 fd74 	bl	80054a0 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019be:	f7ff fe07 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.Pulse = 410;
 80019c2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019cc:	2204      	movs	r2, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	481b      	ldr	r0, [pc, #108]	; (8001a40 <MX_TIM1_Init+0x144>)
 80019d2:	f003 fd65 	bl	80054a0 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80019dc:	f7ff fdf8 	bl	80015d0 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80019e0:	4817      	ldr	r0, [pc, #92]	; (8001a40 <MX_TIM1_Init+0x144>)
 80019e2:	f004 fcd1 	bl	8006388 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 80019f2:	23d2      	movs	r3, #210	; 0xd2
 80019f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_TIM1_Init+0x144>)
 8001a24:	f004 fbfe 	bl	8006224 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001a2e:	f7ff fdcf 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a32:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_TIM1_Init+0x144>)
 8001a34:	f000 f828 	bl	8001a88 <HAL_TIM_MspPostInit>

}
 8001a38:	bf00      	nop
 8001a3a:	3760      	adds	r7, #96	; 0x60
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000250 	.word	0x20000250
 8001a44:	40012c00 	.word	0x40012c00

08001a48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_TIM_PWM_MspInit+0x38>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10b      	bne.n	8001a72 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a64:	6613      	str	r3, [r2, #96]	; 0x60
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11d      	bne.n	8001ae6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001ac2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001ac6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ad4:	2306      	movs	r3, #6
 8001ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f002 f8e3 	bl	8003cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40021000 	.word	0x40021000

08001af8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001afe:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <MX_USART2_UART_Init+0x94>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b40:	4811      	ldr	r0, [pc, #68]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b42:	f004 fc59 	bl	80063f8 <HAL_UART_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b4c:	f7ff fd40 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b50:	2100      	movs	r1, #0
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b54:	f006 fbfb 	bl	800834e <HAL_UARTEx_SetTxFifoThreshold>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b5e:	f7ff fd37 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b62:	2100      	movs	r1, #0
 8001b64:	4808      	ldr	r0, [pc, #32]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b66:	f006 fc30 	bl	80083ca <HAL_UARTEx_SetRxFifoThreshold>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b70:	f7ff fd2e 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_USART2_UART_Init+0x90>)
 8001b76:	f006 fbb1 	bl	80082dc <HAL_UARTEx_DisableFifoMode>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b80:	f7ff fd26 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000029c 	.word	0x2000029c
 8001b8c:	40004400 	.word	0x40004400

08001b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b09e      	sub	sp, #120	; 0x78
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	2254      	movs	r2, #84	; 0x54
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f006 fcc5 	bl	8008540 <memset>
  if(uartHandle->Instance==USART2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <HAL_UART_MspInit+0xb8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d13e      	bne.n	8001c3e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 f813 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bd8:	f7ff fcfa 	bl	80015d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_UART_MspInit+0xbc>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_UART_MspInit+0xbc>)
 8001be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be6:	6593      	str	r3, [r2, #88]	; 0x58
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_UART_MspInit+0xbc>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_UART_MspInit+0xbc>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_UART_MspInit+0xbc>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_UART_MspInit+0xbc>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2a:	f002 f83f 	bl	8003cac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2101      	movs	r1, #1
 8001c32:	2026      	movs	r0, #38	; 0x26
 8001c34:	f001 fcd3 	bl	80035de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c38:	2026      	movs	r0, #38	; 0x26
 8001c3a:	f001 fcea 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3778      	adds	r7, #120	; 0x78
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40021000 	.word	0x40021000

08001c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c56:	490e      	ldr	r1, [pc, #56]	; (8001c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <LoopForever+0xe>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c6c:	4c0b      	ldr	r4, [pc, #44]	; (8001c9c <LoopForever+0x16>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c7a:	f7ff fe2d 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f006 fc3b 	bl	80084f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c82:	f7ff faf5 	bl	8001270 <main>

08001c86 <LoopForever>:

LoopForever:
    b LoopForever
 8001c86:	e7fe      	b.n	8001c86 <LoopForever>
  ldr   r0, =_estack
 8001c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001c94:	08009e18 	.word	0x08009e18
  ldr r2, =_sbss
 8001c98:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001c9c:	20000340 	.word	0x20000340

08001ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC1_2_IRQHandler>

08001ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f001 fc8b 	bl	80035c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f80e 	bl	8001cd4 <HAL_InitTick>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	71fb      	strb	r3, [r7, #7]
 8001cc2:	e001      	b.n	8001cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cc4:	f7ff fcc6 	bl	8001654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cc8:	79fb      	ldrb	r3, [r7, #7]

}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_InitTick+0x68>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d022      	beq.n	8001d2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_InitTick+0x6c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_InitTick+0x68>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 fc96 	bl	800362e <HAL_SYSTICK_Config>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10f      	bne.n	8001d28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	d809      	bhi.n	8001d22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	f04f 30ff 	mov.w	r0, #4294967295
 8001d16:	f001 fc62 	bl	80035de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_InitTick+0x70>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e007      	b.n	8001d32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	e004      	b.n	8001d32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	e001      	b.n	8001d32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200000b0 	.word	0x200000b0
 8001d40:	200000a8 	.word	0x200000a8
 8001d44:	200000ac 	.word	0x200000ac

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_IncTick+0x1c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_IncTick+0x20>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a03      	ldr	r2, [pc, #12]	; (8001d64 <HAL_IncTick+0x1c>)
 8001d58:	6013      	str	r3, [r2, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	2000032c 	.word	0x2000032c
 8001d68:	200000b0 	.word	0x200000b0

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	2000032c 	.word	0x2000032c

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d004      	beq.n	8001da8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_Delay+0x40>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da8:	bf00      	nop
 8001daa:	f7ff ffdf 	bl	8001d6c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d8f7      	bhi.n	8001daa <HAL_Delay+0x26>
  {
  }
}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200000b0 	.word	0x200000b0

08001dc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3360      	adds	r3, #96	; 0x60
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <LL_ADC_SetOffset+0x44>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	03fff000 	.word	0x03fff000

08001e78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3360      	adds	r3, #96	; 0x60
 8001e86:	461a      	mov	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3360      	adds	r3, #96	; 0x60
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3360      	adds	r3, #96	; 0x60
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3360      	adds	r3, #96	; 0x60
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	615a      	str	r2, [r3, #20]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b087      	sub	sp, #28
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3330      	adds	r3, #48	; 0x30
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	4413      	add	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	211f      	movs	r1, #31
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 011f 	and.w	r1, r3, #31
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fde:	bf00      	nop
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b087      	sub	sp, #28
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3314      	adds	r3, #20
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	0e5b      	lsrs	r3, r3, #25
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2107      	movs	r1, #7
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	0d1b      	lsrs	r3, r3, #20
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10a      	bne.n	800206a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002068:	e00a      	b.n	8002080 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002076:	43db      	mvns	r3, r3
 8002078:	401a      	ands	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	407f0000 	.word	0x407f0000

08002090 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 031f 	and.w	r3, r3, #31
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6093      	str	r3, [r2, #8]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002134:	d101      	bne.n	800213a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <LL_ADC_IsEnabled+0x18>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <LL_ADC_IsEnabled+0x1a>
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021aa:	f043 0204 	orr.w	r2, r3, #4
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d101      	bne.n	80021fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1af      	b.n	8002586 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7fe fe4d 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff3f 	bl	80020d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff25 	bl	80020ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff5a 	bl	8002120 <LL_ADC_IsInternalRegulatorEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d115      	bne.n	800229e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff3e 	bl	80020f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800227c:	4b9f      	ldr	r3, [pc, #636]	; (80024fc <HAL_ADC_Init+0x2f0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	4a9f      	ldr	r2, [pc, #636]	; (8002500 <HAL_ADC_Init+0x2f4>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	3301      	adds	r3, #1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002290:	e002      	b.n	8002298 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3b01      	subs	r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff3c 	bl	8002120 <LL_ADC_IsInternalRegulatorEnabled>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff75 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 80022d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 8148 	bne.w	8002574 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 8144 	bne.w	8002574 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022f4:	f043 0202 	orr.w	r2, r3, #2
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff35 	bl	8002170 <LL_ADC_IsEnabled>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d141      	bne.n	8002390 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002314:	d004      	beq.n	8002320 <HAL_ADC_Init+0x114>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7a      	ldr	r2, [pc, #488]	; (8002504 <HAL_ADC_Init+0x2f8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d10f      	bne.n	8002340 <HAL_ADC_Init+0x134>
 8002320:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002324:	f7ff ff24 	bl	8002170 <LL_ADC_IsEnabled>
 8002328:	4604      	mov	r4, r0
 800232a:	4876      	ldr	r0, [pc, #472]	; (8002504 <HAL_ADC_Init+0x2f8>)
 800232c:	f7ff ff20 	bl	8002170 <LL_ADC_IsEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	4323      	orrs	r3, r4
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e012      	b.n	8002366 <HAL_ADC_Init+0x15a>
 8002340:	4871      	ldr	r0, [pc, #452]	; (8002508 <HAL_ADC_Init+0x2fc>)
 8002342:	f7ff ff15 	bl	8002170 <LL_ADC_IsEnabled>
 8002346:	4604      	mov	r4, r0
 8002348:	4870      	ldr	r0, [pc, #448]	; (800250c <HAL_ADC_Init+0x300>)
 800234a:	f7ff ff11 	bl	8002170 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	431c      	orrs	r4, r3
 8002352:	486f      	ldr	r0, [pc, #444]	; (8002510 <HAL_ADC_Init+0x304>)
 8002354:	f7ff ff0c 	bl	8002170 <LL_ADC_IsEnabled>
 8002358:	4603      	mov	r3, r0
 800235a:	4323      	orrs	r3, r4
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d012      	beq.n	8002390 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002372:	d004      	beq.n	800237e <HAL_ADC_Init+0x172>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a62      	ldr	r2, [pc, #392]	; (8002504 <HAL_ADC_Init+0x2f8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Init+0x176>
 800237e:	4a65      	ldr	r2, [pc, #404]	; (8002514 <HAL_ADC_Init+0x308>)
 8002380:	e000      	b.n	8002384 <HAL_ADC_Init+0x178>
 8002382:	4a65      	ldr	r2, [pc, #404]	; (8002518 <HAL_ADC_Init+0x30c>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f7ff fd1c 	bl	8001dc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7f5b      	ldrb	r3, [r3, #29]
 8002394:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800239a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d106      	bne.n	80023cc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	3b01      	subs	r3, #1
 80023c4:	045b      	lsls	r3, r3, #17
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_ADC_Init+0x310>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fed1 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 800241c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fede 	bl	80021e4 <LL_ADC_INJ_IsConversionOngoing>
 8002428:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d17f      	bne.n	8002530 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d17c      	bne.n	8002530 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800243a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002442:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002452:	f023 0302 	bic.w	r3, r3, #2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	69b9      	ldr	r1, [r7, #24]
 800245c:	430b      	orrs	r3, r1
 800245e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d017      	beq.n	8002498 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002476:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002480:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6911      	ldr	r1, [r2, #16]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002496:	e013      	b.n	80024c0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d12a      	bne.n	8002520 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024ec:	430a      	orrs	r2, r1
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	e019      	b.n	8002530 <HAL_ADC_Init+0x324>
 80024fc:	200000a8 	.word	0x200000a8
 8002500:	053e2d63 	.word	0x053e2d63
 8002504:	50000100 	.word	0x50000100
 8002508:	50000400 	.word	0x50000400
 800250c:	50000500 	.word	0x50000500
 8002510:	50000600 	.word	0x50000600
 8002514:	50000300 	.word	0x50000300
 8002518:	50000700 	.word	0x50000700
 800251c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10c      	bne.n	8002552 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f023 010f 	bic.w	r1, r3, #15
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	1e5a      	subs	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
 8002550:	e007      	b.n	8002562 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 020f 	bic.w	r2, r2, #15
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	65da      	str	r2, [r3, #92]	; 0x5c
 8002572:	e007      	b.n	8002584 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	f043 0210 	orr.w	r2, r3, #16
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002584:	7ffb      	ldrb	r3, [r7, #31]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	; 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	bf00      	nop

08002590 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a4:	d004      	beq.n	80025b0 <HAL_ADC_Start_DMA+0x20>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a5a      	ldr	r2, [pc, #360]	; (8002714 <HAL_ADC_Start_DMA+0x184>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_Start_DMA+0x24>
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_ADC_Start_DMA+0x188>)
 80025b2:	e000      	b.n	80025b6 <HAL_ADC_Start_DMA+0x26>
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_ADC_Start_DMA+0x18c>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fd6a 	bl	8002090 <LL_ADC_GetMultimode>
 80025bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fdfb 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 809b 	bne.w	8002706 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_ADC_Start_DMA+0x4e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e096      	b.n	800270c <HAL_ADC_Start_DMA+0x17c>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a4d      	ldr	r2, [pc, #308]	; (8002720 <HAL_ADC_Start_DMA+0x190>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d008      	beq.n	8002602 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d002      	beq.n	8002602 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b09      	cmp	r3, #9
 8002600:	d17a      	bne.n	80026f8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fcec 	bl	8002fe0 <ADC_Enable>
 8002608:	4603      	mov	r3, r0
 800260a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d16d      	bne.n	80026ee <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a3a      	ldr	r2, [pc, #232]	; (8002714 <HAL_ADC_Start_DMA+0x184>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d009      	beq.n	8002644 <HAL_ADC_Start_DMA+0xb4>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a3b      	ldr	r2, [pc, #236]	; (8002724 <HAL_ADC_Start_DMA+0x194>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d002      	beq.n	8002640 <HAL_ADC_Start_DMA+0xb0>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	e003      	b.n	8002648 <HAL_ADC_Start_DMA+0xb8>
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_ADC_Start_DMA+0x198>)
 8002642:	e001      	b.n	8002648 <HAL_ADC_Start_DMA+0xb8>
 8002644:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4293      	cmp	r3, r2
 800264e:	d002      	beq.n	8002656 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	f023 0206 	bic.w	r2, r3, #6
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	661a      	str	r2, [r3, #96]	; 0x60
 800267a:	e002      	b.n	8002682 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	4a29      	ldr	r2, [pc, #164]	; (800272c <HAL_ADC_Start_DMA+0x19c>)
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	4a28      	ldr	r2, [pc, #160]	; (8002730 <HAL_ADC_Start_DMA+0x1a0>)
 8002690:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	4a27      	ldr	r2, [pc, #156]	; (8002734 <HAL_ADC_Start_DMA+0x1a4>)
 8002698:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	221c      	movs	r2, #28
 80026a0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0210 	orr.w	r2, r2, #16
 80026b8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3340      	adds	r3, #64	; 0x40
 80026d4:	4619      	mov	r1, r3
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f001 f85d 	bl	8003798 <HAL_DMA_Start_IT>
 80026de:	4603      	mov	r3, r0
 80026e0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fd55 	bl	8002196 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80026ec:	e00d      	b.n	800270a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80026f6:	e008      	b.n	800270a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002704:	e001      	b.n	800270a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002706:	2302      	movs	r3, #2
 8002708:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800270a:	7dfb      	ldrb	r3, [r7, #23]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	50000100 	.word	0x50000100
 8002718:	50000300 	.word	0x50000300
 800271c:	50000700 	.word	0x50000700
 8002720:	50000600 	.word	0x50000600
 8002724:	50000500 	.word	0x50000500
 8002728:	50000400 	.word	0x50000400
 800272c:	080030a5 	.word	0x080030a5
 8002730:	0800317d 	.word	0x0800317d
 8002734:	08003199 	.word	0x08003199

08002738 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0b6      	sub	sp, #216	; 0xd8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800277a:	2b01      	cmp	r3, #1
 800277c:	d102      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x24>
 800277e:	2302      	movs	r3, #2
 8002780:	f000 bc13 	b.w	8002faa <HAL_ADC_ConfigChannel+0x84a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fd14 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 83f3 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	f7ff fbf1 	bl	8001f92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fd02 	bl	80021be <LL_ADC_REG_IsConversionOngoing>
 80027ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fd0e 	bl	80021e4 <LL_ADC_INJ_IsConversionOngoing>
 80027c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 81d9 	bne.w	8002b88 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 81d4 	bne.w	8002b88 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027e8:	d10f      	bne.n	800280a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7ff fbf8 	bl	8001fea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb9f 	bl	8001f46 <LL_ADC_SetSamplingTimeCommonConfig>
 8002808:	e00e      	b.n	8002828 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	461a      	mov	r2, r3
 8002818:	f7ff fbe7 	bl	8001fea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fb8f 	bl	8001f46 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b04      	cmp	r3, #4
 8002848:	d022      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6919      	ldr	r1, [r3, #16]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800285a:	f7ff fae9 	bl	8001e30 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6919      	ldr	r1, [r3, #16]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	461a      	mov	r2, r3
 800286c:	f7ff fb35 	bl	8001eda <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	7f1b      	ldrb	r3, [r3, #28]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x126>
 8002880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002884:	e000      	b.n	8002888 <HAL_ADC_ConfigChannel+0x128>
 8002886:	2300      	movs	r3, #0
 8002888:	461a      	mov	r2, r3
 800288a:	f7ff fb41 	bl	8001f10 <LL_ADC_SetOffsetSaturation>
 800288e:	e17b      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff faee 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x15c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fae3 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 021f 	and.w	r2, r3, #31
 80028ba:	e01e      	b.n	80028fa <HAL_ADC_ConfigChannel+0x19a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fad8 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e004      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80028ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x1b2>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	e018      	b.n	8002944 <HAL_ADC_ConfigChannel+0x1e4>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800292a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800292e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e004      	b.n	8002944 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800293a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002944:	429a      	cmp	r2, r3
 8002946:	d106      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff faa7 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fa8b 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x222>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fa80 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	e01e      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x260>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fa75 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80029b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x278>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x2aa>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fa44 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2102      	movs	r1, #2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fa28 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x2e8>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2102      	movs	r1, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fa1d 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	e01e      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x326>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fa12 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e004      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x33e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	e016      	b.n	8002acc <HAL_ADC_ConfigChannel+0x36c>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e004      	b.n	8002acc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d106      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f9e3 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff f9c7 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x3aa>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2103      	movs	r1, #3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f9bc 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	e017      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x3da>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2103      	movs	r1, #3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f9b1 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x3f2>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0e9b      	lsrs	r3, r3, #26
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	e011      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x416>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d106      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2103      	movs	r1, #3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f98e 	bl	8001ea4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff faef 	bl	8002170 <LL_ADC_IsEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 813d 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f7ff fa4a 	bl	8002040 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4aa2      	ldr	r2, [pc, #648]	; (8002e3c <HAL_ADC_ConfigChannel+0x6dc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f040 812e 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x480>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	bf94      	ite	ls
 8002bd8:	2301      	movls	r3, #1
 8002bda:	2300      	movhi	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e019      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x4b4>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	bf94      	ite	ls
 8002c0e:	2301      	movls	r3, #1
 8002c10:	2300      	movhi	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d079      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x4d4>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	069b      	lsls	r3, r3, #26
 8002c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c32:	e015      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x500>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x520>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	e017      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x550>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e003      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	ea42 0103 	orr.w	r1, r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x576>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	051b      	lsls	r3, r3, #20
 8002cd4:	e018      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5a8>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e003      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	e07e      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d107      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x5c8>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	3301      	adds	r3, #1
 8002d20:	069b      	lsls	r3, r3, #26
 8002d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d26:	e015      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x5f4>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e003      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	069b      	lsls	r3, r3, #26
 8002d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x614>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	e017      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x644>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	61fb      	str	r3, [r7, #28]
  return result;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e003      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	ea42 0103 	orr.w	r1, r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x670>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0e9b      	lsrs	r3, r3, #26
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b1e      	subs	r3, #30
 8002dc8:	051b      	lsls	r3, r3, #20
 8002dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dce:	e01b      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x6a8>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	613b      	str	r3, [r7, #16]
  return result;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e003      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f003 021f 	and.w	r2, r3, #31
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b1e      	subs	r3, #30
 8002e02:	051b      	lsls	r3, r3, #20
 8002e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	6892      	ldr	r2, [r2, #8]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f7ff f8eb 	bl	8001fea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80be 	beq.w	8002f9e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e2a:	d004      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x6d6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_ADC_ConfigChannel+0x6e4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x6ec>
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <HAL_ADC_ConfigChannel+0x6e8>)
 8002e38:	e009      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x6ee>
 8002e3a:	bf00      	nop
 8002e3c:	407f0000 	.word	0x407f0000
 8002e40:	80080000 	.word	0x80080000
 8002e44:	50000100 	.word	0x50000100
 8002e48:	50000300 	.word	0x50000300
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_ADC_ConfigChannel+0x854>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe ffe0 	bl	8001e14 <LL_ADC_GetCommonPathInternalCh>
 8002e54:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_ADC_ConfigChannel+0x858>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x70c>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a55      	ldr	r2, [pc, #340]	; (8002fbc <HAL_ADC_ConfigChannel+0x85c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d13a      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d134      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e80:	d005      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x72e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4e      	ldr	r2, [pc, #312]	; (8002fc0 <HAL_ADC_ConfigChannel+0x860>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	f040 8085 	bne.w	8002f98 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e96:	d004      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0x742>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a49      	ldr	r2, [pc, #292]	; (8002fc4 <HAL_ADC_ConfigChannel+0x864>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x746>
 8002ea2:	4a49      	ldr	r2, [pc, #292]	; (8002fc8 <HAL_ADC_ConfigChannel+0x868>)
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x748>
 8002ea6:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <HAL_ADC_ConfigChannel+0x854>)
 8002ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f7fe ff9b 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb8:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <HAL_ADC_ConfigChannel+0x86c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	4a44      	ldr	r2, [pc, #272]	; (8002fd0 <HAL_ADC_ConfigChannel+0x870>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ed2:	e002      	b.n	8002eda <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f9      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee0:	e05a      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a3b      	ldr	r2, [pc, #236]	; (8002fd4 <HAL_ADC_ConfigChannel+0x874>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d125      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x7d8>
 8002eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d11f      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a31      	ldr	r2, [pc, #196]	; (8002fc4 <HAL_ADC_ConfigChannel+0x864>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d104      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x7ac>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_ADC_ConfigChannel+0x878>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d047      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f14:	d004      	beq.n	8002f20 <HAL_ADC_ConfigChannel+0x7c0>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <HAL_ADC_ConfigChannel+0x864>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x7c4>
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_ADC_ConfigChannel+0x868>)
 8002f22:	e000      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x7c6>
 8002f24:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <HAL_ADC_ConfigChannel+0x854>)
 8002f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7fe ff5c 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f36:	e031      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <HAL_ADC_ConfigChannel+0x87c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d12d      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d127      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_ADC_ConfigChannel+0x864>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f60:	d004      	beq.n	8002f6c <HAL_ADC_ConfigChannel+0x80c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_ADC_ConfigChannel+0x864>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x810>
 8002f6c:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_ADC_ConfigChannel+0x868>)
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x812>
 8002f70:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <HAL_ADC_ConfigChannel+0x854>)
 8002f72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f7fe ff36 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
 8002f82:	e00c      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f96:	e002      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	37d8      	adds	r7, #216	; 0xd8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	50000700 	.word	0x50000700
 8002fb8:	c3210000 	.word	0xc3210000
 8002fbc:	90c00010 	.word	0x90c00010
 8002fc0:	50000600 	.word	0x50000600
 8002fc4:	50000100 	.word	0x50000100
 8002fc8:	50000300 	.word	0x50000300
 8002fcc:	200000a8 	.word	0x200000a8
 8002fd0:	053e2d63 	.word	0x053e2d63
 8002fd4:	c7520000 	.word	0xc7520000
 8002fd8:	50000500 	.word	0x50000500
 8002fdc:	cb840000 	.word	0xcb840000

08002fe0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f8bf 	bl	8002170 <LL_ADC_IsEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d14d      	bne.n	8003094 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <ADC_Enable+0xc0>)
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	f043 0210 	orr.w	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e039      	b.n	8003096 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f88e 	bl	8002148 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800302c:	f7fe fe9e 	bl	8001d6c <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003032:	e028      	b.n	8003086 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f899 	bl	8002170 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f87d 	bl	8002148 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800304e:	f7fe fe8d 	bl	8001d6c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d914      	bls.n	8003086 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d00d      	beq.n	8003086 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	f043 0210 	orr.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d1cf      	bne.n	8003034 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	8000003f 	.word	0x8000003f

080030a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14b      	bne.n	8003156 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d021      	beq.n	800311c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe ff45 	bl	8001f6c <LL_ADC_REG_IsTriggerSourceSWStart>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d032      	beq.n	800314e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d12b      	bne.n	800314e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11f      	bne.n	800314e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	65da      	str	r2, [r3, #92]	; 0x5c
 800311a:	e018      	b.n	800314e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d111      	bne.n	800314e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7fe fa34 	bl	80015bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003154:	e00e      	b.n	8003174 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff faf2 	bl	800274c <HAL_ADC_ErrorCallback>
}
 8003168:	e004      	b.n	8003174 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff fad4 	bl	8002738 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fac4 	bl	800274c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <LL_ADC_IsEnabled>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <LL_ADC_IsEnabled+0x18>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <LL_ADC_IsEnabled+0x1a>
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d101      	bne.n	800320a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b0a1      	sub	sp, #132	; 0x84
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003232:	2302      	movs	r3, #2
 8003234:	e0e7      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800323e:	2300      	movs	r3, #0
 8003240:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003242:	2300      	movs	r3, #0
 8003244:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324e:	d102      	bne.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003250:	4b6f      	ldr	r3, [pc, #444]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	e009      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6e      	ldr	r2, [pc, #440]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d102      	bne.n	8003266 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003260:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	e001      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0be      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ffb1 	bl	80031f2 <LL_ADC_REG_IsConversionOngoing>
 8003290:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ffab 	bl	80031f2 <LL_ADC_REG_IsConversionOngoing>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80a0 	bne.w	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 809c 	bne.w	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b4:	d004      	beq.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a55      	ldr	r2, [pc, #340]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032c0:	4b56      	ldr	r3, [pc, #344]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032c2:	e000      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d04b      	beq.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032e2:	035b      	lsls	r3, r3, #13
 80032e4:	430b      	orrs	r3, r1
 80032e6:	431a      	orrs	r2, r3
 80032e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f4:	d004      	beq.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a45      	ldr	r2, [pc, #276]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10f      	bne.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003300:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003304:	f7ff ff62 	bl	80031cc <LL_ADC_IsEnabled>
 8003308:	4604      	mov	r4, r0
 800330a:	4841      	ldr	r0, [pc, #260]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800330c:	f7ff ff5e 	bl	80031cc <LL_ADC_IsEnabled>
 8003310:	4603      	mov	r3, r0
 8003312:	4323      	orrs	r3, r4
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e012      	b.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003320:	483c      	ldr	r0, [pc, #240]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003322:	f7ff ff53 	bl	80031cc <LL_ADC_IsEnabled>
 8003326:	4604      	mov	r4, r0
 8003328:	483b      	ldr	r0, [pc, #236]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800332a:	f7ff ff4f 	bl	80031cc <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	431c      	orrs	r4, r3
 8003332:	483c      	ldr	r0, [pc, #240]	; (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003334:	f7ff ff4a 	bl	80031cc <LL_ADC_IsEnabled>
 8003338:	4603      	mov	r3, r0
 800333a:	4323      	orrs	r3, r4
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d056      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003352:	f023 030f 	bic.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6811      	ldr	r1, [r2, #0]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6892      	ldr	r2, [r2, #8]
 800335e:	430a      	orrs	r2, r1
 8003360:	431a      	orrs	r2, r3
 8003362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003364:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003366:	e047      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003372:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800337c:	d004      	beq.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10f      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003388:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800338c:	f7ff ff1e 	bl	80031cc <LL_ADC_IsEnabled>
 8003390:	4604      	mov	r4, r0
 8003392:	481f      	ldr	r0, [pc, #124]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003394:	f7ff ff1a 	bl	80031cc <LL_ADC_IsEnabled>
 8003398:	4603      	mov	r3, r0
 800339a:	4323      	orrs	r3, r4
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e012      	b.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80033a8:	481a      	ldr	r0, [pc, #104]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033aa:	f7ff ff0f 	bl	80031cc <LL_ADC_IsEnabled>
 80033ae:	4604      	mov	r4, r0
 80033b0:	4819      	ldr	r0, [pc, #100]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033b2:	f7ff ff0b 	bl	80031cc <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	431c      	orrs	r4, r3
 80033ba:	481a      	ldr	r0, [pc, #104]	; (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033bc:	f7ff ff06 	bl	80031cc <LL_ADC_IsEnabled>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4323      	orrs	r3, r4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e2:	e009      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033f6:	e000      	b.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003402:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003406:	4618      	mov	r0, r3
 8003408:	3784      	adds	r7, #132	; 0x84
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}
 800340e:	bf00      	nop
 8003410:	50000100 	.word	0x50000100
 8003414:	50000400 	.word	0x50000400
 8003418:	50000500 	.word	0x50000500
 800341c:	50000300 	.word	0x50000300
 8003420:	50000700 	.word	0x50000700
 8003424:	50000600 	.word	0x50000600

08003428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003444:	4013      	ands	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	60d3      	str	r3, [r2, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <__NVIC_GetPriorityGrouping+0x18>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0307 	and.w	r3, r3, #7
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	2b00      	cmp	r3, #0
 800349c:	db0b      	blt.n	80034b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	4907      	ldr	r1, [pc, #28]	; (80034c4 <__NVIC_EnableIRQ+0x38>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2001      	movs	r0, #1
 80034ae:	fa00 f202 	lsl.w	r2, r0, r2
 80034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	e000e100 	.word	0xe000e100

080034c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	db0a      	blt.n	80034f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	490c      	ldr	r1, [pc, #48]	; (8003514 <__NVIC_SetPriority+0x4c>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	0112      	lsls	r2, r2, #4
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	440b      	add	r3, r1
 80034ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f0:	e00a      	b.n	8003508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4908      	ldr	r1, [pc, #32]	; (8003518 <__NVIC_SetPriority+0x50>)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	3b04      	subs	r3, #4
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	440b      	add	r3, r1
 8003506:	761a      	strb	r2, [r3, #24]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000e100 	.word	0xe000e100
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f1c3 0307 	rsb	r3, r3, #7
 8003536:	2b04      	cmp	r3, #4
 8003538:	bf28      	it	cs
 800353a:	2304      	movcs	r3, #4
 800353c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3304      	adds	r3, #4
 8003542:	2b06      	cmp	r3, #6
 8003544:	d902      	bls.n	800354c <NVIC_EncodePriority+0x30>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3b03      	subs	r3, #3
 800354a:	e000      	b.n	800354e <NVIC_EncodePriority+0x32>
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	f04f 32ff 	mov.w	r2, #4294967295
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	401a      	ands	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43d9      	mvns	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	4313      	orrs	r3, r2
         );
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003594:	d301      	bcc.n	800359a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003596:	2301      	movs	r3, #1
 8003598:	e00f      	b.n	80035ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <SysTick_Config+0x40>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a2:	210f      	movs	r1, #15
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	f7ff ff8e 	bl	80034c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <SysTick_Config+0x40>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b2:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <SysTick_Config+0x40>)
 80035b4:	2207      	movs	r2, #7
 80035b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	e000e010 	.word	0xe000e010

080035c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff29 	bl	8003428 <__NVIC_SetPriorityGrouping>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035ec:	f7ff ff40 	bl	8003470 <__NVIC_GetPriorityGrouping>
 80035f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f7ff ff90 	bl	800351c <NVIC_EncodePriority>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff5f 	bl	80034c8 <__NVIC_SetPriority>
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ff33 	bl	800348c <__NVIC_EnableIRQ>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ffa4 	bl	8003584 <SysTick_Config>
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e08d      	b.n	8003776 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	4b47      	ldr	r3, [pc, #284]	; (8003780 <HAL_DMA_Init+0x138>)
 8003662:	429a      	cmp	r2, r3
 8003664:	d80f      	bhi.n	8003686 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	4b45      	ldr	r3, [pc, #276]	; (8003784 <HAL_DMA_Init+0x13c>)
 800366e:	4413      	add	r3, r2
 8003670:	4a45      	ldr	r2, [pc, #276]	; (8003788 <HAL_DMA_Init+0x140>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a42      	ldr	r2, [pc, #264]	; (800378c <HAL_DMA_Init+0x144>)
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
 8003684:	e00e      	b.n	80036a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <HAL_DMA_Init+0x148>)
 800368e:	4413      	add	r3, r2
 8003690:	4a3d      	ldr	r2, [pc, #244]	; (8003788 <HAL_DMA_Init+0x140>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	009a      	lsls	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a3c      	ldr	r2, [pc, #240]	; (8003794 <HAL_DMA_Init+0x14c>)
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fa76 	bl	8003be8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003704:	d102      	bne.n	800370c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003720:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_DMA_Init+0x104>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b04      	cmp	r3, #4
 8003730:	d80c      	bhi.n	800374c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa96 	bl	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	e008      	b.n	800375e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40020407 	.word	0x40020407
 8003784:	bffdfff8 	.word	0xbffdfff8
 8003788:	cccccccd 	.word	0xcccccccd
 800378c:	40020000 	.word	0x40020000
 8003790:	bffdfbf8 	.word	0xbffdfbf8
 8003794:	40020400 	.word	0x40020400

08003798 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_Start_IT+0x20>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e066      	b.n	8003886 <HAL_DMA_Start_IT+0xee>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d155      	bne.n	8003878 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f9bb 	bl	8003b6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 020e 	orr.w	r2, r2, #14
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00f      	b.n	8003830 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 020a 	orr.w	r2, r2, #10
 800382e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003864:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e005      	b.n	8003884 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003880:	2302      	movs	r3, #2
 8003882:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d005      	beq.n	80038b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2204      	movs	r2, #4
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
 80038b0:	e037      	b.n	8003922 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 020e 	bic.w	r2, r2, #14
 80038c0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 021f 	and.w	r2, r3, #31
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038fe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003916:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003920:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d00d      	beq.n	8003974 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2204      	movs	r2, #4
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	e047      	b.n	8003a04 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 020e 	bic.w	r2, r2, #14
 8003982:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    }
  }
  return status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2204      	movs	r2, #4
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d026      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x7a>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d021      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d107      	bne.n	8003a62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0204 	bic.w	r2, r2, #4
 8003a60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f003 021f 	and.w	r2, r3, #31
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2104      	movs	r1, #4
 8003a70:	fa01 f202 	lsl.w	r2, r1, r2
 8003a74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d071      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a86:	e06c      	b.n	8003b62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2202      	movs	r2, #2
 8003a92:	409a      	lsls	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02e      	beq.n	8003afa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d029      	beq.n	8003afa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 020a 	bic.w	r2, r2, #10
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2102      	movs	r1, #2
 8003ada:	fa01 f202 	lsl.w	r2, r1, r2
 8003ade:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d038      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003af8:	e033      	b.n	8003b62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2208      	movs	r2, #8
 8003b04:	409a      	lsls	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d02a      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d025      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 020e 	bic.w	r2, r2, #14
 8003b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
}
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f003 021f 	and.w	r2, r3, #31
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d108      	bne.n	8003bcc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bca:	e007      	b.n	8003bdc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d802      	bhi.n	8003c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e001      	b.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	3b08      	subs	r3, #8
 8003c12:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40020407 	.word	0x40020407
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020820 	.word	0x40020820
 8003c5c:	cccccccd 	.word	0xcccccccd
 8003c60:	40020880 	.word	0x40020880

08003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2201      	movs	r2, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	1000823f 	.word	0x1000823f
 8003ca8:	40020940 	.word	0x40020940

08003cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cba:	e15a      	b.n	8003f72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 814c 	beq.w	8003f6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d005      	beq.n	8003cec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d130      	bne.n	8003d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d22:	2201      	movs	r2, #1
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 0201 	and.w	r2, r3, #1
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d017      	beq.n	8003d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	2203      	movs	r2, #3
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d123      	bne.n	8003dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	08da      	lsrs	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3208      	adds	r2, #8
 8003d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	220f      	movs	r2, #15
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	08da      	lsrs	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3208      	adds	r2, #8
 8003dd8:	6939      	ldr	r1, [r7, #16]
 8003dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	2203      	movs	r2, #3
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0203 	and.w	r2, r3, #3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80a6 	beq.w	8003f6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e20:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <HAL_GPIO_Init+0x2e4>)
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	4a5a      	ldr	r2, [pc, #360]	; (8003f90 <HAL_GPIO_Init+0x2e4>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e2c:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_GPIO_Init+0x2e4>)
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e38:	4a56      	ldr	r2, [pc, #344]	; (8003f94 <HAL_GPIO_Init+0x2e8>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e62:	d01f      	beq.n	8003ea4 <HAL_GPIO_Init+0x1f8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a4c      	ldr	r2, [pc, #304]	; (8003f98 <HAL_GPIO_Init+0x2ec>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d019      	beq.n	8003ea0 <HAL_GPIO_Init+0x1f4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a4b      	ldr	r2, [pc, #300]	; (8003f9c <HAL_GPIO_Init+0x2f0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_GPIO_Init+0x1f0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a4a      	ldr	r2, [pc, #296]	; (8003fa0 <HAL_GPIO_Init+0x2f4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00d      	beq.n	8003e98 <HAL_GPIO_Init+0x1ec>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a49      	ldr	r2, [pc, #292]	; (8003fa4 <HAL_GPIO_Init+0x2f8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <HAL_GPIO_Init+0x1e8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a48      	ldr	r2, [pc, #288]	; (8003fa8 <HAL_GPIO_Init+0x2fc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_GPIO_Init+0x1e4>
 8003e8c:	2305      	movs	r3, #5
 8003e8e:	e00a      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e90:	2306      	movs	r3, #6
 8003e92:	e008      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e94:	2304      	movs	r3, #4
 8003e96:	e006      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e004      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e002      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	f002 0203 	and.w	r2, r2, #3
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	4093      	lsls	r3, r2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb6:	4937      	ldr	r1, [pc, #220]	; (8003f94 <HAL_GPIO_Init+0x2e8>)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ec4:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f18:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f47f ae9d 	bne.w	8003cbc <HAL_GPIO_Init+0x10>
  }
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40010000 	.word	0x40010000
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	48000800 	.word	0x48000800
 8003fa0:	48000c00 	.word	0x48000c00
 8003fa4:	48001000 	.word	0x48001000
 8003fa8:	48001400 	.word	0x48001400
 8003fac:	40010400 	.word	0x40010400

08003fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fc0:	787b      	ldrb	r3, [r7, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d006      	beq.n	8004004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f806 	bl	8004010 <HAL_GPIO_EXTI_Callback>
  }
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40010400 	.word	0x40010400

08004010 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d141      	bne.n	80040ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004036:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d131      	bne.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004044:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800405c:	4a41      	ldr	r2, [pc, #260]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004062:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004064:	4b40      	ldr	r3, [pc, #256]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2232      	movs	r2, #50	; 0x32
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	4a3f      	ldr	r2, [pc, #252]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	0c9b      	lsrs	r3, r3, #18
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407a:	e002      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3b01      	subs	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d102      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f2      	bne.n	800407c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a2:	d158      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e057      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040b8:	e04d      	b.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c0:	d141      	bne.n	8004146 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d131      	bne.n	8004134 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d0:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d6:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e0:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2232      	movs	r2, #50	; 0x32
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	4a1c      	ldr	r2, [pc, #112]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	0c9b      	lsrs	r3, r3, #18
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004106:	e002      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b01      	subs	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d102      	bne.n	8004122 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f2      	bne.n	8004108 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d112      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e011      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004144:	e007      	b.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004154:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40007000 	.word	0x40007000
 8004168:	200000a8 	.word	0x200000a8
 800416c:	431bde83 	.word	0x431bde83

08004170 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a04      	ldr	r2, [pc, #16]	; (800418c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800417a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417e:	6093      	str	r3, [r2, #8]
}
 8004180:	bf00      	nop
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40007000 	.word	0x40007000

08004190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e306      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d075      	beq.n	800429a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ae:	4b97      	ldr	r3, [pc, #604]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b8:	4b94      	ldr	r3, [pc, #592]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_OscConfig+0x3e>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d002      	beq.n	80041d4 <HAL_RCC_OscConfig+0x44>
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d10b      	bne.n	80041ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	4b8d      	ldr	r3, [pc, #564]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d05b      	beq.n	8004298 <HAL_RCC_OscConfig+0x108>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d157      	bne.n	8004298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e2e1      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d106      	bne.n	8004204 <HAL_RCC_OscConfig+0x74>
 80041f6:	4b85      	ldr	r3, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a84      	ldr	r2, [pc, #528]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e01d      	b.n	8004240 <HAL_RCC_OscConfig+0xb0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x98>
 800420e:	4b7f      	ldr	r3, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7e      	ldr	r2, [pc, #504]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b7c      	ldr	r3, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7b      	ldr	r2, [pc, #492]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0xb0>
 8004228:	4b78      	ldr	r3, [pc, #480]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a77      	ldr	r2, [pc, #476]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	4b75      	ldr	r3, [pc, #468]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a74      	ldr	r2, [pc, #464]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 800423a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd fd90 	bl	8001d6c <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004250:	f7fd fd8c 	bl	8001d6c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e2a6      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004262:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0xc0>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd fd7c 	bl	8001d6c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7fd fd78 	bl	8001d6c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e292      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428a:	4b60      	ldr	r3, [pc, #384]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0xe8>
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d075      	beq.n	8004392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a6:	4b59      	ldr	r3, [pc, #356]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b0:	4b56      	ldr	r3, [pc, #344]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d102      	bne.n	80042c6 <HAL_RCC_OscConfig+0x136>
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_OscConfig+0x13c>
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d11f      	bne.n	800430c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042cc:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_OscConfig+0x154>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e265      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	4b49      	ldr	r3, [pc, #292]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	4946      	ldr	r1, [pc, #280]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042f8:	4b45      	ldr	r3, [pc, #276]	; (8004410 <HAL_RCC_OscConfig+0x280>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd fce9 	bl	8001cd4 <HAL_InitTick>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d043      	beq.n	8004390 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e251      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d023      	beq.n	800435c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004314:	4b3d      	ldr	r3, [pc, #244]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a3c      	ldr	r2, [pc, #240]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 800431a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd fd24 	bl	8001d6c <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004328:	f7fd fd20 	bl	8001d6c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e23a      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800433a:	4b34      	ldr	r3, [pc, #208]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004346:	4b31      	ldr	r3, [pc, #196]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	492d      	ldr	r1, [pc, #180]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
 800435a:	e01a      	b.n	8004392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd fd00 	bl	8001d6c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004370:	f7fd fcfc 	bl	8001d6c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e216      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004382:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x1e0>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d041      	beq.n	8004422 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ac:	4a17      	ldr	r2, [pc, #92]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd fcd9 	bl	8001d6c <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fd fcd5 	bl	8001d6c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e1ef      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0ef      	beq.n	80043be <HAL_RCC_OscConfig+0x22e>
 80043de:	e020      	b.n	8004422 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e6:	4a09      	ldr	r2, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x27c>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f0:	f7fd fcbc 	bl	8001d6c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f6:	e00d      	b.n	8004414 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f8:	f7fd fcb8 	bl	8001d6c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d906      	bls.n	8004414 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e1d2      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	200000ac 	.word	0x200000ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004414:	4b8c      	ldr	r3, [pc, #560]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ea      	bne.n	80043f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80a6 	beq.w	800457c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004430:	2300      	movs	r3, #0
 8004432:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004434:	4b84      	ldr	r3, [pc, #528]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_OscConfig+0x2b4>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x2b6>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00d      	beq.n	8004466 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	4b7f      	ldr	r3, [pc, #508]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	4a7e      	ldr	r2, [pc, #504]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	6593      	str	r3, [r2, #88]	; 0x58
 8004456:	4b7c      	ldr	r3, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004462:	2301      	movs	r3, #1
 8004464:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004466:	4b79      	ldr	r3, [pc, #484]	; (800464c <HAL_RCC_OscConfig+0x4bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d118      	bne.n	80044a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004472:	4b76      	ldr	r3, [pc, #472]	; (800464c <HAL_RCC_OscConfig+0x4bc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a75      	ldr	r2, [pc, #468]	; (800464c <HAL_RCC_OscConfig+0x4bc>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447e:	f7fd fc75 	bl	8001d6c <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004486:	f7fd fc71 	bl	8001d6c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e18b      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004498:	4b6c      	ldr	r3, [pc, #432]	; (800464c <HAL_RCC_OscConfig+0x4bc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d108      	bne.n	80044be <HAL_RCC_OscConfig+0x32e>
 80044ac:	4b66      	ldr	r3, [pc, #408]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	4a65      	ldr	r2, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044bc:	e024      	b.n	8004508 <HAL_RCC_OscConfig+0x378>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	d110      	bne.n	80044e8 <HAL_RCC_OscConfig+0x358>
 80044c6:	4b60      	ldr	r3, [pc, #384]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	4a5e      	ldr	r2, [pc, #376]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	f043 0304 	orr.w	r3, r3, #4
 80044d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d6:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	4a5a      	ldr	r2, [pc, #360]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e6:	e00f      	b.n	8004508 <HAL_RCC_OscConfig+0x378>
 80044e8:	4b57      	ldr	r3, [pc, #348]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	4a56      	ldr	r2, [pc, #344]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f8:	4b53      	ldr	r3, [pc, #332]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d016      	beq.n	800453e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fd fc2c 	bl	8001d6c <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004516:	e00a      	b.n	800452e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fd fc28 	bl	8001d6c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e140      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452e:	4b46      	ldr	r3, [pc, #280]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ed      	beq.n	8004518 <HAL_RCC_OscConfig+0x388>
 800453c:	e015      	b.n	800456a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fd fc15 	bl	8001d6c <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fd fc11 	bl	8001d6c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e129      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800455c:	4b3a      	ldr	r3, [pc, #232]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ed      	bne.n	8004546 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800456a:	7ffb      	ldrb	r3, [r7, #31]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b35      	ldr	r3, [pc, #212]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	4a34      	ldr	r2, [pc, #208]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d03c      	beq.n	8004602 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01c      	beq.n	80045ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004590:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004596:	4a2c      	ldr	r2, [pc, #176]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd fbe4 	bl	8001d6c <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045a8:	f7fd fbe0 	bl	8001d6c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0fa      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ba:	4b23      	ldr	r3, [pc, #140]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80045bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ef      	beq.n	80045a8 <HAL_RCC_OscConfig+0x418>
 80045c8:	e01b      	b.n	8004602 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ca:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d0:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045da:	f7fd fbc7 	bl	8001d6c <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e2:	f7fd fbc3 	bl	8001d6c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e0dd      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045f4:	4b14      	ldr	r3, [pc, #80]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ef      	bne.n	80045e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80d1 	beq.w	80047ae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	2b0c      	cmp	r3, #12
 8004616:	f000 808b 	beq.w	8004730 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d15e      	bne.n	80046e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a08      	ldr	r2, [pc, #32]	; (8004648 <HAL_RCC_OscConfig+0x4b8>)
 8004628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800462c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fd fb9d 	bl	8001d6c <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004634:	e00c      	b.n	8004650 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7fd fb99 	bl	8001d6c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d905      	bls.n	8004650 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0b3      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004650:	4b59      	ldr	r3, [pc, #356]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ec      	bne.n	8004636 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800465c:	4b56      	ldr	r3, [pc, #344]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	4b56      	ldr	r3, [pc, #344]	; (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004662:	4013      	ands	r3, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6a11      	ldr	r1, [r2, #32]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800466c:	3a01      	subs	r2, #1
 800466e:	0112      	lsls	r2, r2, #4
 8004670:	4311      	orrs	r1, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004676:	0212      	lsls	r2, r2, #8
 8004678:	4311      	orrs	r1, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800467e:	0852      	lsrs	r2, r2, #1
 8004680:	3a01      	subs	r2, #1
 8004682:	0552      	lsls	r2, r2, #21
 8004684:	4311      	orrs	r1, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800468a:	0852      	lsrs	r2, r2, #1
 800468c:	3a01      	subs	r2, #1
 800468e:	0652      	lsls	r2, r2, #25
 8004690:	4311      	orrs	r1, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004696:	06d2      	lsls	r2, r2, #27
 8004698:	430a      	orrs	r2, r1
 800469a:	4947      	ldr	r1, [pc, #284]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 800469c:	4313      	orrs	r3, r2
 800469e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a0:	4b45      	ldr	r3, [pc, #276]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a44      	ldr	r2, [pc, #272]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046ac:	4b42      	ldr	r3, [pc, #264]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a41      	ldr	r2, [pc, #260]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd fb58 	bl	8001d6c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd fb54 	bl	8001d6c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e06e      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d2:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x530>
 80046de:	e066      	b.n	80047ae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b35      	ldr	r3, [pc, #212]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a34      	ldr	r2, [pc, #208]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046ec:	4b32      	ldr	r3, [pc, #200]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a31      	ldr	r2, [pc, #196]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046f8:	4b2f      	ldr	r3, [pc, #188]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a2e      	ldr	r2, [pc, #184]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 80046fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004706:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd fb30 	bl	8001d6c <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fd fb2c 	bl	8001d6c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e046      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004722:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x580>
 800472e:	e03e      	b.n	80047ae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e039      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800473c:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <HAL_RCC_OscConfig+0x628>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0203 	and.w	r2, r3, #3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	429a      	cmp	r2, r3
 800474e:	d12c      	bne.n	80047aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	3b01      	subs	r3, #1
 800475c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d123      	bne.n	80047aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d11b      	bne.n	80047aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d113      	bne.n	80047aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	3b01      	subs	r3, #1
 8004790:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d109      	bne.n	80047aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	3b01      	subs	r3, #1
 80047a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d001      	beq.n	80047ae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	019f800c 	.word	0x019f800c

080047c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e11e      	b.n	8004a16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d8:	4b91      	ldr	r3, [pc, #580]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d910      	bls.n	8004808 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b8e      	ldr	r3, [pc, #568]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 020f 	bic.w	r2, r3, #15
 80047ee:	498c      	ldr	r1, [pc, #560]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b8a      	ldr	r3, [pc, #552]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e106      	b.n	8004a16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d073      	beq.n	80048fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d129      	bne.n	8004870 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481c:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0f4      	b.n	8004a16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800482c:	f000 f99e 	bl	8004b6c <RCC_GetSysClockFreqFromPLLSource>
 8004830:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4a7c      	ldr	r2, [pc, #496]	; (8004a28 <HAL_RCC_ClockConfig+0x268>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d93f      	bls.n	80048ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800483a:	4b7a      	ldr	r3, [pc, #488]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800484e:	2b00      	cmp	r3, #0
 8004850:	d033      	beq.n	80048ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004856:	2b00      	cmp	r3, #0
 8004858:	d12f      	bne.n	80048ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800485a:	4b72      	ldr	r3, [pc, #456]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004862:	4a70      	ldr	r2, [pc, #448]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e024      	b.n	80048ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d107      	bne.n	8004888 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004878:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0c6      	b.n	8004a16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004888:	4b66      	ldr	r3, [pc, #408]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0be      	b.n	8004a16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004898:	f000 f8ce 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 800489c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4a61      	ldr	r2, [pc, #388]	; (8004a28 <HAL_RCC_ClockConfig+0x268>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d909      	bls.n	80048ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048a6:	4b5f      	ldr	r3, [pc, #380]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ae:	4a5d      	ldr	r2, [pc, #372]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ba:	4b5a      	ldr	r3, [pc, #360]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 0203 	bic.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4957      	ldr	r1, [pc, #348]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048cc:	f7fd fa4e 	bl	8001d6c <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d4:	f7fd fa4a 	bl	8001d6c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e095      	b.n	8004a16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	4b4e      	ldr	r3, [pc, #312]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 020c 	and.w	r2, r3, #12
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d1eb      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d023      	beq.n	8004950 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004914:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a42      	ldr	r2, [pc, #264]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800491a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800491e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800492c:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004934:	4a3b      	ldr	r2, [pc, #236]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 8004936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800493a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4936      	ldr	r1, [pc, #216]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
 800494e:	e008      	b.n	8004962 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b80      	cmp	r3, #128	; 0x80
 8004954:	d105      	bne.n	8004962 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004956:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	4a32      	ldr	r2, [pc, #200]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 800495c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004960:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004962:	4b2f      	ldr	r3, [pc, #188]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d21d      	bcs.n	80049ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 020f 	bic.w	r2, r3, #15
 8004978:	4929      	ldr	r1, [pc, #164]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004980:	f7fd f9f4 	bl	8001d6c <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	e00a      	b.n	800499e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fd f9f0 	bl	8001d6c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e03b      	b.n	8004a16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_RCC_ClockConfig+0x260>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1ed      	bne.n	8004988 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4917      	ldr	r1, [pc, #92]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	490f      	ldr	r1, [pc, #60]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049ea:	f000 f825 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 80049ee:	4602      	mov	r2, r0
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <HAL_RCC_ClockConfig+0x264>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	490c      	ldr	r1, [pc, #48]	; (8004a2c <HAL_RCC_ClockConfig+0x26c>)
 80049fc:	5ccb      	ldrb	r3, [r1, r3]
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	fa22 f303 	lsr.w	r3, r2, r3
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <HAL_RCC_ClockConfig+0x270>)
 8004a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_RCC_ClockConfig+0x274>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fd f960 	bl	8001cd4 <HAL_InitTick>
 8004a14:	4603      	mov	r3, r0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40022000 	.word	0x40022000
 8004a24:	40021000 	.word	0x40021000
 8004a28:	04c4b400 	.word	0x04c4b400
 8004a2c:	08009b80 	.word	0x08009b80
 8004a30:	200000a8 	.word	0x200000a8
 8004a34:	200000ac 	.word	0x200000ac

08004a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d102      	bne.n	8004a50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a4a:	4b2a      	ldr	r3, [pc, #168]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	e047      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a50:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d102      	bne.n	8004a62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a5c:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	e03e      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a62:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d136      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a6e:	4b20      	ldr	r3, [pc, #128]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a78:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	3301      	adds	r3, #1
 8004a84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a96:	68d2      	ldr	r2, [r2, #12]
 8004a98:	0a12      	lsrs	r2, r2, #8
 8004a9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	617b      	str	r3, [r7, #20]
      break;
 8004aa4:	e00c      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aa6:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a10      	ldr	r2, [pc, #64]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab0:	68d2      	ldr	r2, [r2, #12]
 8004ab2:	0a12      	lsrs	r2, r2, #8
 8004ab4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
      break;
 8004abe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0e5b      	lsrs	r3, r3, #25
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	3301      	adds	r3, #1
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e001      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ae0:	693b      	ldr	r3, [r7, #16]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	016e3600 	.word	0x016e3600

08004afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b00:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b02:	681b      	ldr	r3, [r3, #0]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	200000a8 	.word	0x200000a8

08004b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b18:	f7ff fff0 	bl	8004afc <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	0a1b      	lsrs	r3, r3, #8
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4904      	ldr	r1, [pc, #16]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	08009b90 	.word	0x08009b90

08004b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b44:	f7ff ffda 	bl	8004afc <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0adb      	lsrs	r3, r3, #11
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4904      	ldr	r1, [pc, #16]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000
 8004b68:	08009b90 	.word	0x08009b90

08004b6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b72:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d10c      	bne.n	8004baa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b90:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b9a:	68d2      	ldr	r2, [r2, #12]
 8004b9c:	0a12      	lsrs	r2, r2, #8
 8004b9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	617b      	str	r3, [r7, #20]
    break;
 8004ba8:	e00c      	b.n	8004bc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bb4:	68d2      	ldr	r2, [r2, #12]
 8004bb6:	0a12      	lsrs	r2, r2, #8
 8004bb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
    break;
 8004bc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	0e5b      	lsrs	r3, r3, #25
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	3301      	adds	r3, #1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bde:	687b      	ldr	r3, [r7, #4]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	016e3600 	.word	0x016e3600
 8004bf4:	00f42400 	.word	0x00f42400

08004bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c00:	2300      	movs	r3, #0
 8004c02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c04:	2300      	movs	r3, #0
 8004c06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8098 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c16:	2300      	movs	r3, #0
 8004c18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1a:	4b43      	ldr	r3, [pc, #268]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10d      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c26:	4b40      	ldr	r3, [pc, #256]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2a:	4a3f      	ldr	r2, [pc, #252]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6593      	str	r3, [r2, #88]	; 0x58
 8004c32:	4b3d      	ldr	r3, [pc, #244]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c42:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a39      	ldr	r2, [pc, #228]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c4e:	f7fd f88d 	bl	8001d6c <HAL_GetTick>
 8004c52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c54:	e009      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c56:	f7fd f889 	bl	8001d6c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d902      	bls.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	74fb      	strb	r3, [r7, #19]
        break;
 8004c68:	e005      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c6a:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0ef      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c76:	7cfb      	ldrb	r3, [r7, #19]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d159      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c7c:	4b2a      	ldr	r3, [pc, #168]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d01e      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d019      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c98:	4b23      	ldr	r3, [pc, #140]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ca4:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb4:	4b1c      	ldr	r3, [pc, #112]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fd f849 	bl	8001d6c <HAL_GetTick>
 8004cda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cdc:	e00b      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fd f845 	bl	8001d6c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d902      	bls.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	74fb      	strb	r3, [r7, #19]
            break;
 8004cf4:	e006      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ec      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10b      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d0a:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	4903      	ldr	r1, [pc, #12]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d22:	7cfb      	ldrb	r3, [r7, #19]
 8004d24:	74bb      	strb	r3, [r7, #18]
 8004d26:	e005      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d34:	7c7b      	ldrb	r3, [r7, #17]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3a:	4ba7      	ldr	r3, [pc, #668]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	4aa6      	ldr	r2, [pc, #664]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d52:	4ba1      	ldr	r3, [pc, #644]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	f023 0203 	bic.w	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	499d      	ldr	r1, [pc, #628]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d74:	4b98      	ldr	r3, [pc, #608]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f023 020c 	bic.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4995      	ldr	r1, [pc, #596]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d96:	4b90      	ldr	r3, [pc, #576]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	498c      	ldr	r1, [pc, #560]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004db8:	4b87      	ldr	r3, [pc, #540]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	4984      	ldr	r1, [pc, #528]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dda:	4b7f      	ldr	r3, [pc, #508]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	497b      	ldr	r1, [pc, #492]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dfc:	4b76      	ldr	r3, [pc, #472]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	4973      	ldr	r1, [pc, #460]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e1e:	4b6e      	ldr	r3, [pc, #440]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	496a      	ldr	r1, [pc, #424]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e40:	4b65      	ldr	r3, [pc, #404]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	4962      	ldr	r1, [pc, #392]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e62:	4b5d      	ldr	r3, [pc, #372]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	4959      	ldr	r1, [pc, #356]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e84:	4b54      	ldr	r3, [pc, #336]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e8a:	f023 0203 	bic.w	r2, r3, #3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	4951      	ldr	r1, [pc, #324]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ea6:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	4948      	ldr	r1, [pc, #288]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ec8:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	4940      	ldr	r1, [pc, #256]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee8:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a3a      	ldr	r2, [pc, #232]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d015      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f00:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	4932      	ldr	r1, [pc, #200]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f20:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d015      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f38:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	4924      	ldr	r1, [pc, #144]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f56:	d105      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f58:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	4916      	ldr	r1, [pc, #88]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f90:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a10      	ldr	r2, [pc, #64]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d019      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	4908      	ldr	r1, [pc, #32]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc6:	d109      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc8:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a02      	ldr	r2, [pc, #8]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd2:	60d3      	str	r3, [r2, #12]
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d015      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fe8:	4b29      	ldr	r3, [pc, #164]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	4926      	ldr	r1, [pc, #152]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005006:	d105      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005008:	4b21      	ldr	r3, [pc, #132]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a20      	ldr	r2, [pc, #128]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005012:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d015      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502e:	4918      	ldr	r1, [pc, #96]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d105      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a12      	ldr	r2, [pc, #72]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d015      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005058:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800505a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800505e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	490a      	ldr	r1, [pc, #40]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005076:	d105      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4a04      	ldr	r2, [pc, #16]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800507e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005082:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005084:	7cbb      	ldrb	r3, [r7, #18]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000

08005094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e049      	b.n	800513a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fc fcc4 	bl	8001a48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f000 faf8 	bl	80056c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d109      	bne.n	8005168 <HAL_TIM_PWM_Start+0x24>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e03c      	b.n	80051e2 <HAL_TIM_PWM_Start+0x9e>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b04      	cmp	r3, #4
 800516c:	d109      	bne.n	8005182 <HAL_TIM_PWM_Start+0x3e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	bf14      	ite	ne
 800517a:	2301      	movne	r3, #1
 800517c:	2300      	moveq	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	e02f      	b.n	80051e2 <HAL_TIM_PWM_Start+0x9e>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d109      	bne.n	800519c <HAL_TIM_PWM_Start+0x58>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	e022      	b.n	80051e2 <HAL_TIM_PWM_Start+0x9e>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d109      	bne.n	80051b6 <HAL_TIM_PWM_Start+0x72>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	e015      	b.n	80051e2 <HAL_TIM_PWM_Start+0x9e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d109      	bne.n	80051d0 <HAL_TIM_PWM_Start+0x8c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	e008      	b.n	80051e2 <HAL_TIM_PWM_Start+0x9e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	bf14      	ite	ne
 80051dc:	2301      	movne	r3, #1
 80051de:	2300      	moveq	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e0a6      	b.n	8005338 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0xb6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f8:	e023      	b.n	8005242 <HAL_TIM_PWM_Start+0xfe>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xc6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005208:	e01b      	b.n	8005242 <HAL_TIM_PWM_Start+0xfe>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0xd6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005218:	e013      	b.n	8005242 <HAL_TIM_PWM_Start+0xfe>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d104      	bne.n	800522a <HAL_TIM_PWM_Start+0xe6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005228:	e00b      	b.n	8005242 <HAL_TIM_PWM_Start+0xfe>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b10      	cmp	r3, #16
 800522e:	d104      	bne.n	800523a <HAL_TIM_PWM_Start+0xf6>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005238:	e003      	b.n	8005242 <HAL_TIM_PWM_Start+0xfe>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fe0e 	bl	8005e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a3a      	ldr	r2, [pc, #232]	; (8005340 <HAL_TIM_PWM_Start+0x1fc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d018      	beq.n	800528c <HAL_TIM_PWM_Start+0x148>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a39      	ldr	r2, [pc, #228]	; (8005344 <HAL_TIM_PWM_Start+0x200>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <HAL_TIM_PWM_Start+0x148>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a37      	ldr	r2, [pc, #220]	; (8005348 <HAL_TIM_PWM_Start+0x204>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00e      	beq.n	800528c <HAL_TIM_PWM_Start+0x148>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a36      	ldr	r2, [pc, #216]	; (800534c <HAL_TIM_PWM_Start+0x208>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_TIM_PWM_Start+0x148>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a34      	ldr	r2, [pc, #208]	; (8005350 <HAL_TIM_PWM_Start+0x20c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_TIM_PWM_Start+0x148>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a33      	ldr	r2, [pc, #204]	; (8005354 <HAL_TIM_PWM_Start+0x210>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d101      	bne.n	8005290 <HAL_TIM_PWM_Start+0x14c>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_TIM_PWM_Start+0x14e>
 8005290:	2300      	movs	r3, #0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a25      	ldr	r2, [pc, #148]	; (8005340 <HAL_TIM_PWM_Start+0x1fc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d022      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1b2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d01d      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1b2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a26      	ldr	r2, [pc, #152]	; (8005358 <HAL_TIM_PWM_Start+0x214>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d018      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1b2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a24      	ldr	r2, [pc, #144]	; (800535c <HAL_TIM_PWM_Start+0x218>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1b2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a23      	ldr	r2, [pc, #140]	; (8005360 <HAL_TIM_PWM_Start+0x21c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1b2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a19      	ldr	r2, [pc, #100]	; (8005344 <HAL_TIM_PWM_Start+0x200>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1b2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <HAL_TIM_PWM_Start+0x204>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x1b2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_TIM_PWM_Start+0x210>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d115      	bne.n	8005322 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <HAL_TIM_PWM_Start+0x220>)
 80052fe:	4013      	ands	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d015      	beq.n	8005334 <HAL_TIM_PWM_Start+0x1f0>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d011      	beq.n	8005334 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	e008      	b.n	8005334 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e000      	b.n	8005336 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800
 8005354:	40015000 	.word	0x40015000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	00010007 	.word	0x00010007

08005368 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2200      	movs	r2, #0
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fd76 	bl	8005e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a40      	ldr	r2, [pc, #256]	; (8005488 <HAL_TIM_PWM_Stop+0x120>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d018      	beq.n	80053bc <HAL_TIM_PWM_Stop+0x54>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a3f      	ldr	r2, [pc, #252]	; (800548c <HAL_TIM_PWM_Stop+0x124>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <HAL_TIM_PWM_Stop+0x54>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <HAL_TIM_PWM_Stop+0x128>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00e      	beq.n	80053bc <HAL_TIM_PWM_Stop+0x54>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <HAL_TIM_PWM_Stop+0x12c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d009      	beq.n	80053bc <HAL_TIM_PWM_Stop+0x54>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <HAL_TIM_PWM_Stop+0x130>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_TIM_PWM_Stop+0x54>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a39      	ldr	r2, [pc, #228]	; (800549c <HAL_TIM_PWM_Stop+0x134>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_TIM_PWM_Stop+0x58>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_TIM_PWM_Stop+0x5a>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d017      	beq.n	80053f6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <HAL_TIM_PWM_Stop+0x8e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6a1a      	ldr	r2, [r3, #32]
 80053dc:	f244 4344 	movw	r3, #17476	; 0x4444
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_PWM_Stop+0x8e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <HAL_TIM_PWM_Stop+0xbe>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	f244 4344 	movw	r3, #17476	; 0x4444
 8005410:	4013      	ands	r3, r2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d107      	bne.n	8005426 <HAL_TIM_PWM_Stop+0xbe>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_TIM_PWM_Stop+0xce>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005434:	e023      	b.n	800547e <HAL_TIM_PWM_Stop+0x116>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d104      	bne.n	8005446 <HAL_TIM_PWM_Stop+0xde>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	e01b      	b.n	800547e <HAL_TIM_PWM_Stop+0x116>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d104      	bne.n	8005456 <HAL_TIM_PWM_Stop+0xee>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005454:	e013      	b.n	800547e <HAL_TIM_PWM_Stop+0x116>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Stop+0xfe>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005464:	e00b      	b.n	800547e <HAL_TIM_PWM_Stop+0x116>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b10      	cmp	r3, #16
 800546a:	d104      	bne.n	8005476 <HAL_TIM_PWM_Stop+0x10e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005474:	e003      	b.n	800547e <HAL_TIM_PWM_Stop+0x116>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800
 800549c:	40015000 	.word	0x40015000

080054a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e0ff      	b.n	80056be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b14      	cmp	r3, #20
 80054ca:	f200 80f0 	bhi.w	80056ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	08005529 	.word	0x08005529
 80054d8:	080056af 	.word	0x080056af
 80054dc:	080056af 	.word	0x080056af
 80054e0:	080056af 	.word	0x080056af
 80054e4:	08005569 	.word	0x08005569
 80054e8:	080056af 	.word	0x080056af
 80054ec:	080056af 	.word	0x080056af
 80054f0:	080056af 	.word	0x080056af
 80054f4:	080055ab 	.word	0x080055ab
 80054f8:	080056af 	.word	0x080056af
 80054fc:	080056af 	.word	0x080056af
 8005500:	080056af 	.word	0x080056af
 8005504:	080055eb 	.word	0x080055eb
 8005508:	080056af 	.word	0x080056af
 800550c:	080056af 	.word	0x080056af
 8005510:	080056af 	.word	0x080056af
 8005514:	0800562d 	.word	0x0800562d
 8005518:	080056af 	.word	0x080056af
 800551c:	080056af 	.word	0x080056af
 8005520:	080056af 	.word	0x080056af
 8005524:	0800566d 	.word	0x0800566d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f972 	bl	8005818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0208 	orr.w	r2, r2, #8
 8005542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0204 	bic.w	r2, r2, #4
 8005552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6999      	ldr	r1, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	619a      	str	r2, [r3, #24]
      break;
 8005566:	e0a5      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f9ec 	bl	800594c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6999      	ldr	r1, [r3, #24]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	619a      	str	r2, [r3, #24]
      break;
 80055a8:	e084      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fa5f 	bl	8005a74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0208 	orr.w	r2, r2, #8
 80055c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0204 	bic.w	r2, r2, #4
 80055d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69d9      	ldr	r1, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	61da      	str	r2, [r3, #28]
      break;
 80055e8:	e064      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fad1 	bl	8005b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69d9      	ldr	r1, [r3, #28]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	021a      	lsls	r2, r3, #8
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	61da      	str	r2, [r3, #28]
      break;
 800562a:	e043      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fb44 	bl	8005cc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0208 	orr.w	r2, r2, #8
 8005646:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0204 	bic.w	r2, r2, #4
 8005656:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800566a:	e023      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fb8e 	bl	8005d94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005686:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005696:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	021a      	lsls	r2, r3, #8
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056ac:	e002      	b.n	80056b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
      break;
 80056b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop

080056c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a46      	ldr	r2, [pc, #280]	; (80057f4 <TIM_Base_SetConfig+0x12c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d017      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d013      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a43      	ldr	r2, [pc, #268]	; (80057f8 <TIM_Base_SetConfig+0x130>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a42      	ldr	r2, [pc, #264]	; (80057fc <TIM_Base_SetConfig+0x134>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a41      	ldr	r2, [pc, #260]	; (8005800 <TIM_Base_SetConfig+0x138>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a40      	ldr	r2, [pc, #256]	; (8005804 <TIM_Base_SetConfig+0x13c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <TIM_Base_SetConfig+0x140>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d108      	bne.n	8005722 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a33      	ldr	r2, [pc, #204]	; (80057f4 <TIM_Base_SetConfig+0x12c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d023      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005730:	d01f      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a30      	ldr	r2, [pc, #192]	; (80057f8 <TIM_Base_SetConfig+0x130>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <TIM_Base_SetConfig+0x134>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2e      	ldr	r2, [pc, #184]	; (8005800 <TIM_Base_SetConfig+0x138>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2d      	ldr	r2, [pc, #180]	; (8005804 <TIM_Base_SetConfig+0x13c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2d      	ldr	r2, [pc, #180]	; (800580c <TIM_Base_SetConfig+0x144>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <TIM_Base_SetConfig+0x148>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <TIM_Base_SetConfig+0x14c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a26      	ldr	r2, [pc, #152]	; (8005808 <TIM_Base_SetConfig+0x140>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <TIM_Base_SetConfig+0x12c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a14      	ldr	r2, [pc, #80]	; (8005804 <TIM_Base_SetConfig+0x13c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a14      	ldr	r2, [pc, #80]	; (800580c <TIM_Base_SetConfig+0x144>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a13      	ldr	r2, [pc, #76]	; (8005810 <TIM_Base_SetConfig+0x148>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a12      	ldr	r2, [pc, #72]	; (8005814 <TIM_Base_SetConfig+0x14c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a0d      	ldr	r2, [pc, #52]	; (8005808 <TIM_Base_SetConfig+0x140>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d103      	bne.n	80057e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	615a      	str	r2, [r3, #20]
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40013400 	.word	0x40013400
 8005808:	40015000 	.word	0x40015000
 800580c:	40014000 	.word	0x40014000
 8005810:	40014400 	.word	0x40014400
 8005814:	40014800 	.word	0x40014800

08005818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0201 	bic.w	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0303 	bic.w	r3, r3, #3
 8005852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 0302 	bic.w	r3, r3, #2
 8005864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a30      	ldr	r2, [pc, #192]	; (8005934 <TIM_OC1_SetConfig+0x11c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <TIM_OC1_SetConfig+0x88>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a2f      	ldr	r2, [pc, #188]	; (8005938 <TIM_OC1_SetConfig+0x120>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00f      	beq.n	80058a0 <TIM_OC1_SetConfig+0x88>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a2e      	ldr	r2, [pc, #184]	; (800593c <TIM_OC1_SetConfig+0x124>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_OC1_SetConfig+0x88>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <TIM_OC1_SetConfig+0x128>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_OC1_SetConfig+0x88>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a2c      	ldr	r2, [pc, #176]	; (8005944 <TIM_OC1_SetConfig+0x12c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC1_SetConfig+0x88>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a2b      	ldr	r2, [pc, #172]	; (8005948 <TIM_OC1_SetConfig+0x130>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10c      	bne.n	80058ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0308 	bic.w	r3, r3, #8
 80058a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f023 0304 	bic.w	r3, r3, #4
 80058b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <TIM_OC1_SetConfig+0x11c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <TIM_OC1_SetConfig+0xd2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <TIM_OC1_SetConfig+0x120>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00f      	beq.n	80058ea <TIM_OC1_SetConfig+0xd2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1b      	ldr	r2, [pc, #108]	; (800593c <TIM_OC1_SetConfig+0x124>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00b      	beq.n	80058ea <TIM_OC1_SetConfig+0xd2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <TIM_OC1_SetConfig+0x128>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <TIM_OC1_SetConfig+0xd2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <TIM_OC1_SetConfig+0x12c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_OC1_SetConfig+0xd2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a18      	ldr	r2, [pc, #96]	; (8005948 <TIM_OC1_SetConfig+0x130>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d111      	bne.n	800590e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	40015000 	.word	0x40015000

0800594c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f023 0210 	bic.w	r2, r3, #16
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0320 	bic.w	r3, r3, #32
 800599a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a2c      	ldr	r2, [pc, #176]	; (8005a5c <TIM_OC2_SetConfig+0x110>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC2_SetConfig+0x74>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a2b      	ldr	r2, [pc, #172]	; (8005a60 <TIM_OC2_SetConfig+0x114>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC2_SetConfig+0x74>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a2a      	ldr	r2, [pc, #168]	; (8005a64 <TIM_OC2_SetConfig+0x118>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d10d      	bne.n	80059dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1f      	ldr	r2, [pc, #124]	; (8005a5c <TIM_OC2_SetConfig+0x110>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <TIM_OC2_SetConfig+0xc0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <TIM_OC2_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_OC2_SetConfig+0xc0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <TIM_OC2_SetConfig+0x11c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <TIM_OC2_SetConfig+0xc0>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <TIM_OC2_SetConfig+0x120>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_OC2_SetConfig+0xc0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <TIM_OC2_SetConfig+0x124>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_OC2_SetConfig+0xc0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <TIM_OC2_SetConfig+0x118>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d113      	bne.n	8005a34 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40013400 	.word	0x40013400
 8005a64:	40015000 	.word	0x40015000
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400
 8005a70:	40014800 	.word	0x40014800

08005a74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0303 	bic.w	r3, r3, #3
 8005aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2b      	ldr	r2, [pc, #172]	; (8005b80 <TIM_OC3_SetConfig+0x10c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_OC3_SetConfig+0x72>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <TIM_OC3_SetConfig+0x110>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_OC3_SetConfig+0x72>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <TIM_OC3_SetConfig+0x114>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d10d      	bne.n	8005b02 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <TIM_OC3_SetConfig+0x10c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <TIM_OC3_SetConfig+0xbe>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <TIM_OC3_SetConfig+0x110>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_OC3_SetConfig+0xbe>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <TIM_OC3_SetConfig+0x118>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_OC3_SetConfig+0xbe>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <TIM_OC3_SetConfig+0x11c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_OC3_SetConfig+0xbe>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <TIM_OC3_SetConfig+0x120>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_OC3_SetConfig+0xbe>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a16      	ldr	r2, [pc, #88]	; (8005b88 <TIM_OC3_SetConfig+0x114>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d113      	bne.n	8005b5a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40012c00 	.word	0x40012c00
 8005b84:	40013400 	.word	0x40013400
 8005b88:	40015000 	.word	0x40015000
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400
 8005b94:	40014800 	.word	0x40014800

08005b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	021b      	lsls	r3, r3, #8
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a2c      	ldr	r2, [pc, #176]	; (8005ca8 <TIM_OC4_SetConfig+0x110>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d007      	beq.n	8005c0c <TIM_OC4_SetConfig+0x74>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a2b      	ldr	r2, [pc, #172]	; (8005cac <TIM_OC4_SetConfig+0x114>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_OC4_SetConfig+0x74>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2a      	ldr	r2, [pc, #168]	; (8005cb0 <TIM_OC4_SetConfig+0x118>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d10d      	bne.n	8005c28 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	031b      	lsls	r3, r3, #12
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ca8 <TIM_OC4_SetConfig+0x110>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d013      	beq.n	8005c58 <TIM_OC4_SetConfig+0xc0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a1e      	ldr	r2, [pc, #120]	; (8005cac <TIM_OC4_SetConfig+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00f      	beq.n	8005c58 <TIM_OC4_SetConfig+0xc0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <TIM_OC4_SetConfig+0x11c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <TIM_OC4_SetConfig+0xc0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <TIM_OC4_SetConfig+0x120>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_OC4_SetConfig+0xc0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <TIM_OC4_SetConfig+0x124>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_OC4_SetConfig+0xc0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <TIM_OC4_SetConfig+0x118>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d113      	bne.n	8005c80 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	019b      	lsls	r3, r3, #6
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	019b      	lsls	r3, r3, #6
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40015000 	.word	0x40015000
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800

08005cc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	041b      	lsls	r3, r3, #16
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a19      	ldr	r2, [pc, #100]	; (8005d7c <TIM_OC5_SetConfig+0xbc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <TIM_OC5_SetConfig+0x82>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a18      	ldr	r2, [pc, #96]	; (8005d80 <TIM_OC5_SetConfig+0xc0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00f      	beq.n	8005d42 <TIM_OC5_SetConfig+0x82>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <TIM_OC5_SetConfig+0xc4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_OC5_SetConfig+0x82>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <TIM_OC5_SetConfig+0xc8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_OC5_SetConfig+0x82>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <TIM_OC5_SetConfig+0xcc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC5_SetConfig+0x82>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a14      	ldr	r2, [pc, #80]	; (8005d90 <TIM_OC5_SetConfig+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d109      	bne.n	8005d56 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	621a      	str	r2, [r3, #32]
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	40015000 	.word	0x40015000

08005d94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	051b      	lsls	r3, r3, #20
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <TIM_OC6_SetConfig+0xc0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <TIM_OC6_SetConfig+0x84>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <TIM_OC6_SetConfig+0xc4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00f      	beq.n	8005e18 <TIM_OC6_SetConfig+0x84>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <TIM_OC6_SetConfig+0xc8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00b      	beq.n	8005e18 <TIM_OC6_SetConfig+0x84>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <TIM_OC6_SetConfig+0xcc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_OC6_SetConfig+0x84>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <TIM_OC6_SetConfig+0xd0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_OC6_SetConfig+0x84>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <TIM_OC6_SetConfig+0xd4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d109      	bne.n	8005e2c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	029b      	lsls	r3, r3, #10
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40012c00 	.word	0x40012c00
 8005e58:	40013400 	.word	0x40013400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800
 8005e68:	40015000 	.word	0x40015000

08005e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2201      	movs	r2, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	401a      	ands	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <HAL_TIMEx_PWMN_Start+0x24>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	e022      	b.n	8005f22 <HAL_TIMEx_PWMN_Start+0x6a>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d109      	bne.n	8005ef6 <HAL_TIMEx_PWMN_Start+0x3e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	bf14      	ite	ne
 8005eee:	2301      	movne	r3, #1
 8005ef0:	2300      	moveq	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	e015      	b.n	8005f22 <HAL_TIMEx_PWMN_Start+0x6a>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d109      	bne.n	8005f10 <HAL_TIMEx_PWMN_Start+0x58>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	e008      	b.n	8005f22 <HAL_TIMEx_PWMN_Start+0x6a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	bf14      	ite	ne
 8005f1c:	2301      	movne	r3, #1
 8005f1e:	2300      	moveq	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e073      	b.n	8006012 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <HAL_TIMEx_PWMN_Start+0x82>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f38:	e013      	b.n	8005f62 <HAL_TIMEx_PWMN_Start+0xaa>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIMEx_PWMN_Start+0x92>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f48:	e00b      	b.n	8005f62 <HAL_TIMEx_PWMN_Start+0xaa>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIMEx_PWMN_Start+0xa2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f58:	e003      	b.n	8005f62 <HAL_TIMEx_PWMN_Start+0xaa>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2204      	movs	r2, #4
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fa1f 	bl	80063ae <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a25      	ldr	r2, [pc, #148]	; (800601c <HAL_TIMEx_PWMN_Start+0x164>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d022      	beq.n	8005fd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f92:	d01d      	beq.n	8005fd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a21      	ldr	r2, [pc, #132]	; (8006020 <HAL_TIMEx_PWMN_Start+0x168>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a20      	ldr	r2, [pc, #128]	; (8006024 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <HAL_TIMEx_PWMN_Start+0x170>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1d      	ldr	r2, [pc, #116]	; (800602c <HAL_TIMEx_PWMN_Start+0x174>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <HAL_TIMEx_PWMN_Start+0x178>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d115      	bne.n	8005ffc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	4b18      	ldr	r3, [pc, #96]	; (8006038 <HAL_TIMEx_PWMN_Start+0x180>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b06      	cmp	r3, #6
 8005fe0:	d015      	beq.n	800600e <HAL_TIMEx_PWMN_Start+0x156>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe8:	d011      	beq.n	800600e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 0201 	orr.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffa:	e008      	b.n	800600e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	e000      	b.n	8006010 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	40013400 	.word	0x40013400
 8006030:	40014000 	.word	0x40014000
 8006034:	40015000 	.word	0x40015000
 8006038:	00010007 	.word	0x00010007

0800603c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f9ad 	bl	80063ae <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6a1a      	ldr	r2, [r3, #32]
 800605a:	f241 1311 	movw	r3, #4369	; 0x1111
 800605e:	4013      	ands	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <HAL_TIMEx_PWMN_Stop+0x48>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	f244 4344 	movw	r3, #17476	; 0x4444
 800606e:	4013      	ands	r3, r2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d107      	bne.n	8006084 <HAL_TIMEx_PWMN_Stop+0x48>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006082:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	f241 1311 	movw	r3, #4369	; 0x1111
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10f      	bne.n	80060b4 <HAL_TIMEx_PWMN_Stop+0x78>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	f244 4344 	movw	r3, #17476	; 0x4444
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d107      	bne.n	80060b4 <HAL_TIMEx_PWMN_Stop+0x78>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0201 	bic.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <HAL_TIMEx_PWMN_Stop+0x88>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c2:	e013      	b.n	80060ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d104      	bne.n	80060d4 <HAL_TIMEx_PWMN_Stop+0x98>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060d2:	e00b      	b.n	80060ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d104      	bne.n	80060e4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060e2:	e003      	b.n	80060ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800610c:	2302      	movs	r3, #2
 800610e:	e074      	b.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a34      	ldr	r2, [pc, #208]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a33      	ldr	r2, [pc, #204]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a31      	ldr	r2, [pc, #196]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006154:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a21      	ldr	r2, [pc, #132]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d022      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006190:	d01d      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d018      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1d      	ldr	r2, [pc, #116]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1c      	ldr	r2, [pc, #112]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a18      	ldr	r2, [pc, #96]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a11      	ldr	r2, [pc, #68]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d10c      	bne.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40012c00 	.word	0x40012c00
 800620c:	40013400 	.word	0x40013400
 8006210:	40015000 	.word	0x40015000
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800
 800621c:	40000c00 	.word	0x40000c00
 8006220:	40014000 	.word	0x40014000

08006224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800623c:	2302      	movs	r3, #2
 800623e:	e096      	b.n	800636e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2f      	ldr	r2, [pc, #188]	; (800637c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d009      	beq.n	80062d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a2d      	ldr	r2, [pc, #180]	; (8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d106      	bne.n	80062e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a24      	ldr	r2, [pc, #144]	; (800637c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d009      	beq.n	8006304 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a22      	ldr	r2, [pc, #136]	; (8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d004      	beq.n	8006304 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a21      	ldr	r2, [pc, #132]	; (8006384 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d12b      	bne.n	800635c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	051b      	lsls	r3, r3, #20
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a11      	ldr	r2, [pc, #68]	; (800637c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d009      	beq.n	800634e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a10      	ldr	r2, [pc, #64]	; (8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d106      	bne.n	800635c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40013400 	.word	0x40013400
 8006384:	40015000 	.word	0x40015000

08006388 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b087      	sub	sp, #28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	2204      	movs	r2, #4
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	43db      	mvns	r3, r3
 80063d0:	401a      	ands	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1a      	ldr	r2, [r3, #32]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	fa01 f303 	lsl.w	r3, r1, r3
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e042      	b.n	8006490 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fb fbb7 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2224      	movs	r2, #36	; 0x24
 8006426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fc50 	bl	8006ce0 <UART_SetConfig>
 8006440:	4603      	mov	r3, r0
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e022      	b.n	8006490 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 ff40 	bl	80072d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 ffc7 	bl	800741c <UART_CheckIdleState>
 800648e:	4603      	mov	r3, r0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	f040 8083 	bne.w	80065ba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_UART_Transmit+0x28>
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e07b      	b.n	80065bc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Transmit+0x3a>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e074      	b.n	80065bc <HAL_UART_Transmit+0x124>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2221      	movs	r2, #33	; 0x21
 80064e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ea:	f7fb fc3f 	bl	8001d6c <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006508:	d108      	bne.n	800651c <HAL_UART_Transmit+0x84>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	e003      	b.n	8006524 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006520:	2300      	movs	r3, #0
 8006522:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800652c:	e02c      	b.n	8006588 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 ffba 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e039      	b.n	80065bc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800655c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	3302      	adds	r3, #2
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e007      	b.n	8006576 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	3301      	adds	r3, #1
 8006574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1cc      	bne.n	800652e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	2140      	movs	r1, #64	; 0x40
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 ff87 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e006      	b.n	80065bc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e000      	b.n	80065bc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80065ba:	2302      	movs	r3, #2
  }
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3720      	adds	r7, #32
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08a      	sub	sp, #40	; 0x28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d142      	bne.n	8006662 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_UART_Receive_IT+0x24>
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e03b      	b.n	8006664 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_UART_Receive_IT+0x36>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e034      	b.n	8006664 <HAL_UART_Receive_IT+0xa0>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a17      	ldr	r2, [pc, #92]	; (800666c <HAL_UART_Receive_IT+0xa8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01f      	beq.n	8006652 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d018      	beq.n	8006652 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	613b      	str	r3, [r7, #16]
   return(result);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	623b      	str	r3, [r7, #32]
 8006640:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	69f9      	ldr	r1, [r7, #28]
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	61bb      	str	r3, [r7, #24]
   return(result);
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	461a      	mov	r2, r3
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fff3 	bl	8007644 <UART_Start_Receive_IT>
 800665e:	4603      	mov	r3, r0
 8006660:	e000      	b.n	8006664 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006662:	2302      	movs	r3, #2
  }
}
 8006664:	4618      	mov	r0, r3
 8006666:	3728      	adds	r7, #40	; 0x28
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40008000 	.word	0x40008000

08006670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b0ba      	sub	sp, #232	; 0xe8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800669a:	f640 030f 	movw	r3, #2063	; 0x80f
 800669e:	4013      	ands	r3, r2
 80066a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11b      	bne.n	80066e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d015      	beq.n	80066e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 82d6 	beq.w	8006c86 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
      }
      return;
 80066e2:	e2d0      	b.n	8006c86 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 811f 	beq.w	800692c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066f2:	4b8b      	ldr	r3, [pc, #556]	; (8006920 <HAL_UART_IRQHandler+0x2b0>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d106      	bne.n	8006708 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066fe:	4b89      	ldr	r3, [pc, #548]	; (8006924 <HAL_UART_IRQHandler+0x2b4>)
 8006700:	4013      	ands	r3, r2
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8112 	beq.w	800692c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d011      	beq.n	8006738 <HAL_UART_IRQHandler+0xc8>
 8006714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2201      	movs	r2, #1
 8006726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672e:	f043 0201 	orr.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d011      	beq.n	8006768 <HAL_UART_IRQHandler+0xf8>
 8006744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2202      	movs	r2, #2
 8006756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800675e:	f043 0204 	orr.w	r2, r3, #4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d011      	beq.n	8006798 <HAL_UART_IRQHandler+0x128>
 8006774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2204      	movs	r2, #4
 8006786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800678e:	f043 0202 	orr.w	r2, r3, #2
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d017      	beq.n	80067d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d105      	bne.n	80067bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067b4:	4b5a      	ldr	r3, [pc, #360]	; (8006920 <HAL_UART_IRQHandler+0x2b0>)
 80067b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2208      	movs	r2, #8
 80067c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ca:	f043 0208 	orr.w	r2, r3, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d012      	beq.n	8006806 <HAL_UART_IRQHandler+0x196>
 80067e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00c      	beq.n	8006806 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 823c 	beq.w	8006c8a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d013      	beq.n	8006846 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800681e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800682a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800684c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d005      	beq.n	800686a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800685e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006862:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006866:	2b00      	cmp	r3, #0
 8006868:	d04f      	beq.n	800690a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 f814 	bl	8007898 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d141      	bne.n	8006902 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1d9      	bne.n	800687e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d013      	beq.n	80068fa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d6:	4a14      	ldr	r2, [pc, #80]	; (8006928 <HAL_UART_IRQHandler+0x2b8>)
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fd f82e 	bl	8003940 <HAL_DMA_Abort_IT>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d017      	beq.n	800691a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80068f4:	4610      	mov	r0, r2
 80068f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f8:	e00f      	b.n	800691a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f9da 	bl	8006cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006900:	e00b      	b.n	800691a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f9d6 	bl	8006cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006908:	e007      	b.n	800691a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f9d2 	bl	8006cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006918:	e1b7      	b.n	8006c8a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691a:	bf00      	nop
    return;
 800691c:	e1b5      	b.n	8006c8a <HAL_UART_IRQHandler+0x61a>
 800691e:	bf00      	nop
 8006920:	10000001 	.word	0x10000001
 8006924:	04000120 	.word	0x04000120
 8006928:	08007965 	.word	0x08007965

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006930:	2b01      	cmp	r3, #1
 8006932:	f040 814a 	bne.w	8006bca <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8143 	beq.w	8006bca <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 813c 	beq.w	8006bca <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2210      	movs	r2, #16
 8006958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	f040 80b5 	bne.w	8006ad4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006976:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8187 	beq.w	8006c8e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800698a:	429a      	cmp	r2, r3
 800698c:	f080 817f 	bcs.w	8006c8e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 8086 	bne.w	8006ab8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1da      	bne.n	80069ac <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e1      	bne.n	80069f6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e3      	bne.n	8006a32 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a88:	f023 0310 	bic.w	r3, r3, #16
 8006a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e4      	bne.n	8006a78 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fc feeb 	bl	800388e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8fb 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ad2:	e0dc      	b.n	8006c8e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80ce 	beq.w	8006c92 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80c9 	beq.w	8006c92 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b22:	647b      	str	r3, [r7, #68]	; 0x44
 8006b24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e4      	bne.n	8006b00 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	623b      	str	r3, [r7, #32]
   return(result);
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e1      	bne.n	8006b36 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0310 	bic.w	r3, r3, #16
 8006b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	69b9      	ldr	r1, [r7, #24]
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	e841 2300 	strex	r3, r2, [r1]
 8006bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e4      	bne.n	8006b86 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f880 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bc8:	e063      	b.n	8006c92 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x584>
 8006bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 fb57 	bl	80082a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf2:	e051      	b.n	8006c98 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d014      	beq.n	8006c2a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d105      	bne.n	8006c18 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d03a      	beq.n	8006c96 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
    }
    return;
 8006c28:	e035      	b.n	8006c96 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d009      	beq.n	8006c4a <HAL_UART_IRQHandler+0x5da>
 8006c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fea4 	bl	8007990 <UART_EndTransmit_IT>
    return;
 8006c48:	e026      	b.n	8006c98 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <HAL_UART_IRQHandler+0x5fa>
 8006c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fb30 	bl	80082c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c68:	e016      	b.n	8006c98 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d010      	beq.n	8006c98 <HAL_UART_IRQHandler+0x628>
 8006c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da0c      	bge.n	8006c98 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fb18 	bl	80082b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c84:	e008      	b.n	8006c98 <HAL_UART_IRQHandler+0x628>
      return;
 8006c86:	bf00      	nop
 8006c88:	e006      	b.n	8006c98 <HAL_UART_IRQHandler+0x628>
    return;
 8006c8a:	bf00      	nop
 8006c8c:	e004      	b.n	8006c98 <HAL_UART_IRQHandler+0x628>
      return;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_UART_IRQHandler+0x628>
      return;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_UART_IRQHandler+0x628>
    return;
 8006c96:	bf00      	nop
  }
}
 8006c98:	37e8      	adds	r7, #232	; 0xe8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop

08006ca0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce4:	b08c      	sub	sp, #48	; 0x30
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4baa      	ldr	r3, [pc, #680]	; (8006fb8 <UART_SetConfig+0x2d8>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a9f      	ldr	r2, [pc, #636]	; (8006fbc <UART_SetConfig+0x2dc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d004      	beq.n	8006d4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f023 010f 	bic.w	r1, r3, #15
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a90      	ldr	r2, [pc, #576]	; (8006fc0 <UART_SetConfig+0x2e0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d125      	bne.n	8006dd0 <UART_SetConfig+0xf0>
 8006d84:	4b8f      	ldr	r3, [pc, #572]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d81a      	bhi.n	8006dc8 <UART_SetConfig+0xe8>
 8006d92:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0xb8>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006db9 	.word	0x08006db9
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dae:	e116      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db6:	e112      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dbe:	e10e      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc6:	e10a      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dce:	e106      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a7c      	ldr	r2, [pc, #496]	; (8006fc8 <UART_SetConfig+0x2e8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d138      	bne.n	8006e4c <UART_SetConfig+0x16c>
 8006dda:	4b7a      	ldr	r3, [pc, #488]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b0c      	cmp	r3, #12
 8006de6:	d82d      	bhi.n	8006e44 <UART_SetConfig+0x164>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x110>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e25 	.word	0x08006e25
 8006df4:	08006e45 	.word	0x08006e45
 8006df8:	08006e45 	.word	0x08006e45
 8006dfc:	08006e45 	.word	0x08006e45
 8006e00:	08006e35 	.word	0x08006e35
 8006e04:	08006e45 	.word	0x08006e45
 8006e08:	08006e45 	.word	0x08006e45
 8006e0c:	08006e45 	.word	0x08006e45
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006e45 	.word	0x08006e45
 8006e1c:	08006e45 	.word	0x08006e45
 8006e20:	08006e3d 	.word	0x08006e3d
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e2a:	e0d8      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e32:	e0d4      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e3a:	e0d0      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e42:	e0cc      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4a:	e0c8      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a5e      	ldr	r2, [pc, #376]	; (8006fcc <UART_SetConfig+0x2ec>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d125      	bne.n	8006ea2 <UART_SetConfig+0x1c2>
 8006e56:	4b5b      	ldr	r3, [pc, #364]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e60:	2b30      	cmp	r3, #48	; 0x30
 8006e62:	d016      	beq.n	8006e92 <UART_SetConfig+0x1b2>
 8006e64:	2b30      	cmp	r3, #48	; 0x30
 8006e66:	d818      	bhi.n	8006e9a <UART_SetConfig+0x1ba>
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d00a      	beq.n	8006e82 <UART_SetConfig+0x1a2>
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d814      	bhi.n	8006e9a <UART_SetConfig+0x1ba>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <UART_SetConfig+0x19a>
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d008      	beq.n	8006e8a <UART_SetConfig+0x1aa>
 8006e78:	e00f      	b.n	8006e9a <UART_SetConfig+0x1ba>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e80:	e0ad      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e82:	2302      	movs	r3, #2
 8006e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e88:	e0a9      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e8a:	2304      	movs	r3, #4
 8006e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e90:	e0a5      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e92:	2308      	movs	r3, #8
 8006e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e98:	e0a1      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e9a:	2310      	movs	r3, #16
 8006e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea0:	e09d      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a4a      	ldr	r2, [pc, #296]	; (8006fd0 <UART_SetConfig+0x2f0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d125      	bne.n	8006ef8 <UART_SetConfig+0x218>
 8006eac:	4b45      	ldr	r3, [pc, #276]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb8:	d016      	beq.n	8006ee8 <UART_SetConfig+0x208>
 8006eba:	2bc0      	cmp	r3, #192	; 0xc0
 8006ebc:	d818      	bhi.n	8006ef0 <UART_SetConfig+0x210>
 8006ebe:	2b80      	cmp	r3, #128	; 0x80
 8006ec0:	d00a      	beq.n	8006ed8 <UART_SetConfig+0x1f8>
 8006ec2:	2b80      	cmp	r3, #128	; 0x80
 8006ec4:	d814      	bhi.n	8006ef0 <UART_SetConfig+0x210>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <UART_SetConfig+0x1f0>
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d008      	beq.n	8006ee0 <UART_SetConfig+0x200>
 8006ece:	e00f      	b.n	8006ef0 <UART_SetConfig+0x210>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed6:	e082      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ede:	e07e      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee6:	e07a      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ee8:	2308      	movs	r3, #8
 8006eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eee:	e076      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef6:	e072      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a35      	ldr	r2, [pc, #212]	; (8006fd4 <UART_SetConfig+0x2f4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d12a      	bne.n	8006f58 <UART_SetConfig+0x278>
 8006f02:	4b30      	ldr	r3, [pc, #192]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f10:	d01a      	beq.n	8006f48 <UART_SetConfig+0x268>
 8006f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f16:	d81b      	bhi.n	8006f50 <UART_SetConfig+0x270>
 8006f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f1c:	d00c      	beq.n	8006f38 <UART_SetConfig+0x258>
 8006f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f22:	d815      	bhi.n	8006f50 <UART_SetConfig+0x270>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <UART_SetConfig+0x250>
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2c:	d008      	beq.n	8006f40 <UART_SetConfig+0x260>
 8006f2e:	e00f      	b.n	8006f50 <UART_SetConfig+0x270>
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f36:	e052      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3e:	e04e      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f46:	e04a      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f4e:	e046      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f56:	e042      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <UART_SetConfig+0x2dc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d13a      	bne.n	8006fd8 <UART_SetConfig+0x2f8>
 8006f62:	4b18      	ldr	r3, [pc, #96]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f70:	d01a      	beq.n	8006fa8 <UART_SetConfig+0x2c8>
 8006f72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f76:	d81b      	bhi.n	8006fb0 <UART_SetConfig+0x2d0>
 8006f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f7c:	d00c      	beq.n	8006f98 <UART_SetConfig+0x2b8>
 8006f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f82:	d815      	bhi.n	8006fb0 <UART_SetConfig+0x2d0>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <UART_SetConfig+0x2b0>
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8c:	d008      	beq.n	8006fa0 <UART_SetConfig+0x2c0>
 8006f8e:	e00f      	b.n	8006fb0 <UART_SetConfig+0x2d0>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f96:	e022      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9e:	e01e      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fa6:	e01a      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fae:	e016      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb6:	e012      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006fb8:	cfff69f3 	.word	0xcfff69f3
 8006fbc:	40008000 	.word	0x40008000
 8006fc0:	40013800 	.word	0x40013800
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	40004400 	.word	0x40004400
 8006fcc:	40004800 	.word	0x40004800
 8006fd0:	40004c00 	.word	0x40004c00
 8006fd4:	40005000 	.word	0x40005000
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4aae      	ldr	r2, [pc, #696]	; (800729c <UART_SetConfig+0x5bc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	f040 8097 	bne.w	8007118 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d823      	bhi.n	800703a <UART_SetConfig+0x35a>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0x318>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	0800703b 	.word	0x0800703b
 8007000:	08007025 	.word	0x08007025
 8007004:	0800703b 	.word	0x0800703b
 8007008:	0800702b 	.word	0x0800702b
 800700c:	0800703b 	.word	0x0800703b
 8007010:	0800703b 	.word	0x0800703b
 8007014:	0800703b 	.word	0x0800703b
 8007018:	08007033 	.word	0x08007033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fd fd7a 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8007020:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007022:	e010      	b.n	8007046 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007024:	4b9e      	ldr	r3, [pc, #632]	; (80072a0 <UART_SetConfig+0x5c0>)
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007028:	e00d      	b.n	8007046 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800702a:	f7fd fd05 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 800702e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007030:	e009      	b.n	8007046 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007038:	e005      	b.n	8007046 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007044:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8130 	beq.w	80072ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	4a94      	ldr	r2, [pc, #592]	; (80072a4 <UART_SetConfig+0x5c4>)
 8007054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007058:	461a      	mov	r2, r3
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007060:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4413      	add	r3, r2
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	429a      	cmp	r2, r3
 8007070:	d305      	bcc.n	800707e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	429a      	cmp	r2, r3
 800707c:	d903      	bls.n	8007086 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007084:	e113      	b.n	80072ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	2200      	movs	r2, #0
 800708a:	60bb      	str	r3, [r7, #8]
 800708c:	60fa      	str	r2, [r7, #12]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	4a84      	ldr	r2, [pc, #528]	; (80072a4 <UART_SetConfig+0x5c4>)
 8007094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007098:	b29b      	uxth	r3, r3
 800709a:	2200      	movs	r2, #0
 800709c:	603b      	str	r3, [r7, #0]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070a8:	f7f9 fd18 	bl	8000adc <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4610      	mov	r0, r2
 80070b2:	4619      	mov	r1, r3
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	020b      	lsls	r3, r1, #8
 80070be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070c2:	0202      	lsls	r2, r0, #8
 80070c4:	6979      	ldr	r1, [r7, #20]
 80070c6:	6849      	ldr	r1, [r1, #4]
 80070c8:	0849      	lsrs	r1, r1, #1
 80070ca:	2000      	movs	r0, #0
 80070cc:	460c      	mov	r4, r1
 80070ce:	4605      	mov	r5, r0
 80070d0:	eb12 0804 	adds.w	r8, r2, r4
 80070d4:	eb43 0905 	adc.w	r9, r3, r5
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	469a      	mov	sl, r3
 80070e0:	4693      	mov	fp, r2
 80070e2:	4652      	mov	r2, sl
 80070e4:	465b      	mov	r3, fp
 80070e6:	4640      	mov	r0, r8
 80070e8:	4649      	mov	r1, r9
 80070ea:	f7f9 fcf7 	bl	8000adc <__aeabi_uldivmod>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4613      	mov	r3, r2
 80070f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070fc:	d308      	bcc.n	8007110 <UART_SetConfig+0x430>
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007104:	d204      	bcs.n	8007110 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e0ce      	b.n	80072ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007116:	e0ca      	b.n	80072ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007120:	d166      	bne.n	80071f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007126:	2b08      	cmp	r3, #8
 8007128:	d827      	bhi.n	800717a <UART_SetConfig+0x49a>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0x450>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007155 	.word	0x08007155
 8007134:	0800715d 	.word	0x0800715d
 8007138:	08007165 	.word	0x08007165
 800713c:	0800717b 	.word	0x0800717b
 8007140:	0800716b 	.word	0x0800716b
 8007144:	0800717b 	.word	0x0800717b
 8007148:	0800717b 	.word	0x0800717b
 800714c:	0800717b 	.word	0x0800717b
 8007150:	08007173 	.word	0x08007173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007154:	f7fd fcde 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800715a:	e014      	b.n	8007186 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800715c:	f7fd fcf0 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8007160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007162:	e010      	b.n	8007186 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007164:	4b4e      	ldr	r3, [pc, #312]	; (80072a0 <UART_SetConfig+0x5c0>)
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007168:	e00d      	b.n	8007186 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800716a:	f7fd fc65 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 800716e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007170:	e009      	b.n	8007186 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007178:	e005      	b.n	8007186 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8090 	beq.w	80072ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	4a44      	ldr	r2, [pc, #272]	; (80072a4 <UART_SetConfig+0x5c4>)
 8007194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007198:	461a      	mov	r2, r3
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a0:	005a      	lsls	r2, r3, #1
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	085b      	lsrs	r3, r3, #1
 80071a8:	441a      	add	r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d916      	bls.n	80071e8 <UART_SetConfig+0x508>
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c0:	d212      	bcs.n	80071e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f023 030f 	bic.w	r3, r3, #15
 80071ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	085b      	lsrs	r3, r3, #1
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	8bfb      	ldrh	r3, [r7, #30]
 80071da:	4313      	orrs	r3, r2
 80071dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	8bfa      	ldrh	r2, [r7, #30]
 80071e4:	60da      	str	r2, [r3, #12]
 80071e6:	e062      	b.n	80072ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071ee:	e05e      	b.n	80072ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d828      	bhi.n	800724a <UART_SetConfig+0x56a>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x520>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007225 	.word	0x08007225
 8007204:	0800722d 	.word	0x0800722d
 8007208:	08007235 	.word	0x08007235
 800720c:	0800724b 	.word	0x0800724b
 8007210:	0800723b 	.word	0x0800723b
 8007214:	0800724b 	.word	0x0800724b
 8007218:	0800724b 	.word	0x0800724b
 800721c:	0800724b 	.word	0x0800724b
 8007220:	08007243 	.word	0x08007243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007224:	f7fd fc76 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8007228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800722a:	e014      	b.n	8007256 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800722c:	f7fd fc88 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8007230:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007232:	e010      	b.n	8007256 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007234:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <UART_SetConfig+0x5c0>)
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007238:	e00d      	b.n	8007256 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723a:	f7fd fbfd 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007240:	e009      	b.n	8007256 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007248:	e005      	b.n	8007256 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007254:	bf00      	nop
    }

    if (pclk != 0U)
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d028      	beq.n	80072ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	4a10      	ldr	r2, [pc, #64]	; (80072a4 <UART_SetConfig+0x5c4>)
 8007262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007266:	461a      	mov	r2, r3
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	fbb3 f2f2 	udiv	r2, r3, r2
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	441a      	add	r2, r3
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	fbb2 f3f3 	udiv	r3, r2, r3
 800727e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	2b0f      	cmp	r3, #15
 8007284:	d910      	bls.n	80072a8 <UART_SetConfig+0x5c8>
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728c:	d20c      	bcs.n	80072a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	b29a      	uxth	r2, r3
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60da      	str	r2, [r3, #12]
 8007298:	e009      	b.n	80072ae <UART_SetConfig+0x5ce>
 800729a:	bf00      	nop
 800729c:	40008000 	.word	0x40008000
 80072a0:	00f42400 	.word	0x00f42400
 80072a4:	08009b98 	.word	0x08009b98
      }
      else
      {
        ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80072ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3730      	adds	r7, #48	; 0x30
 80072d2:	46bd      	mov	sp, r7
 80072d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01a      	beq.n	80073ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d6:	d10a      	bne.n	80073ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	605a      	str	r2, [r3, #4]
  }
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af02      	add	r7, sp, #8
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800742c:	f7fa fc9e 	bl	8001d6c <HAL_GetTick>
 8007430:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b08      	cmp	r3, #8
 800743e:	d10e      	bne.n	800745e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f82f 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e025      	b.n	80074aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d10e      	bne.n	800748a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800746c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f819 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e00f      	b.n	80074aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b09c      	sub	sp, #112	; 0x70
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c2:	e0a9      	b.n	8007618 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	f000 80a5 	beq.w	8007618 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ce:	f7fa fc4d 	bl	8001d6c <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80074de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d140      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074f8:	667b      	str	r3, [r7, #100]	; 0x64
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007504:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	663b      	str	r3, [r7, #96]	; 0x60
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007536:	64ba      	str	r2, [r7, #72]	; 0x48
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800753c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2220      	movs	r2, #32
 8007556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e069      	b.n	800763a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d051      	beq.n	8007618 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007582:	d149      	bne.n	8007618 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800758c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
 80075ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e6      	bne.n	800758e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3308      	adds	r3, #8
 80075c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	613b      	str	r3, [r7, #16]
   return(result);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f023 0301 	bic.w	r3, r3, #1
 80075d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3308      	adds	r3, #8
 80075de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075e0:	623a      	str	r2, [r7, #32]
 80075e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	69f9      	ldr	r1, [r7, #28]
 80075e6:	6a3a      	ldr	r2, [r7, #32]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e5      	bne.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e010      	b.n	800763a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69da      	ldr	r2, [r3, #28]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4013      	ands	r3, r2
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	429a      	cmp	r2, r3
 8007626:	bf0c      	ite	eq
 8007628:	2301      	moveq	r3, #1
 800762a:	2300      	movne	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	429a      	cmp	r2, r3
 8007634:	f43f af46 	beq.w	80074c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3770      	adds	r7, #112	; 0x70
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007644:	b480      	push	{r7}
 8007646:	b0a3      	sub	sp, #140	; 0x8c
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	88fa      	ldrh	r2, [r7, #6]
 8007664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007676:	d10e      	bne.n	8007696 <UART_Start_Receive_IT+0x52>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <UART_Start_Receive_IT+0x48>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007686:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800768a:	e02d      	b.n	80076e8 <UART_Start_Receive_IT+0xa4>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	22ff      	movs	r2, #255	; 0xff
 8007690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007694:	e028      	b.n	80076e8 <UART_Start_Receive_IT+0xa4>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10d      	bne.n	80076ba <UART_Start_Receive_IT+0x76>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d104      	bne.n	80076b0 <UART_Start_Receive_IT+0x6c>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	22ff      	movs	r2, #255	; 0xff
 80076aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076ae:	e01b      	b.n	80076e8 <UART_Start_Receive_IT+0xa4>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	227f      	movs	r2, #127	; 0x7f
 80076b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076b8:	e016      	b.n	80076e8 <UART_Start_Receive_IT+0xa4>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076c2:	d10d      	bne.n	80076e0 <UART_Start_Receive_IT+0x9c>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <UART_Start_Receive_IT+0x92>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	227f      	movs	r2, #127	; 0x7f
 80076d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076d4:	e008      	b.n	80076e8 <UART_Start_Receive_IT+0xa4>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	223f      	movs	r2, #63	; 0x3f
 80076da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076de:	e003      	b.n	80076e8 <UART_Start_Receive_IT+0xa4>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2222      	movs	r2, #34	; 0x22
 80076f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800771c:	673a      	str	r2, [r7, #112]	; 0x70
 800771e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007722:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800772a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e3      	bne.n	80076f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007738:	d153      	bne.n	80077e2 <UART_Start_Receive_IT+0x19e>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	429a      	cmp	r2, r3
 8007744:	d34d      	bcc.n	80077e2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774e:	d107      	bne.n	8007760 <UART_Start_Receive_IT+0x11c>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d103      	bne.n	8007760 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4a4b      	ldr	r2, [pc, #300]	; (8007888 <UART_Start_Receive_IT+0x244>)
 800775c:	671a      	str	r2, [r3, #112]	; 0x70
 800775e:	e002      	b.n	8007766 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a4a      	ldr	r2, [pc, #296]	; (800788c <UART_Start_Receive_IT+0x248>)
 8007764:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01a      	beq.n	80077ac <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800778a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800779a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800779e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e4      	bne.n	8007776 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80077ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_Start_Receive_IT+0x168>
 80077e0:	e04a      	b.n	8007878 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d107      	bne.n	80077fc <UART_Start_Receive_IT+0x1b8>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a26      	ldr	r2, [pc, #152]	; (8007890 <UART_Start_Receive_IT+0x24c>)
 80077f8:	671a      	str	r2, [r3, #112]	; 0x70
 80077fa:	e002      	b.n	8007802 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a25      	ldr	r2, [pc, #148]	; (8007894 <UART_Start_Receive_IT+0x250>)
 8007800:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d019      	beq.n	8007846 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007826:	677b      	str	r3, [r7, #116]	; 0x74
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
 8007832:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e6      	bne.n	8007812 <UART_Start_Receive_IT+0x1ce>
 8007844:	e018      	b.n	8007878 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	613b      	str	r3, [r7, #16]
   return(result);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f043 0320 	orr.w	r3, r3, #32
 800785a:	67bb      	str	r3, [r7, #120]	; 0x78
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007864:	623b      	str	r3, [r7, #32]
 8007866:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	69f9      	ldr	r1, [r7, #28]
 800786a:	6a3a      	ldr	r2, [r7, #32]
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	61bb      	str	r3, [r7, #24]
   return(result);
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e6      	bne.n	8007846 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	378c      	adds	r7, #140	; 0x8c
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	08007fa1 	.word	0x08007fa1
 800788c:	08007ca9 	.word	0x08007ca9
 8007890:	08007b47 	.word	0x08007b47
 8007894:	080079e7 	.word	0x080079e7

08007898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b095      	sub	sp, #84	; 0x54
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078be:	643b      	str	r3, [r7, #64]	; 0x40
 80078c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e6      	bne.n	80078a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3308      	adds	r3, #8
 80078f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e3      	bne.n	80078d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790e:	2b01      	cmp	r3, #1
 8007910:	d118      	bne.n	8007944 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f023 0310 	bic.w	r3, r3, #16
 8007926:	647b      	str	r3, [r7, #68]	; 0x44
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6979      	ldr	r1, [r7, #20]
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	613b      	str	r3, [r7, #16]
   return(result);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2220      	movs	r2, #32
 8007948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007958:	bf00      	nop
 800795a:	3754      	adds	r7, #84	; 0x54
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff f996 	bl	8006cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	61bb      	str	r3, [r7, #24]
 80079b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6979      	ldr	r1, [r7, #20]
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	613b      	str	r3, [r7, #16]
   return(result);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e6      	bne.n	8007998 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff f961 	bl	8006ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079de:	bf00      	nop
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b096      	sub	sp, #88	; 0x58
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fe:	2b22      	cmp	r3, #34	; 0x22
 8007a00:	f040 8095 	bne.w	8007b2e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a0e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007a12:	b2d9      	uxtb	r1, r3
 8007a14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1e:	400a      	ands	r2, r1
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d178      	bne.n	8007b3e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a60:	653b      	str	r3, [r7, #80]	; 0x50
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e6      	bne.n	8007a4c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3308      	adds	r3, #8
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	f023 0301 	bic.w	r3, r3, #1
 8007a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e5      	bne.n	8007a7e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d12e      	bne.n	8007b26 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	69b9      	ldr	r1, [r7, #24]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	617b      	str	r3, [r7, #20]
   return(result);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e6      	bne.n	8007ace <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b10      	cmp	r3, #16
 8007b0c:	d103      	bne.n	8007b16 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2210      	movs	r2, #16
 8007b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff f8d2 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b24:	e00b      	b.n	8007b3e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7f9 fd32 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 8007b2c:	e007      	b.n	8007b3e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699a      	ldr	r2, [r3, #24]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f042 0208 	orr.w	r2, r2, #8
 8007b3c:	619a      	str	r2, [r3, #24]
}
 8007b3e:	bf00      	nop
 8007b40:	3758      	adds	r7, #88	; 0x58
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b096      	sub	sp, #88	; 0x58
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5e:	2b22      	cmp	r3, #34	; 0x22
 8007b60:	f040 8095 	bne.w	8007c8e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b72:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b74:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007b78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b88:	1c9a      	adds	r2, r3, #2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d178      	bne.n	8007c9e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bca:	643b      	str	r3, [r7, #64]	; 0x40
 8007bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e6      	bne.n	8007bac <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3308      	adds	r3, #8
 8007be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	f023 0301 	bic.w	r3, r3, #1
 8007bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d12e      	bne.n	8007c86 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f023 0310 	bic.w	r3, r3, #16
 8007c42:	647b      	str	r3, [r7, #68]	; 0x44
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c4c:	61bb      	str	r3, [r7, #24]
 8007c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6979      	ldr	r1, [r7, #20]
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	e841 2300 	strex	r3, r2, [r1]
 8007c58:	613b      	str	r3, [r7, #16]
   return(result);
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e6      	bne.n	8007c2e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d103      	bne.n	8007c76 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2210      	movs	r2, #16
 8007c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff f822 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c84:	e00b      	b.n	8007c9e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7f9 fc82 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 8007c8c:	e007      	b.n	8007c9e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0208 	orr.w	r2, r2, #8
 8007c9c:	619a      	str	r2, [r3, #24]
}
 8007c9e:	bf00      	nop
 8007ca0:	3758      	adds	r7, #88	; 0x58
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b0a6      	sub	sp, #152	; 0x98
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cb6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cde:	2b22      	cmp	r3, #34	; 0x22
 8007ce0:	f040 814f 	bne.w	8007f82 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cee:	e0f6      	b.n	8007ede <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cfa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007cfe:	b2d9      	uxtb	r1, r3
 8007d00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0a:	400a      	ands	r2, r1
 8007d0c:	b2d2      	uxtb	r2, r2
 8007d0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d053      	beq.n	8007dea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d011      	beq.n	8007d72 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d68:	f043 0201 	orr.w	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d011      	beq.n	8007da2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d98:	f043 0204 	orr.w	r2, r3, #4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d011      	beq.n	8007dd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc8:	f043 0202 	orr.w	r2, r3, #2
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d006      	beq.n	8007dea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7fe ff69 	bl	8006cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d173      	bne.n	8007ede <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dfe:	e853 3f00 	ldrex	r3, [r3]
 8007e02:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e18:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e1a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007e1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e4      	bne.n	8007df6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3308      	adds	r3, #8
 8007e32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e42:	f023 0301 	bic.w	r3, r3, #1
 8007e46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e50:	657a      	str	r2, [r7, #84]	; 0x54
 8007e52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e3      	bne.n	8007e2c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d12e      	bne.n	8007ed8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f023 0310 	bic.w	r3, r3, #16
 8007e94:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e6      	bne.n	8007e80 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b10      	cmp	r3, #16
 8007ebe:	d103      	bne.n	8007ec8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2210      	movs	r2, #16
 8007ec6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7fe fef9 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
 8007ed6:	e002      	b.n	8007ede <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7f9 fb59 	bl	8001590 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ede:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d006      	beq.n	8007ef4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f47f aefe 	bne.w	8007cf0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007efa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007efe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d045      	beq.n	8007f92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d23e      	bcs.n	8007f92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e5      	bne.n	8007f14 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a14      	ldr	r2, [pc, #80]	; (8007f9c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007f4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f043 0320 	orr.w	r3, r3, #32
 8007f62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6979      	ldr	r1, [r7, #20]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e6      	bne.n	8007f4e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f80:	e007      	b.n	8007f92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	699a      	ldr	r2, [r3, #24]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0208 	orr.w	r2, r2, #8
 8007f90:	619a      	str	r2, [r3, #24]
}
 8007f92:	bf00      	nop
 8007f94:	3798      	adds	r7, #152	; 0x98
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	080079e7 	.word	0x080079e7

08007fa0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b0a8      	sub	sp, #160	; 0xa0
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fae:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd6:	2b22      	cmp	r3, #34	; 0x22
 8007fd8:	f040 8153 	bne.w	8008282 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007fe2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fe6:	e0fa      	b.n	80081de <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ffa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007ffe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008002:	4013      	ands	r3, r2
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800800a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008010:	1c9a      	adds	r2, r3, #2
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008032:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d053      	beq.n	80080e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800803e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d011      	beq.n	800806e <UART_RxISR_16BIT_FIFOEN+0xce>
 800804a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800804e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2201      	movs	r2, #1
 800805c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008064:	f043 0201 	orr.w	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800806e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d011      	beq.n	800809e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800807a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00b      	beq.n	800809e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2202      	movs	r2, #2
 800808c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008094:	f043 0204 	orr.w	r2, r3, #4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800809e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d011      	beq.n	80080ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80080aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2204      	movs	r2, #4
 80080bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c4:	f043 0202 	orr.w	r2, r3, #2
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d006      	beq.n	80080e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7fe fdeb 	bl	8006cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d175      	bne.n	80081de <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008106:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008116:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800811a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e4      	bne.n	80080f2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3308      	adds	r3, #8
 800812e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800813a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008150:	65ba      	str	r2, [r7, #88]	; 0x58
 8008152:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800815e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e1      	bne.n	8008128 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2220      	movs	r2, #32
 8008168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008176:	2b01      	cmp	r3, #1
 8008178:	d12e      	bne.n	80081d8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	f023 0310 	bic.w	r3, r3, #16
 8008194:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800819e:	647b      	str	r3, [r7, #68]	; 0x44
 80081a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e6      	bne.n	8008180 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b10      	cmp	r3, #16
 80081be:	d103      	bne.n	80081c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2210      	movs	r2, #16
 80081c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7fe fd79 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
 80081d6:	e002      	b.n	80081de <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7f9 f9d9 	bl	8001590 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d006      	beq.n	80081f4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80081e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f47f aefa 	bne.w	8007fe8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081fa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80081fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008202:	2b00      	cmp	r3, #0
 8008204:	d045      	beq.n	8008292 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800820c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008210:	429a      	cmp	r2, r3
 8008212:	d23e      	bcs.n	8008292 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3308      	adds	r3, #8
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	623b      	str	r3, [r7, #32]
   return(result);
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800822a:	677b      	str	r3, [r7, #116]	; 0x74
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008234:	633a      	str	r2, [r7, #48]	; 0x30
 8008236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800823a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e5      	bne.n	8008214 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a14      	ldr	r2, [pc, #80]	; (800829c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800824c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	60fb      	str	r3, [r7, #12]
   return(result);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f043 0320 	orr.w	r3, r3, #32
 8008262:	673b      	str	r3, [r7, #112]	; 0x70
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800826c:	61fb      	str	r3, [r7, #28]
 800826e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	69b9      	ldr	r1, [r7, #24]
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	617b      	str	r3, [r7, #20]
   return(result);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e6      	bne.n	800824e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008280:	e007      	b.n	8008292 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	699a      	ldr	r2, [r3, #24]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0208 	orr.w	r2, r2, #8
 8008290:	619a      	str	r2, [r3, #24]
}
 8008292:	bf00      	nop
 8008294:	37a0      	adds	r7, #160	; 0xa0
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	08007b47 	.word	0x08007b47

080082a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e027      	b.n	8008342 <HAL_UARTEx_DisableFifoMode+0x66>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2224      	movs	r2, #36	; 0x24
 80082fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0201 	bic.w	r2, r2, #1
 8008318:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008320:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008362:	2302      	movs	r3, #2
 8008364:	e02d      	b.n	80083c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2224      	movs	r2, #36	; 0x24
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f850 	bl	8008448 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083de:	2302      	movs	r3, #2
 80083e0:	e02d      	b.n	800843e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2224      	movs	r2, #36	; 0x24
 80083ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f812 	bl	8008448 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008454:	2b00      	cmp	r3, #0
 8008456:	d108      	bne.n	800846a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008468:	e031      	b.n	80084ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800846a:	2308      	movs	r3, #8
 800846c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800846e:	2308      	movs	r3, #8
 8008470:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	0e5b      	lsrs	r3, r3, #25
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	0f5b      	lsrs	r3, r3, #29
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	7b3a      	ldrb	r2, [r7, #12]
 8008496:	4911      	ldr	r1, [pc, #68]	; (80084dc <UARTEx_SetNbDataToProcess+0x94>)
 8008498:	5c8a      	ldrb	r2, [r1, r2]
 800849a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800849e:	7b3a      	ldrb	r2, [r7, #12]
 80084a0:	490f      	ldr	r1, [pc, #60]	; (80084e0 <UARTEx_SetNbDataToProcess+0x98>)
 80084a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	7b7a      	ldrb	r2, [r7, #13]
 80084b4:	4909      	ldr	r1, [pc, #36]	; (80084dc <UARTEx_SetNbDataToProcess+0x94>)
 80084b6:	5c8a      	ldrb	r2, [r1, r2]
 80084b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084bc:	7b7a      	ldrb	r2, [r7, #13]
 80084be:	4908      	ldr	r1, [pc, #32]	; (80084e0 <UARTEx_SetNbDataToProcess+0x98>)
 80084c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	08009bb0 	.word	0x08009bb0
 80084e0:	08009bb8 	.word	0x08009bb8

080084e4 <atoi>:
 80084e4:	220a      	movs	r2, #10
 80084e6:	2100      	movs	r1, #0
 80084e8:	f000 b944 	b.w	8008774 <strtol>

080084ec <__errno>:
 80084ec:	4b01      	ldr	r3, [pc, #4]	; (80084f4 <__errno+0x8>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	200000b4 	.word	0x200000b4

080084f8 <__libc_init_array>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4d0d      	ldr	r5, [pc, #52]	; (8008530 <__libc_init_array+0x38>)
 80084fc:	4c0d      	ldr	r4, [pc, #52]	; (8008534 <__libc_init_array+0x3c>)
 80084fe:	1b64      	subs	r4, r4, r5
 8008500:	10a4      	asrs	r4, r4, #2
 8008502:	2600      	movs	r6, #0
 8008504:	42a6      	cmp	r6, r4
 8008506:	d109      	bne.n	800851c <__libc_init_array+0x24>
 8008508:	4d0b      	ldr	r5, [pc, #44]	; (8008538 <__libc_init_array+0x40>)
 800850a:	4c0c      	ldr	r4, [pc, #48]	; (800853c <__libc_init_array+0x44>)
 800850c:	f001 faf2 	bl	8009af4 <_init>
 8008510:	1b64      	subs	r4, r4, r5
 8008512:	10a4      	asrs	r4, r4, #2
 8008514:	2600      	movs	r6, #0
 8008516:	42a6      	cmp	r6, r4
 8008518:	d105      	bne.n	8008526 <__libc_init_array+0x2e>
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008520:	4798      	blx	r3
 8008522:	3601      	adds	r6, #1
 8008524:	e7ee      	b.n	8008504 <__libc_init_array+0xc>
 8008526:	f855 3b04 	ldr.w	r3, [r5], #4
 800852a:	4798      	blx	r3
 800852c:	3601      	adds	r6, #1
 800852e:	e7f2      	b.n	8008516 <__libc_init_array+0x1e>
 8008530:	08009e10 	.word	0x08009e10
 8008534:	08009e10 	.word	0x08009e10
 8008538:	08009e10 	.word	0x08009e10
 800853c:	08009e14 	.word	0x08009e14

08008540 <memset>:
 8008540:	4402      	add	r2, r0
 8008542:	4603      	mov	r3, r0
 8008544:	4293      	cmp	r3, r2
 8008546:	d100      	bne.n	800854a <memset+0xa>
 8008548:	4770      	bx	lr
 800854a:	f803 1b01 	strb.w	r1, [r3], #1
 800854e:	e7f9      	b.n	8008544 <memset+0x4>

08008550 <sniprintf>:
 8008550:	b40c      	push	{r2, r3}
 8008552:	b530      	push	{r4, r5, lr}
 8008554:	4b17      	ldr	r3, [pc, #92]	; (80085b4 <sniprintf+0x64>)
 8008556:	1e0c      	subs	r4, r1, #0
 8008558:	681d      	ldr	r5, [r3, #0]
 800855a:	b09d      	sub	sp, #116	; 0x74
 800855c:	da08      	bge.n	8008570 <sniprintf+0x20>
 800855e:	238b      	movs	r3, #139	; 0x8b
 8008560:	602b      	str	r3, [r5, #0]
 8008562:	f04f 30ff 	mov.w	r0, #4294967295
 8008566:	b01d      	add	sp, #116	; 0x74
 8008568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800856c:	b002      	add	sp, #8
 800856e:	4770      	bx	lr
 8008570:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008574:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008578:	bf14      	ite	ne
 800857a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800857e:	4623      	moveq	r3, r4
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	9307      	str	r3, [sp, #28]
 8008584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008588:	9002      	str	r0, [sp, #8]
 800858a:	9006      	str	r0, [sp, #24]
 800858c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008590:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008592:	ab21      	add	r3, sp, #132	; 0x84
 8008594:	a902      	add	r1, sp, #8
 8008596:	4628      	mov	r0, r5
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	f000 fa69 	bl	8008a70 <_svfiprintf_r>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	bfbc      	itt	lt
 80085a2:	238b      	movlt	r3, #139	; 0x8b
 80085a4:	602b      	strlt	r3, [r5, #0]
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	d0dd      	beq.n	8008566 <sniprintf+0x16>
 80085aa:	9b02      	ldr	r3, [sp, #8]
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e7d9      	b.n	8008566 <sniprintf+0x16>
 80085b2:	bf00      	nop
 80085b4:	200000b4 	.word	0x200000b4

080085b8 <strtok>:
 80085b8:	4b16      	ldr	r3, [pc, #88]	; (8008614 <strtok+0x5c>)
 80085ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085bc:	681e      	ldr	r6, [r3, #0]
 80085be:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80085c0:	4605      	mov	r5, r0
 80085c2:	b9fc      	cbnz	r4, 8008604 <strtok+0x4c>
 80085c4:	2050      	movs	r0, #80	; 0x50
 80085c6:	9101      	str	r1, [sp, #4]
 80085c8:	f000 f90e 	bl	80087e8 <malloc>
 80085cc:	9901      	ldr	r1, [sp, #4]
 80085ce:	65b0      	str	r0, [r6, #88]	; 0x58
 80085d0:	4602      	mov	r2, r0
 80085d2:	b920      	cbnz	r0, 80085de <strtok+0x26>
 80085d4:	4b10      	ldr	r3, [pc, #64]	; (8008618 <strtok+0x60>)
 80085d6:	4811      	ldr	r0, [pc, #68]	; (800861c <strtok+0x64>)
 80085d8:	2157      	movs	r1, #87	; 0x57
 80085da:	f000 f8d5 	bl	8008788 <__assert_func>
 80085de:	e9c0 4400 	strd	r4, r4, [r0]
 80085e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80085ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80085f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80085f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80085fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80085fe:	6184      	str	r4, [r0, #24]
 8008600:	7704      	strb	r4, [r0, #28]
 8008602:	6244      	str	r4, [r0, #36]	; 0x24
 8008604:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008606:	2301      	movs	r3, #1
 8008608:	4628      	mov	r0, r5
 800860a:	b002      	add	sp, #8
 800860c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008610:	f000 b806 	b.w	8008620 <__strtok_r>
 8008614:	200000b4 	.word	0x200000b4
 8008618:	08009bc4 	.word	0x08009bc4
 800861c:	08009bdb 	.word	0x08009bdb

08008620 <__strtok_r>:
 8008620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008622:	b908      	cbnz	r0, 8008628 <__strtok_r+0x8>
 8008624:	6810      	ldr	r0, [r2, #0]
 8008626:	b188      	cbz	r0, 800864c <__strtok_r+0x2c>
 8008628:	4604      	mov	r4, r0
 800862a:	4620      	mov	r0, r4
 800862c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008630:	460f      	mov	r7, r1
 8008632:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008636:	b91e      	cbnz	r6, 8008640 <__strtok_r+0x20>
 8008638:	b965      	cbnz	r5, 8008654 <__strtok_r+0x34>
 800863a:	6015      	str	r5, [r2, #0]
 800863c:	4628      	mov	r0, r5
 800863e:	e005      	b.n	800864c <__strtok_r+0x2c>
 8008640:	42b5      	cmp	r5, r6
 8008642:	d1f6      	bne.n	8008632 <__strtok_r+0x12>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f0      	bne.n	800862a <__strtok_r+0xa>
 8008648:	6014      	str	r4, [r2, #0]
 800864a:	7003      	strb	r3, [r0, #0]
 800864c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800864e:	461c      	mov	r4, r3
 8008650:	e00c      	b.n	800866c <__strtok_r+0x4c>
 8008652:	b915      	cbnz	r5, 800865a <__strtok_r+0x3a>
 8008654:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008658:	460e      	mov	r6, r1
 800865a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800865e:	42ab      	cmp	r3, r5
 8008660:	d1f7      	bne.n	8008652 <__strtok_r+0x32>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0f3      	beq.n	800864e <__strtok_r+0x2e>
 8008666:	2300      	movs	r3, #0
 8008668:	f804 3c01 	strb.w	r3, [r4, #-1]
 800866c:	6014      	str	r4, [r2, #0]
 800866e:	e7ed      	b.n	800864c <__strtok_r+0x2c>

08008670 <_strtol_l.constprop.0>:
 8008670:	2b01      	cmp	r3, #1
 8008672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008676:	d001      	beq.n	800867c <_strtol_l.constprop.0+0xc>
 8008678:	2b24      	cmp	r3, #36	; 0x24
 800867a:	d906      	bls.n	800868a <_strtol_l.constprop.0+0x1a>
 800867c:	f7ff ff36 	bl	80084ec <__errno>
 8008680:	2316      	movs	r3, #22
 8008682:	6003      	str	r3, [r0, #0]
 8008684:	2000      	movs	r0, #0
 8008686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008770 <_strtol_l.constprop.0+0x100>
 800868e:	460d      	mov	r5, r1
 8008690:	462e      	mov	r6, r5
 8008692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008696:	f814 700c 	ldrb.w	r7, [r4, ip]
 800869a:	f017 0708 	ands.w	r7, r7, #8
 800869e:	d1f7      	bne.n	8008690 <_strtol_l.constprop.0+0x20>
 80086a0:	2c2d      	cmp	r4, #45	; 0x2d
 80086a2:	d132      	bne.n	800870a <_strtol_l.constprop.0+0x9a>
 80086a4:	782c      	ldrb	r4, [r5, #0]
 80086a6:	2701      	movs	r7, #1
 80086a8:	1cb5      	adds	r5, r6, #2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d05b      	beq.n	8008766 <_strtol_l.constprop.0+0xf6>
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	d109      	bne.n	80086c6 <_strtol_l.constprop.0+0x56>
 80086b2:	2c30      	cmp	r4, #48	; 0x30
 80086b4:	d107      	bne.n	80086c6 <_strtol_l.constprop.0+0x56>
 80086b6:	782c      	ldrb	r4, [r5, #0]
 80086b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80086bc:	2c58      	cmp	r4, #88	; 0x58
 80086be:	d14d      	bne.n	800875c <_strtol_l.constprop.0+0xec>
 80086c0:	786c      	ldrb	r4, [r5, #1]
 80086c2:	2310      	movs	r3, #16
 80086c4:	3502      	adds	r5, #2
 80086c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80086ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80086ce:	f04f 0c00 	mov.w	ip, #0
 80086d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80086d6:	4666      	mov	r6, ip
 80086d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80086dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80086e0:	f1be 0f09 	cmp.w	lr, #9
 80086e4:	d816      	bhi.n	8008714 <_strtol_l.constprop.0+0xa4>
 80086e6:	4674      	mov	r4, lr
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	dd24      	ble.n	8008736 <_strtol_l.constprop.0+0xc6>
 80086ec:	f1bc 0f00 	cmp.w	ip, #0
 80086f0:	db1e      	blt.n	8008730 <_strtol_l.constprop.0+0xc0>
 80086f2:	45b1      	cmp	r9, r6
 80086f4:	d31c      	bcc.n	8008730 <_strtol_l.constprop.0+0xc0>
 80086f6:	d101      	bne.n	80086fc <_strtol_l.constprop.0+0x8c>
 80086f8:	45a2      	cmp	sl, r4
 80086fa:	db19      	blt.n	8008730 <_strtol_l.constprop.0+0xc0>
 80086fc:	fb06 4603 	mla	r6, r6, r3, r4
 8008700:	f04f 0c01 	mov.w	ip, #1
 8008704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008708:	e7e8      	b.n	80086dc <_strtol_l.constprop.0+0x6c>
 800870a:	2c2b      	cmp	r4, #43	; 0x2b
 800870c:	bf04      	itt	eq
 800870e:	782c      	ldrbeq	r4, [r5, #0]
 8008710:	1cb5      	addeq	r5, r6, #2
 8008712:	e7ca      	b.n	80086aa <_strtol_l.constprop.0+0x3a>
 8008714:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008718:	f1be 0f19 	cmp.w	lr, #25
 800871c:	d801      	bhi.n	8008722 <_strtol_l.constprop.0+0xb2>
 800871e:	3c37      	subs	r4, #55	; 0x37
 8008720:	e7e2      	b.n	80086e8 <_strtol_l.constprop.0+0x78>
 8008722:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008726:	f1be 0f19 	cmp.w	lr, #25
 800872a:	d804      	bhi.n	8008736 <_strtol_l.constprop.0+0xc6>
 800872c:	3c57      	subs	r4, #87	; 0x57
 800872e:	e7db      	b.n	80086e8 <_strtol_l.constprop.0+0x78>
 8008730:	f04f 3cff 	mov.w	ip, #4294967295
 8008734:	e7e6      	b.n	8008704 <_strtol_l.constprop.0+0x94>
 8008736:	f1bc 0f00 	cmp.w	ip, #0
 800873a:	da05      	bge.n	8008748 <_strtol_l.constprop.0+0xd8>
 800873c:	2322      	movs	r3, #34	; 0x22
 800873e:	6003      	str	r3, [r0, #0]
 8008740:	4646      	mov	r6, r8
 8008742:	b942      	cbnz	r2, 8008756 <_strtol_l.constprop.0+0xe6>
 8008744:	4630      	mov	r0, r6
 8008746:	e79e      	b.n	8008686 <_strtol_l.constprop.0+0x16>
 8008748:	b107      	cbz	r7, 800874c <_strtol_l.constprop.0+0xdc>
 800874a:	4276      	negs	r6, r6
 800874c:	2a00      	cmp	r2, #0
 800874e:	d0f9      	beq.n	8008744 <_strtol_l.constprop.0+0xd4>
 8008750:	f1bc 0f00 	cmp.w	ip, #0
 8008754:	d000      	beq.n	8008758 <_strtol_l.constprop.0+0xe8>
 8008756:	1e69      	subs	r1, r5, #1
 8008758:	6011      	str	r1, [r2, #0]
 800875a:	e7f3      	b.n	8008744 <_strtol_l.constprop.0+0xd4>
 800875c:	2430      	movs	r4, #48	; 0x30
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1b1      	bne.n	80086c6 <_strtol_l.constprop.0+0x56>
 8008762:	2308      	movs	r3, #8
 8008764:	e7af      	b.n	80086c6 <_strtol_l.constprop.0+0x56>
 8008766:	2c30      	cmp	r4, #48	; 0x30
 8008768:	d0a5      	beq.n	80086b6 <_strtol_l.constprop.0+0x46>
 800876a:	230a      	movs	r3, #10
 800876c:	e7ab      	b.n	80086c6 <_strtol_l.constprop.0+0x56>
 800876e:	bf00      	nop
 8008770:	08009c75 	.word	0x08009c75

08008774 <strtol>:
 8008774:	4613      	mov	r3, r2
 8008776:	460a      	mov	r2, r1
 8008778:	4601      	mov	r1, r0
 800877a:	4802      	ldr	r0, [pc, #8]	; (8008784 <strtol+0x10>)
 800877c:	6800      	ldr	r0, [r0, #0]
 800877e:	f7ff bf77 	b.w	8008670 <_strtol_l.constprop.0>
 8008782:	bf00      	nop
 8008784:	200000b4 	.word	0x200000b4

08008788 <__assert_func>:
 8008788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800878a:	4614      	mov	r4, r2
 800878c:	461a      	mov	r2, r3
 800878e:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <__assert_func+0x2c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4605      	mov	r5, r0
 8008794:	68d8      	ldr	r0, [r3, #12]
 8008796:	b14c      	cbz	r4, 80087ac <__assert_func+0x24>
 8008798:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <__assert_func+0x30>)
 800879a:	9100      	str	r1, [sp, #0]
 800879c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087a0:	4906      	ldr	r1, [pc, #24]	; (80087bc <__assert_func+0x34>)
 80087a2:	462b      	mov	r3, r5
 80087a4:	f000 f80e 	bl	80087c4 <fiprintf>
 80087a8:	f000 fe20 	bl	80093ec <abort>
 80087ac:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <__assert_func+0x38>)
 80087ae:	461c      	mov	r4, r3
 80087b0:	e7f3      	b.n	800879a <__assert_func+0x12>
 80087b2:	bf00      	nop
 80087b4:	200000b4 	.word	0x200000b4
 80087b8:	08009c38 	.word	0x08009c38
 80087bc:	08009c45 	.word	0x08009c45
 80087c0:	08009c73 	.word	0x08009c73

080087c4 <fiprintf>:
 80087c4:	b40e      	push	{r1, r2, r3}
 80087c6:	b503      	push	{r0, r1, lr}
 80087c8:	4601      	mov	r1, r0
 80087ca:	ab03      	add	r3, sp, #12
 80087cc:	4805      	ldr	r0, [pc, #20]	; (80087e4 <fiprintf+0x20>)
 80087ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d2:	6800      	ldr	r0, [r0, #0]
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	f000 fa75 	bl	8008cc4 <_vfiprintf_r>
 80087da:	b002      	add	sp, #8
 80087dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e0:	b003      	add	sp, #12
 80087e2:	4770      	bx	lr
 80087e4:	200000b4 	.word	0x200000b4

080087e8 <malloc>:
 80087e8:	4b02      	ldr	r3, [pc, #8]	; (80087f4 <malloc+0xc>)
 80087ea:	4601      	mov	r1, r0
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	f000 b86f 	b.w	80088d0 <_malloc_r>
 80087f2:	bf00      	nop
 80087f4:	200000b4 	.word	0x200000b4

080087f8 <_free_r>:
 80087f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087fa:	2900      	cmp	r1, #0
 80087fc:	d044      	beq.n	8008888 <_free_r+0x90>
 80087fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008802:	9001      	str	r0, [sp, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f1a1 0404 	sub.w	r4, r1, #4
 800880a:	bfb8      	it	lt
 800880c:	18e4      	addlt	r4, r4, r3
 800880e:	f001 f83d 	bl	800988c <__malloc_lock>
 8008812:	4a1e      	ldr	r2, [pc, #120]	; (800888c <_free_r+0x94>)
 8008814:	9801      	ldr	r0, [sp, #4]
 8008816:	6813      	ldr	r3, [r2, #0]
 8008818:	b933      	cbnz	r3, 8008828 <_free_r+0x30>
 800881a:	6063      	str	r3, [r4, #4]
 800881c:	6014      	str	r4, [r2, #0]
 800881e:	b003      	add	sp, #12
 8008820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008824:	f001 b838 	b.w	8009898 <__malloc_unlock>
 8008828:	42a3      	cmp	r3, r4
 800882a:	d908      	bls.n	800883e <_free_r+0x46>
 800882c:	6825      	ldr	r5, [r4, #0]
 800882e:	1961      	adds	r1, r4, r5
 8008830:	428b      	cmp	r3, r1
 8008832:	bf01      	itttt	eq
 8008834:	6819      	ldreq	r1, [r3, #0]
 8008836:	685b      	ldreq	r3, [r3, #4]
 8008838:	1949      	addeq	r1, r1, r5
 800883a:	6021      	streq	r1, [r4, #0]
 800883c:	e7ed      	b.n	800881a <_free_r+0x22>
 800883e:	461a      	mov	r2, r3
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	b10b      	cbz	r3, 8008848 <_free_r+0x50>
 8008844:	42a3      	cmp	r3, r4
 8008846:	d9fa      	bls.n	800883e <_free_r+0x46>
 8008848:	6811      	ldr	r1, [r2, #0]
 800884a:	1855      	adds	r5, r2, r1
 800884c:	42a5      	cmp	r5, r4
 800884e:	d10b      	bne.n	8008868 <_free_r+0x70>
 8008850:	6824      	ldr	r4, [r4, #0]
 8008852:	4421      	add	r1, r4
 8008854:	1854      	adds	r4, r2, r1
 8008856:	42a3      	cmp	r3, r4
 8008858:	6011      	str	r1, [r2, #0]
 800885a:	d1e0      	bne.n	800881e <_free_r+0x26>
 800885c:	681c      	ldr	r4, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	6053      	str	r3, [r2, #4]
 8008862:	4421      	add	r1, r4
 8008864:	6011      	str	r1, [r2, #0]
 8008866:	e7da      	b.n	800881e <_free_r+0x26>
 8008868:	d902      	bls.n	8008870 <_free_r+0x78>
 800886a:	230c      	movs	r3, #12
 800886c:	6003      	str	r3, [r0, #0]
 800886e:	e7d6      	b.n	800881e <_free_r+0x26>
 8008870:	6825      	ldr	r5, [r4, #0]
 8008872:	1961      	adds	r1, r4, r5
 8008874:	428b      	cmp	r3, r1
 8008876:	bf04      	itt	eq
 8008878:	6819      	ldreq	r1, [r3, #0]
 800887a:	685b      	ldreq	r3, [r3, #4]
 800887c:	6063      	str	r3, [r4, #4]
 800887e:	bf04      	itt	eq
 8008880:	1949      	addeq	r1, r1, r5
 8008882:	6021      	streq	r1, [r4, #0]
 8008884:	6054      	str	r4, [r2, #4]
 8008886:	e7ca      	b.n	800881e <_free_r+0x26>
 8008888:	b003      	add	sp, #12
 800888a:	bd30      	pop	{r4, r5, pc}
 800888c:	20000330 	.word	0x20000330

08008890 <sbrk_aligned>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	4e0e      	ldr	r6, [pc, #56]	; (80088cc <sbrk_aligned+0x3c>)
 8008894:	460c      	mov	r4, r1
 8008896:	6831      	ldr	r1, [r6, #0]
 8008898:	4605      	mov	r5, r0
 800889a:	b911      	cbnz	r1, 80088a2 <sbrk_aligned+0x12>
 800889c:	f000 fcd6 	bl	800924c <_sbrk_r>
 80088a0:	6030      	str	r0, [r6, #0]
 80088a2:	4621      	mov	r1, r4
 80088a4:	4628      	mov	r0, r5
 80088a6:	f000 fcd1 	bl	800924c <_sbrk_r>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	d00a      	beq.n	80088c4 <sbrk_aligned+0x34>
 80088ae:	1cc4      	adds	r4, r0, #3
 80088b0:	f024 0403 	bic.w	r4, r4, #3
 80088b4:	42a0      	cmp	r0, r4
 80088b6:	d007      	beq.n	80088c8 <sbrk_aligned+0x38>
 80088b8:	1a21      	subs	r1, r4, r0
 80088ba:	4628      	mov	r0, r5
 80088bc:	f000 fcc6 	bl	800924c <_sbrk_r>
 80088c0:	3001      	adds	r0, #1
 80088c2:	d101      	bne.n	80088c8 <sbrk_aligned+0x38>
 80088c4:	f04f 34ff 	mov.w	r4, #4294967295
 80088c8:	4620      	mov	r0, r4
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	20000334 	.word	0x20000334

080088d0 <_malloc_r>:
 80088d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d4:	1ccd      	adds	r5, r1, #3
 80088d6:	f025 0503 	bic.w	r5, r5, #3
 80088da:	3508      	adds	r5, #8
 80088dc:	2d0c      	cmp	r5, #12
 80088de:	bf38      	it	cc
 80088e0:	250c      	movcc	r5, #12
 80088e2:	2d00      	cmp	r5, #0
 80088e4:	4607      	mov	r7, r0
 80088e6:	db01      	blt.n	80088ec <_malloc_r+0x1c>
 80088e8:	42a9      	cmp	r1, r5
 80088ea:	d905      	bls.n	80088f8 <_malloc_r+0x28>
 80088ec:	230c      	movs	r3, #12
 80088ee:	603b      	str	r3, [r7, #0]
 80088f0:	2600      	movs	r6, #0
 80088f2:	4630      	mov	r0, r6
 80088f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f8:	4e2e      	ldr	r6, [pc, #184]	; (80089b4 <_malloc_r+0xe4>)
 80088fa:	f000 ffc7 	bl	800988c <__malloc_lock>
 80088fe:	6833      	ldr	r3, [r6, #0]
 8008900:	461c      	mov	r4, r3
 8008902:	bb34      	cbnz	r4, 8008952 <_malloc_r+0x82>
 8008904:	4629      	mov	r1, r5
 8008906:	4638      	mov	r0, r7
 8008908:	f7ff ffc2 	bl	8008890 <sbrk_aligned>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	4604      	mov	r4, r0
 8008910:	d14d      	bne.n	80089ae <_malloc_r+0xde>
 8008912:	6834      	ldr	r4, [r6, #0]
 8008914:	4626      	mov	r6, r4
 8008916:	2e00      	cmp	r6, #0
 8008918:	d140      	bne.n	800899c <_malloc_r+0xcc>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	4631      	mov	r1, r6
 800891e:	4638      	mov	r0, r7
 8008920:	eb04 0803 	add.w	r8, r4, r3
 8008924:	f000 fc92 	bl	800924c <_sbrk_r>
 8008928:	4580      	cmp	r8, r0
 800892a:	d13a      	bne.n	80089a2 <_malloc_r+0xd2>
 800892c:	6821      	ldr	r1, [r4, #0]
 800892e:	3503      	adds	r5, #3
 8008930:	1a6d      	subs	r5, r5, r1
 8008932:	f025 0503 	bic.w	r5, r5, #3
 8008936:	3508      	adds	r5, #8
 8008938:	2d0c      	cmp	r5, #12
 800893a:	bf38      	it	cc
 800893c:	250c      	movcc	r5, #12
 800893e:	4629      	mov	r1, r5
 8008940:	4638      	mov	r0, r7
 8008942:	f7ff ffa5 	bl	8008890 <sbrk_aligned>
 8008946:	3001      	adds	r0, #1
 8008948:	d02b      	beq.n	80089a2 <_malloc_r+0xd2>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	442b      	add	r3, r5
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	e00e      	b.n	8008970 <_malloc_r+0xa0>
 8008952:	6822      	ldr	r2, [r4, #0]
 8008954:	1b52      	subs	r2, r2, r5
 8008956:	d41e      	bmi.n	8008996 <_malloc_r+0xc6>
 8008958:	2a0b      	cmp	r2, #11
 800895a:	d916      	bls.n	800898a <_malloc_r+0xba>
 800895c:	1961      	adds	r1, r4, r5
 800895e:	42a3      	cmp	r3, r4
 8008960:	6025      	str	r5, [r4, #0]
 8008962:	bf18      	it	ne
 8008964:	6059      	strne	r1, [r3, #4]
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	bf08      	it	eq
 800896a:	6031      	streq	r1, [r6, #0]
 800896c:	5162      	str	r2, [r4, r5]
 800896e:	604b      	str	r3, [r1, #4]
 8008970:	4638      	mov	r0, r7
 8008972:	f104 060b 	add.w	r6, r4, #11
 8008976:	f000 ff8f 	bl	8009898 <__malloc_unlock>
 800897a:	f026 0607 	bic.w	r6, r6, #7
 800897e:	1d23      	adds	r3, r4, #4
 8008980:	1af2      	subs	r2, r6, r3
 8008982:	d0b6      	beq.n	80088f2 <_malloc_r+0x22>
 8008984:	1b9b      	subs	r3, r3, r6
 8008986:	50a3      	str	r3, [r4, r2]
 8008988:	e7b3      	b.n	80088f2 <_malloc_r+0x22>
 800898a:	6862      	ldr	r2, [r4, #4]
 800898c:	42a3      	cmp	r3, r4
 800898e:	bf0c      	ite	eq
 8008990:	6032      	streq	r2, [r6, #0]
 8008992:	605a      	strne	r2, [r3, #4]
 8008994:	e7ec      	b.n	8008970 <_malloc_r+0xa0>
 8008996:	4623      	mov	r3, r4
 8008998:	6864      	ldr	r4, [r4, #4]
 800899a:	e7b2      	b.n	8008902 <_malloc_r+0x32>
 800899c:	4634      	mov	r4, r6
 800899e:	6876      	ldr	r6, [r6, #4]
 80089a0:	e7b9      	b.n	8008916 <_malloc_r+0x46>
 80089a2:	230c      	movs	r3, #12
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	4638      	mov	r0, r7
 80089a8:	f000 ff76 	bl	8009898 <__malloc_unlock>
 80089ac:	e7a1      	b.n	80088f2 <_malloc_r+0x22>
 80089ae:	6025      	str	r5, [r4, #0]
 80089b0:	e7de      	b.n	8008970 <_malloc_r+0xa0>
 80089b2:	bf00      	nop
 80089b4:	20000330 	.word	0x20000330

080089b8 <__ssputs_r>:
 80089b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089bc:	688e      	ldr	r6, [r1, #8]
 80089be:	429e      	cmp	r6, r3
 80089c0:	4682      	mov	sl, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	4690      	mov	r8, r2
 80089c6:	461f      	mov	r7, r3
 80089c8:	d838      	bhi.n	8008a3c <__ssputs_r+0x84>
 80089ca:	898a      	ldrh	r2, [r1, #12]
 80089cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089d0:	d032      	beq.n	8008a38 <__ssputs_r+0x80>
 80089d2:	6825      	ldr	r5, [r4, #0]
 80089d4:	6909      	ldr	r1, [r1, #16]
 80089d6:	eba5 0901 	sub.w	r9, r5, r1
 80089da:	6965      	ldr	r5, [r4, #20]
 80089dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089e4:	3301      	adds	r3, #1
 80089e6:	444b      	add	r3, r9
 80089e8:	106d      	asrs	r5, r5, #1
 80089ea:	429d      	cmp	r5, r3
 80089ec:	bf38      	it	cc
 80089ee:	461d      	movcc	r5, r3
 80089f0:	0553      	lsls	r3, r2, #21
 80089f2:	d531      	bpl.n	8008a58 <__ssputs_r+0xa0>
 80089f4:	4629      	mov	r1, r5
 80089f6:	f7ff ff6b 	bl	80088d0 <_malloc_r>
 80089fa:	4606      	mov	r6, r0
 80089fc:	b950      	cbnz	r0, 8008a14 <__ssputs_r+0x5c>
 80089fe:	230c      	movs	r3, #12
 8008a00:	f8ca 3000 	str.w	r3, [sl]
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a14:	6921      	ldr	r1, [r4, #16]
 8008a16:	464a      	mov	r2, r9
 8008a18:	f000 ff10 	bl	800983c <memcpy>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	6126      	str	r6, [r4, #16]
 8008a2a:	6165      	str	r5, [r4, #20]
 8008a2c:	444e      	add	r6, r9
 8008a2e:	eba5 0509 	sub.w	r5, r5, r9
 8008a32:	6026      	str	r6, [r4, #0]
 8008a34:	60a5      	str	r5, [r4, #8]
 8008a36:	463e      	mov	r6, r7
 8008a38:	42be      	cmp	r6, r7
 8008a3a:	d900      	bls.n	8008a3e <__ssputs_r+0x86>
 8008a3c:	463e      	mov	r6, r7
 8008a3e:	6820      	ldr	r0, [r4, #0]
 8008a40:	4632      	mov	r2, r6
 8008a42:	4641      	mov	r1, r8
 8008a44:	f000 ff08 	bl	8009858 <memmove>
 8008a48:	68a3      	ldr	r3, [r4, #8]
 8008a4a:	1b9b      	subs	r3, r3, r6
 8008a4c:	60a3      	str	r3, [r4, #8]
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	4433      	add	r3, r6
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	2000      	movs	r0, #0
 8008a56:	e7db      	b.n	8008a10 <__ssputs_r+0x58>
 8008a58:	462a      	mov	r2, r5
 8008a5a:	f000 ff23 	bl	80098a4 <_realloc_r>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d1e1      	bne.n	8008a28 <__ssputs_r+0x70>
 8008a64:	6921      	ldr	r1, [r4, #16]
 8008a66:	4650      	mov	r0, sl
 8008a68:	f7ff fec6 	bl	80087f8 <_free_r>
 8008a6c:	e7c7      	b.n	80089fe <__ssputs_r+0x46>
	...

08008a70 <_svfiprintf_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	4698      	mov	r8, r3
 8008a76:	898b      	ldrh	r3, [r1, #12]
 8008a78:	061b      	lsls	r3, r3, #24
 8008a7a:	b09d      	sub	sp, #116	; 0x74
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	460d      	mov	r5, r1
 8008a80:	4614      	mov	r4, r2
 8008a82:	d50e      	bpl.n	8008aa2 <_svfiprintf_r+0x32>
 8008a84:	690b      	ldr	r3, [r1, #16]
 8008a86:	b963      	cbnz	r3, 8008aa2 <_svfiprintf_r+0x32>
 8008a88:	2140      	movs	r1, #64	; 0x40
 8008a8a:	f7ff ff21 	bl	80088d0 <_malloc_r>
 8008a8e:	6028      	str	r0, [r5, #0]
 8008a90:	6128      	str	r0, [r5, #16]
 8008a92:	b920      	cbnz	r0, 8008a9e <_svfiprintf_r+0x2e>
 8008a94:	230c      	movs	r3, #12
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	e0d1      	b.n	8008c42 <_svfiprintf_r+0x1d2>
 8008a9e:	2340      	movs	r3, #64	; 0x40
 8008aa0:	616b      	str	r3, [r5, #20]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa6:	2320      	movs	r3, #32
 8008aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ab0:	2330      	movs	r3, #48	; 0x30
 8008ab2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c5c <_svfiprintf_r+0x1ec>
 8008ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aba:	f04f 0901 	mov.w	r9, #1
 8008abe:	4623      	mov	r3, r4
 8008ac0:	469a      	mov	sl, r3
 8008ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac6:	b10a      	cbz	r2, 8008acc <_svfiprintf_r+0x5c>
 8008ac8:	2a25      	cmp	r2, #37	; 0x25
 8008aca:	d1f9      	bne.n	8008ac0 <_svfiprintf_r+0x50>
 8008acc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ad0:	d00b      	beq.n	8008aea <_svfiprintf_r+0x7a>
 8008ad2:	465b      	mov	r3, fp
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f7ff ff6d 	bl	80089b8 <__ssputs_r>
 8008ade:	3001      	adds	r0, #1
 8008ae0:	f000 80aa 	beq.w	8008c38 <_svfiprintf_r+0x1c8>
 8008ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ae6:	445a      	add	r2, fp
 8008ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8008aea:	f89a 3000 	ldrb.w	r3, [sl]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 80a2 	beq.w	8008c38 <_svfiprintf_r+0x1c8>
 8008af4:	2300      	movs	r3, #0
 8008af6:	f04f 32ff 	mov.w	r2, #4294967295
 8008afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008afe:	f10a 0a01 	add.w	sl, sl, #1
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	9307      	str	r3, [sp, #28]
 8008b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b0c:	4654      	mov	r4, sl
 8008b0e:	2205      	movs	r2, #5
 8008b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b14:	4851      	ldr	r0, [pc, #324]	; (8008c5c <_svfiprintf_r+0x1ec>)
 8008b16:	f7f7 fb9b 	bl	8000250 <memchr>
 8008b1a:	9a04      	ldr	r2, [sp, #16]
 8008b1c:	b9d8      	cbnz	r0, 8008b56 <_svfiprintf_r+0xe6>
 8008b1e:	06d0      	lsls	r0, r2, #27
 8008b20:	bf44      	itt	mi
 8008b22:	2320      	movmi	r3, #32
 8008b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b28:	0711      	lsls	r1, r2, #28
 8008b2a:	bf44      	itt	mi
 8008b2c:	232b      	movmi	r3, #43	; 0x2b
 8008b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b32:	f89a 3000 	ldrb.w	r3, [sl]
 8008b36:	2b2a      	cmp	r3, #42	; 0x2a
 8008b38:	d015      	beq.n	8008b66 <_svfiprintf_r+0xf6>
 8008b3a:	9a07      	ldr	r2, [sp, #28]
 8008b3c:	4654      	mov	r4, sl
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f04f 0c0a 	mov.w	ip, #10
 8008b44:	4621      	mov	r1, r4
 8008b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b4a:	3b30      	subs	r3, #48	; 0x30
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d94e      	bls.n	8008bee <_svfiprintf_r+0x17e>
 8008b50:	b1b0      	cbz	r0, 8008b80 <_svfiprintf_r+0x110>
 8008b52:	9207      	str	r2, [sp, #28]
 8008b54:	e014      	b.n	8008b80 <_svfiprintf_r+0x110>
 8008b56:	eba0 0308 	sub.w	r3, r0, r8
 8008b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	46a2      	mov	sl, r4
 8008b64:	e7d2      	b.n	8008b0c <_svfiprintf_r+0x9c>
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	1d19      	adds	r1, r3, #4
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	9103      	str	r1, [sp, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	bfbb      	ittet	lt
 8008b72:	425b      	neglt	r3, r3
 8008b74:	f042 0202 	orrlt.w	r2, r2, #2
 8008b78:	9307      	strge	r3, [sp, #28]
 8008b7a:	9307      	strlt	r3, [sp, #28]
 8008b7c:	bfb8      	it	lt
 8008b7e:	9204      	strlt	r2, [sp, #16]
 8008b80:	7823      	ldrb	r3, [r4, #0]
 8008b82:	2b2e      	cmp	r3, #46	; 0x2e
 8008b84:	d10c      	bne.n	8008ba0 <_svfiprintf_r+0x130>
 8008b86:	7863      	ldrb	r3, [r4, #1]
 8008b88:	2b2a      	cmp	r3, #42	; 0x2a
 8008b8a:	d135      	bne.n	8008bf8 <_svfiprintf_r+0x188>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	1d1a      	adds	r2, r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	9203      	str	r2, [sp, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfb8      	it	lt
 8008b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b9c:	3402      	adds	r4, #2
 8008b9e:	9305      	str	r3, [sp, #20]
 8008ba0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c6c <_svfiprintf_r+0x1fc>
 8008ba4:	7821      	ldrb	r1, [r4, #0]
 8008ba6:	2203      	movs	r2, #3
 8008ba8:	4650      	mov	r0, sl
 8008baa:	f7f7 fb51 	bl	8000250 <memchr>
 8008bae:	b140      	cbz	r0, 8008bc2 <_svfiprintf_r+0x152>
 8008bb0:	2340      	movs	r3, #64	; 0x40
 8008bb2:	eba0 000a 	sub.w	r0, r0, sl
 8008bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	4303      	orrs	r3, r0
 8008bbe:	3401      	adds	r4, #1
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc6:	4826      	ldr	r0, [pc, #152]	; (8008c60 <_svfiprintf_r+0x1f0>)
 8008bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bcc:	2206      	movs	r2, #6
 8008bce:	f7f7 fb3f 	bl	8000250 <memchr>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d038      	beq.n	8008c48 <_svfiprintf_r+0x1d8>
 8008bd6:	4b23      	ldr	r3, [pc, #140]	; (8008c64 <_svfiprintf_r+0x1f4>)
 8008bd8:	bb1b      	cbnz	r3, 8008c22 <_svfiprintf_r+0x1b2>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	3307      	adds	r3, #7
 8008bde:	f023 0307 	bic.w	r3, r3, #7
 8008be2:	3308      	adds	r3, #8
 8008be4:	9303      	str	r3, [sp, #12]
 8008be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be8:	4433      	add	r3, r6
 8008bea:	9309      	str	r3, [sp, #36]	; 0x24
 8008bec:	e767      	b.n	8008abe <_svfiprintf_r+0x4e>
 8008bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	2001      	movs	r0, #1
 8008bf6:	e7a5      	b.n	8008b44 <_svfiprintf_r+0xd4>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	3401      	adds	r4, #1
 8008bfc:	9305      	str	r3, [sp, #20]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	f04f 0c0a 	mov.w	ip, #10
 8008c04:	4620      	mov	r0, r4
 8008c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c0a:	3a30      	subs	r2, #48	; 0x30
 8008c0c:	2a09      	cmp	r2, #9
 8008c0e:	d903      	bls.n	8008c18 <_svfiprintf_r+0x1a8>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0c5      	beq.n	8008ba0 <_svfiprintf_r+0x130>
 8008c14:	9105      	str	r1, [sp, #20]
 8008c16:	e7c3      	b.n	8008ba0 <_svfiprintf_r+0x130>
 8008c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e7f0      	b.n	8008c04 <_svfiprintf_r+0x194>
 8008c22:	ab03      	add	r3, sp, #12
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	462a      	mov	r2, r5
 8008c28:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <_svfiprintf_r+0x1f8>)
 8008c2a:	a904      	add	r1, sp, #16
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f3af 8000 	nop.w
 8008c32:	1c42      	adds	r2, r0, #1
 8008c34:	4606      	mov	r6, r0
 8008c36:	d1d6      	bne.n	8008be6 <_svfiprintf_r+0x176>
 8008c38:	89ab      	ldrh	r3, [r5, #12]
 8008c3a:	065b      	lsls	r3, r3, #25
 8008c3c:	f53f af2c 	bmi.w	8008a98 <_svfiprintf_r+0x28>
 8008c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c42:	b01d      	add	sp, #116	; 0x74
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	ab03      	add	r3, sp, #12
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	462a      	mov	r2, r5
 8008c4e:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <_svfiprintf_r+0x1f8>)
 8008c50:	a904      	add	r1, sp, #16
 8008c52:	4638      	mov	r0, r7
 8008c54:	f000 f9d4 	bl	8009000 <_printf_i>
 8008c58:	e7eb      	b.n	8008c32 <_svfiprintf_r+0x1c2>
 8008c5a:	bf00      	nop
 8008c5c:	08009d75 	.word	0x08009d75
 8008c60:	08009d7f 	.word	0x08009d7f
 8008c64:	00000000 	.word	0x00000000
 8008c68:	080089b9 	.word	0x080089b9
 8008c6c:	08009d7b 	.word	0x08009d7b

08008c70 <__sfputc_r>:
 8008c70:	6893      	ldr	r3, [r2, #8]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	b410      	push	{r4}
 8008c78:	6093      	str	r3, [r2, #8]
 8008c7a:	da08      	bge.n	8008c8e <__sfputc_r+0x1e>
 8008c7c:	6994      	ldr	r4, [r2, #24]
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	db01      	blt.n	8008c86 <__sfputc_r+0x16>
 8008c82:	290a      	cmp	r1, #10
 8008c84:	d103      	bne.n	8008c8e <__sfputc_r+0x1e>
 8008c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c8a:	f000 baef 	b.w	800926c <__swbuf_r>
 8008c8e:	6813      	ldr	r3, [r2, #0]
 8008c90:	1c58      	adds	r0, r3, #1
 8008c92:	6010      	str	r0, [r2, #0]
 8008c94:	7019      	strb	r1, [r3, #0]
 8008c96:	4608      	mov	r0, r1
 8008c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <__sfputs_r>:
 8008c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca0:	4606      	mov	r6, r0
 8008ca2:	460f      	mov	r7, r1
 8008ca4:	4614      	mov	r4, r2
 8008ca6:	18d5      	adds	r5, r2, r3
 8008ca8:	42ac      	cmp	r4, r5
 8008caa:	d101      	bne.n	8008cb0 <__sfputs_r+0x12>
 8008cac:	2000      	movs	r0, #0
 8008cae:	e007      	b.n	8008cc0 <__sfputs_r+0x22>
 8008cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb4:	463a      	mov	r2, r7
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f7ff ffda 	bl	8008c70 <__sfputc_r>
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d1f3      	bne.n	8008ca8 <__sfputs_r+0xa>
 8008cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cc4 <_vfiprintf_r>:
 8008cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	460d      	mov	r5, r1
 8008cca:	b09d      	sub	sp, #116	; 0x74
 8008ccc:	4614      	mov	r4, r2
 8008cce:	4698      	mov	r8, r3
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	b118      	cbz	r0, 8008cdc <_vfiprintf_r+0x18>
 8008cd4:	6983      	ldr	r3, [r0, #24]
 8008cd6:	b90b      	cbnz	r3, 8008cdc <_vfiprintf_r+0x18>
 8008cd8:	f000 fcaa 	bl	8009630 <__sinit>
 8008cdc:	4b89      	ldr	r3, [pc, #548]	; (8008f04 <_vfiprintf_r+0x240>)
 8008cde:	429d      	cmp	r5, r3
 8008ce0:	d11b      	bne.n	8008d1a <_vfiprintf_r+0x56>
 8008ce2:	6875      	ldr	r5, [r6, #4]
 8008ce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ce6:	07d9      	lsls	r1, r3, #31
 8008ce8:	d405      	bmi.n	8008cf6 <_vfiprintf_r+0x32>
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	059a      	lsls	r2, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_vfiprintf_r+0x32>
 8008cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cf2:	f000 fd3b 	bl	800976c <__retarget_lock_acquire_recursive>
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	071b      	lsls	r3, r3, #28
 8008cfa:	d501      	bpl.n	8008d00 <_vfiprintf_r+0x3c>
 8008cfc:	692b      	ldr	r3, [r5, #16]
 8008cfe:	b9eb      	cbnz	r3, 8008d3c <_vfiprintf_r+0x78>
 8008d00:	4629      	mov	r1, r5
 8008d02:	4630      	mov	r0, r6
 8008d04:	f000 fb04 	bl	8009310 <__swsetup_r>
 8008d08:	b1c0      	cbz	r0, 8008d3c <_vfiprintf_r+0x78>
 8008d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d0c:	07dc      	lsls	r4, r3, #31
 8008d0e:	d50e      	bpl.n	8008d2e <_vfiprintf_r+0x6a>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	b01d      	add	sp, #116	; 0x74
 8008d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1a:	4b7b      	ldr	r3, [pc, #492]	; (8008f08 <_vfiprintf_r+0x244>)
 8008d1c:	429d      	cmp	r5, r3
 8008d1e:	d101      	bne.n	8008d24 <_vfiprintf_r+0x60>
 8008d20:	68b5      	ldr	r5, [r6, #8]
 8008d22:	e7df      	b.n	8008ce4 <_vfiprintf_r+0x20>
 8008d24:	4b79      	ldr	r3, [pc, #484]	; (8008f0c <_vfiprintf_r+0x248>)
 8008d26:	429d      	cmp	r5, r3
 8008d28:	bf08      	it	eq
 8008d2a:	68f5      	ldreq	r5, [r6, #12]
 8008d2c:	e7da      	b.n	8008ce4 <_vfiprintf_r+0x20>
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	0598      	lsls	r0, r3, #22
 8008d32:	d4ed      	bmi.n	8008d10 <_vfiprintf_r+0x4c>
 8008d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d36:	f000 fd1a 	bl	800976e <__retarget_lock_release_recursive>
 8008d3a:	e7e9      	b.n	8008d10 <_vfiprintf_r+0x4c>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d40:	2320      	movs	r3, #32
 8008d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4a:	2330      	movs	r3, #48	; 0x30
 8008d4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f10 <_vfiprintf_r+0x24c>
 8008d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d54:	f04f 0901 	mov.w	r9, #1
 8008d58:	4623      	mov	r3, r4
 8008d5a:	469a      	mov	sl, r3
 8008d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d60:	b10a      	cbz	r2, 8008d66 <_vfiprintf_r+0xa2>
 8008d62:	2a25      	cmp	r2, #37	; 0x25
 8008d64:	d1f9      	bne.n	8008d5a <_vfiprintf_r+0x96>
 8008d66:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6a:	d00b      	beq.n	8008d84 <_vfiprintf_r+0xc0>
 8008d6c:	465b      	mov	r3, fp
 8008d6e:	4622      	mov	r2, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff ff93 	bl	8008c9e <__sfputs_r>
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f000 80aa 	beq.w	8008ed2 <_vfiprintf_r+0x20e>
 8008d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d80:	445a      	add	r2, fp
 8008d82:	9209      	str	r2, [sp, #36]	; 0x24
 8008d84:	f89a 3000 	ldrb.w	r3, [sl]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 80a2 	beq.w	8008ed2 <_vfiprintf_r+0x20e>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f04f 32ff 	mov.w	r2, #4294967295
 8008d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d98:	f10a 0a01 	add.w	sl, sl, #1
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	9307      	str	r3, [sp, #28]
 8008da0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008da4:	931a      	str	r3, [sp, #104]	; 0x68
 8008da6:	4654      	mov	r4, sl
 8008da8:	2205      	movs	r2, #5
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	4858      	ldr	r0, [pc, #352]	; (8008f10 <_vfiprintf_r+0x24c>)
 8008db0:	f7f7 fa4e 	bl	8000250 <memchr>
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	b9d8      	cbnz	r0, 8008df0 <_vfiprintf_r+0x12c>
 8008db8:	06d1      	lsls	r1, r2, #27
 8008dba:	bf44      	itt	mi
 8008dbc:	2320      	movmi	r3, #32
 8008dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc2:	0713      	lsls	r3, r2, #28
 8008dc4:	bf44      	itt	mi
 8008dc6:	232b      	movmi	r3, #43	; 0x2b
 8008dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd2:	d015      	beq.n	8008e00 <_vfiprintf_r+0x13c>
 8008dd4:	9a07      	ldr	r2, [sp, #28]
 8008dd6:	4654      	mov	r4, sl
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f04f 0c0a 	mov.w	ip, #10
 8008dde:	4621      	mov	r1, r4
 8008de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de4:	3b30      	subs	r3, #48	; 0x30
 8008de6:	2b09      	cmp	r3, #9
 8008de8:	d94e      	bls.n	8008e88 <_vfiprintf_r+0x1c4>
 8008dea:	b1b0      	cbz	r0, 8008e1a <_vfiprintf_r+0x156>
 8008dec:	9207      	str	r2, [sp, #28]
 8008dee:	e014      	b.n	8008e1a <_vfiprintf_r+0x156>
 8008df0:	eba0 0308 	sub.w	r3, r0, r8
 8008df4:	fa09 f303 	lsl.w	r3, r9, r3
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	46a2      	mov	sl, r4
 8008dfe:	e7d2      	b.n	8008da6 <_vfiprintf_r+0xe2>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	1d19      	adds	r1, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	9103      	str	r1, [sp, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bfbb      	ittet	lt
 8008e0c:	425b      	neglt	r3, r3
 8008e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e12:	9307      	strge	r3, [sp, #28]
 8008e14:	9307      	strlt	r3, [sp, #28]
 8008e16:	bfb8      	it	lt
 8008e18:	9204      	strlt	r2, [sp, #16]
 8008e1a:	7823      	ldrb	r3, [r4, #0]
 8008e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e1e:	d10c      	bne.n	8008e3a <_vfiprintf_r+0x176>
 8008e20:	7863      	ldrb	r3, [r4, #1]
 8008e22:	2b2a      	cmp	r3, #42	; 0x2a
 8008e24:	d135      	bne.n	8008e92 <_vfiprintf_r+0x1ce>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	1d1a      	adds	r2, r3, #4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	9203      	str	r2, [sp, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfb8      	it	lt
 8008e32:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e36:	3402      	adds	r4, #2
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f20 <_vfiprintf_r+0x25c>
 8008e3e:	7821      	ldrb	r1, [r4, #0]
 8008e40:	2203      	movs	r2, #3
 8008e42:	4650      	mov	r0, sl
 8008e44:	f7f7 fa04 	bl	8000250 <memchr>
 8008e48:	b140      	cbz	r0, 8008e5c <_vfiprintf_r+0x198>
 8008e4a:	2340      	movs	r3, #64	; 0x40
 8008e4c:	eba0 000a 	sub.w	r0, r0, sl
 8008e50:	fa03 f000 	lsl.w	r0, r3, r0
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	4303      	orrs	r3, r0
 8008e58:	3401      	adds	r4, #1
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e60:	482c      	ldr	r0, [pc, #176]	; (8008f14 <_vfiprintf_r+0x250>)
 8008e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e66:	2206      	movs	r2, #6
 8008e68:	f7f7 f9f2 	bl	8000250 <memchr>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d03f      	beq.n	8008ef0 <_vfiprintf_r+0x22c>
 8008e70:	4b29      	ldr	r3, [pc, #164]	; (8008f18 <_vfiprintf_r+0x254>)
 8008e72:	bb1b      	cbnz	r3, 8008ebc <_vfiprintf_r+0x1f8>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	3307      	adds	r3, #7
 8008e78:	f023 0307 	bic.w	r3, r3, #7
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	9303      	str	r3, [sp, #12]
 8008e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e82:	443b      	add	r3, r7
 8008e84:	9309      	str	r3, [sp, #36]	; 0x24
 8008e86:	e767      	b.n	8008d58 <_vfiprintf_r+0x94>
 8008e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	2001      	movs	r0, #1
 8008e90:	e7a5      	b.n	8008dde <_vfiprintf_r+0x11a>
 8008e92:	2300      	movs	r3, #0
 8008e94:	3401      	adds	r4, #1
 8008e96:	9305      	str	r3, [sp, #20]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	f04f 0c0a 	mov.w	ip, #10
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea4:	3a30      	subs	r2, #48	; 0x30
 8008ea6:	2a09      	cmp	r2, #9
 8008ea8:	d903      	bls.n	8008eb2 <_vfiprintf_r+0x1ee>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0c5      	beq.n	8008e3a <_vfiprintf_r+0x176>
 8008eae:	9105      	str	r1, [sp, #20]
 8008eb0:	e7c3      	b.n	8008e3a <_vfiprintf_r+0x176>
 8008eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e7f0      	b.n	8008e9e <_vfiprintf_r+0x1da>
 8008ebc:	ab03      	add	r3, sp, #12
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <_vfiprintf_r+0x258>)
 8008ec4:	a904      	add	r1, sp, #16
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f3af 8000 	nop.w
 8008ecc:	4607      	mov	r7, r0
 8008ece:	1c78      	adds	r0, r7, #1
 8008ed0:	d1d6      	bne.n	8008e80 <_vfiprintf_r+0x1bc>
 8008ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed4:	07d9      	lsls	r1, r3, #31
 8008ed6:	d405      	bmi.n	8008ee4 <_vfiprintf_r+0x220>
 8008ed8:	89ab      	ldrh	r3, [r5, #12]
 8008eda:	059a      	lsls	r2, r3, #22
 8008edc:	d402      	bmi.n	8008ee4 <_vfiprintf_r+0x220>
 8008ede:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ee0:	f000 fc45 	bl	800976e <__retarget_lock_release_recursive>
 8008ee4:	89ab      	ldrh	r3, [r5, #12]
 8008ee6:	065b      	lsls	r3, r3, #25
 8008ee8:	f53f af12 	bmi.w	8008d10 <_vfiprintf_r+0x4c>
 8008eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eee:	e711      	b.n	8008d14 <_vfiprintf_r+0x50>
 8008ef0:	ab03      	add	r3, sp, #12
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	462a      	mov	r2, r5
 8008ef6:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <_vfiprintf_r+0x258>)
 8008ef8:	a904      	add	r1, sp, #16
 8008efa:	4630      	mov	r0, r6
 8008efc:	f000 f880 	bl	8009000 <_printf_i>
 8008f00:	e7e4      	b.n	8008ecc <_vfiprintf_r+0x208>
 8008f02:	bf00      	nop
 8008f04:	08009dc8 	.word	0x08009dc8
 8008f08:	08009de8 	.word	0x08009de8
 8008f0c:	08009da8 	.word	0x08009da8
 8008f10:	08009d75 	.word	0x08009d75
 8008f14:	08009d7f 	.word	0x08009d7f
 8008f18:	00000000 	.word	0x00000000
 8008f1c:	08008c9f 	.word	0x08008c9f
 8008f20:	08009d7b 	.word	0x08009d7b

08008f24 <_printf_common>:
 8008f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f28:	4616      	mov	r6, r2
 8008f2a:	4699      	mov	r9, r3
 8008f2c:	688a      	ldr	r2, [r1, #8]
 8008f2e:	690b      	ldr	r3, [r1, #16]
 8008f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	bfb8      	it	lt
 8008f38:	4613      	movlt	r3, r2
 8008f3a:	6033      	str	r3, [r6, #0]
 8008f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f40:	4607      	mov	r7, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	b10a      	cbz	r2, 8008f4a <_printf_common+0x26>
 8008f46:	3301      	adds	r3, #1
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	0699      	lsls	r1, r3, #26
 8008f4e:	bf42      	ittt	mi
 8008f50:	6833      	ldrmi	r3, [r6, #0]
 8008f52:	3302      	addmi	r3, #2
 8008f54:	6033      	strmi	r3, [r6, #0]
 8008f56:	6825      	ldr	r5, [r4, #0]
 8008f58:	f015 0506 	ands.w	r5, r5, #6
 8008f5c:	d106      	bne.n	8008f6c <_printf_common+0x48>
 8008f5e:	f104 0a19 	add.w	sl, r4, #25
 8008f62:	68e3      	ldr	r3, [r4, #12]
 8008f64:	6832      	ldr	r2, [r6, #0]
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	dc26      	bgt.n	8008fba <_printf_common+0x96>
 8008f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f70:	1e13      	subs	r3, r2, #0
 8008f72:	6822      	ldr	r2, [r4, #0]
 8008f74:	bf18      	it	ne
 8008f76:	2301      	movne	r3, #1
 8008f78:	0692      	lsls	r2, r2, #26
 8008f7a:	d42b      	bmi.n	8008fd4 <_printf_common+0xb0>
 8008f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f80:	4649      	mov	r1, r9
 8008f82:	4638      	mov	r0, r7
 8008f84:	47c0      	blx	r8
 8008f86:	3001      	adds	r0, #1
 8008f88:	d01e      	beq.n	8008fc8 <_printf_common+0xa4>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	68e5      	ldr	r5, [r4, #12]
 8008f8e:	6832      	ldr	r2, [r6, #0]
 8008f90:	f003 0306 	and.w	r3, r3, #6
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	bf08      	it	eq
 8008f98:	1aad      	subeq	r5, r5, r2
 8008f9a:	68a3      	ldr	r3, [r4, #8]
 8008f9c:	6922      	ldr	r2, [r4, #16]
 8008f9e:	bf0c      	ite	eq
 8008fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa4:	2500      	movne	r5, #0
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	bfc4      	itt	gt
 8008faa:	1a9b      	subgt	r3, r3, r2
 8008fac:	18ed      	addgt	r5, r5, r3
 8008fae:	2600      	movs	r6, #0
 8008fb0:	341a      	adds	r4, #26
 8008fb2:	42b5      	cmp	r5, r6
 8008fb4:	d11a      	bne.n	8008fec <_printf_common+0xc8>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e008      	b.n	8008fcc <_printf_common+0xa8>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	47c0      	blx	r8
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d103      	bne.n	8008fd0 <_printf_common+0xac>
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	e7c6      	b.n	8008f62 <_printf_common+0x3e>
 8008fd4:	18e1      	adds	r1, r4, r3
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	2030      	movs	r0, #48	; 0x30
 8008fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fde:	4422      	add	r2, r4
 8008fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fe8:	3302      	adds	r3, #2
 8008fea:	e7c7      	b.n	8008f7c <_printf_common+0x58>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4622      	mov	r2, r4
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	47c0      	blx	r8
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d0e6      	beq.n	8008fc8 <_printf_common+0xa4>
 8008ffa:	3601      	adds	r6, #1
 8008ffc:	e7d9      	b.n	8008fb2 <_printf_common+0x8e>
	...

08009000 <_printf_i>:
 8009000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	7e0f      	ldrb	r7, [r1, #24]
 8009006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009008:	2f78      	cmp	r7, #120	; 0x78
 800900a:	4691      	mov	r9, r2
 800900c:	4680      	mov	r8, r0
 800900e:	460c      	mov	r4, r1
 8009010:	469a      	mov	sl, r3
 8009012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009016:	d807      	bhi.n	8009028 <_printf_i+0x28>
 8009018:	2f62      	cmp	r7, #98	; 0x62
 800901a:	d80a      	bhi.n	8009032 <_printf_i+0x32>
 800901c:	2f00      	cmp	r7, #0
 800901e:	f000 80d8 	beq.w	80091d2 <_printf_i+0x1d2>
 8009022:	2f58      	cmp	r7, #88	; 0x58
 8009024:	f000 80a3 	beq.w	800916e <_printf_i+0x16e>
 8009028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800902c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009030:	e03a      	b.n	80090a8 <_printf_i+0xa8>
 8009032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009036:	2b15      	cmp	r3, #21
 8009038:	d8f6      	bhi.n	8009028 <_printf_i+0x28>
 800903a:	a101      	add	r1, pc, #4	; (adr r1, 8009040 <_printf_i+0x40>)
 800903c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009040:	08009099 	.word	0x08009099
 8009044:	080090ad 	.word	0x080090ad
 8009048:	08009029 	.word	0x08009029
 800904c:	08009029 	.word	0x08009029
 8009050:	08009029 	.word	0x08009029
 8009054:	08009029 	.word	0x08009029
 8009058:	080090ad 	.word	0x080090ad
 800905c:	08009029 	.word	0x08009029
 8009060:	08009029 	.word	0x08009029
 8009064:	08009029 	.word	0x08009029
 8009068:	08009029 	.word	0x08009029
 800906c:	080091b9 	.word	0x080091b9
 8009070:	080090dd 	.word	0x080090dd
 8009074:	0800919b 	.word	0x0800919b
 8009078:	08009029 	.word	0x08009029
 800907c:	08009029 	.word	0x08009029
 8009080:	080091db 	.word	0x080091db
 8009084:	08009029 	.word	0x08009029
 8009088:	080090dd 	.word	0x080090dd
 800908c:	08009029 	.word	0x08009029
 8009090:	08009029 	.word	0x08009029
 8009094:	080091a3 	.word	0x080091a3
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	602a      	str	r2, [r5, #0]
 80090a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090a8:	2301      	movs	r3, #1
 80090aa:	e0a3      	b.n	80091f4 <_printf_i+0x1f4>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	6829      	ldr	r1, [r5, #0]
 80090b0:	0606      	lsls	r6, r0, #24
 80090b2:	f101 0304 	add.w	r3, r1, #4
 80090b6:	d50a      	bpl.n	80090ce <_printf_i+0xce>
 80090b8:	680e      	ldr	r6, [r1, #0]
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	2e00      	cmp	r6, #0
 80090be:	da03      	bge.n	80090c8 <_printf_i+0xc8>
 80090c0:	232d      	movs	r3, #45	; 0x2d
 80090c2:	4276      	negs	r6, r6
 80090c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c8:	485e      	ldr	r0, [pc, #376]	; (8009244 <_printf_i+0x244>)
 80090ca:	230a      	movs	r3, #10
 80090cc:	e019      	b.n	8009102 <_printf_i+0x102>
 80090ce:	680e      	ldr	r6, [r1, #0]
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090d6:	bf18      	it	ne
 80090d8:	b236      	sxthne	r6, r6
 80090da:	e7ef      	b.n	80090bc <_printf_i+0xbc>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	6820      	ldr	r0, [r4, #0]
 80090e0:	1d19      	adds	r1, r3, #4
 80090e2:	6029      	str	r1, [r5, #0]
 80090e4:	0601      	lsls	r1, r0, #24
 80090e6:	d501      	bpl.n	80090ec <_printf_i+0xec>
 80090e8:	681e      	ldr	r6, [r3, #0]
 80090ea:	e002      	b.n	80090f2 <_printf_i+0xf2>
 80090ec:	0646      	lsls	r6, r0, #25
 80090ee:	d5fb      	bpl.n	80090e8 <_printf_i+0xe8>
 80090f0:	881e      	ldrh	r6, [r3, #0]
 80090f2:	4854      	ldr	r0, [pc, #336]	; (8009244 <_printf_i+0x244>)
 80090f4:	2f6f      	cmp	r7, #111	; 0x6f
 80090f6:	bf0c      	ite	eq
 80090f8:	2308      	moveq	r3, #8
 80090fa:	230a      	movne	r3, #10
 80090fc:	2100      	movs	r1, #0
 80090fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009102:	6865      	ldr	r5, [r4, #4]
 8009104:	60a5      	str	r5, [r4, #8]
 8009106:	2d00      	cmp	r5, #0
 8009108:	bfa2      	ittt	ge
 800910a:	6821      	ldrge	r1, [r4, #0]
 800910c:	f021 0104 	bicge.w	r1, r1, #4
 8009110:	6021      	strge	r1, [r4, #0]
 8009112:	b90e      	cbnz	r6, 8009118 <_printf_i+0x118>
 8009114:	2d00      	cmp	r5, #0
 8009116:	d04d      	beq.n	80091b4 <_printf_i+0x1b4>
 8009118:	4615      	mov	r5, r2
 800911a:	fbb6 f1f3 	udiv	r1, r6, r3
 800911e:	fb03 6711 	mls	r7, r3, r1, r6
 8009122:	5dc7      	ldrb	r7, [r0, r7]
 8009124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009128:	4637      	mov	r7, r6
 800912a:	42bb      	cmp	r3, r7
 800912c:	460e      	mov	r6, r1
 800912e:	d9f4      	bls.n	800911a <_printf_i+0x11a>
 8009130:	2b08      	cmp	r3, #8
 8009132:	d10b      	bne.n	800914c <_printf_i+0x14c>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	07de      	lsls	r6, r3, #31
 8009138:	d508      	bpl.n	800914c <_printf_i+0x14c>
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	6861      	ldr	r1, [r4, #4]
 800913e:	4299      	cmp	r1, r3
 8009140:	bfde      	ittt	le
 8009142:	2330      	movle	r3, #48	; 0x30
 8009144:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009148:	f105 35ff 	addle.w	r5, r5, #4294967295
 800914c:	1b52      	subs	r2, r2, r5
 800914e:	6122      	str	r2, [r4, #16]
 8009150:	f8cd a000 	str.w	sl, [sp]
 8009154:	464b      	mov	r3, r9
 8009156:	aa03      	add	r2, sp, #12
 8009158:	4621      	mov	r1, r4
 800915a:	4640      	mov	r0, r8
 800915c:	f7ff fee2 	bl	8008f24 <_printf_common>
 8009160:	3001      	adds	r0, #1
 8009162:	d14c      	bne.n	80091fe <_printf_i+0x1fe>
 8009164:	f04f 30ff 	mov.w	r0, #4294967295
 8009168:	b004      	add	sp, #16
 800916a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916e:	4835      	ldr	r0, [pc, #212]	; (8009244 <_printf_i+0x244>)
 8009170:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009174:	6829      	ldr	r1, [r5, #0]
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	f851 6b04 	ldr.w	r6, [r1], #4
 800917c:	6029      	str	r1, [r5, #0]
 800917e:	061d      	lsls	r5, r3, #24
 8009180:	d514      	bpl.n	80091ac <_printf_i+0x1ac>
 8009182:	07df      	lsls	r7, r3, #31
 8009184:	bf44      	itt	mi
 8009186:	f043 0320 	orrmi.w	r3, r3, #32
 800918a:	6023      	strmi	r3, [r4, #0]
 800918c:	b91e      	cbnz	r6, 8009196 <_printf_i+0x196>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	f023 0320 	bic.w	r3, r3, #32
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	2310      	movs	r3, #16
 8009198:	e7b0      	b.n	80090fc <_printf_i+0xfc>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	f043 0320 	orr.w	r3, r3, #32
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	2378      	movs	r3, #120	; 0x78
 80091a4:	4828      	ldr	r0, [pc, #160]	; (8009248 <_printf_i+0x248>)
 80091a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091aa:	e7e3      	b.n	8009174 <_printf_i+0x174>
 80091ac:	0659      	lsls	r1, r3, #25
 80091ae:	bf48      	it	mi
 80091b0:	b2b6      	uxthmi	r6, r6
 80091b2:	e7e6      	b.n	8009182 <_printf_i+0x182>
 80091b4:	4615      	mov	r5, r2
 80091b6:	e7bb      	b.n	8009130 <_printf_i+0x130>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	6826      	ldr	r6, [r4, #0]
 80091bc:	6961      	ldr	r1, [r4, #20]
 80091be:	1d18      	adds	r0, r3, #4
 80091c0:	6028      	str	r0, [r5, #0]
 80091c2:	0635      	lsls	r5, r6, #24
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	d501      	bpl.n	80091cc <_printf_i+0x1cc>
 80091c8:	6019      	str	r1, [r3, #0]
 80091ca:	e002      	b.n	80091d2 <_printf_i+0x1d2>
 80091cc:	0670      	lsls	r0, r6, #25
 80091ce:	d5fb      	bpl.n	80091c8 <_printf_i+0x1c8>
 80091d0:	8019      	strh	r1, [r3, #0]
 80091d2:	2300      	movs	r3, #0
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	4615      	mov	r5, r2
 80091d8:	e7ba      	b.n	8009150 <_printf_i+0x150>
 80091da:	682b      	ldr	r3, [r5, #0]
 80091dc:	1d1a      	adds	r2, r3, #4
 80091de:	602a      	str	r2, [r5, #0]
 80091e0:	681d      	ldr	r5, [r3, #0]
 80091e2:	6862      	ldr	r2, [r4, #4]
 80091e4:	2100      	movs	r1, #0
 80091e6:	4628      	mov	r0, r5
 80091e8:	f7f7 f832 	bl	8000250 <memchr>
 80091ec:	b108      	cbz	r0, 80091f2 <_printf_i+0x1f2>
 80091ee:	1b40      	subs	r0, r0, r5
 80091f0:	6060      	str	r0, [r4, #4]
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	6123      	str	r3, [r4, #16]
 80091f6:	2300      	movs	r3, #0
 80091f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091fc:	e7a8      	b.n	8009150 <_printf_i+0x150>
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	462a      	mov	r2, r5
 8009202:	4649      	mov	r1, r9
 8009204:	4640      	mov	r0, r8
 8009206:	47d0      	blx	sl
 8009208:	3001      	adds	r0, #1
 800920a:	d0ab      	beq.n	8009164 <_printf_i+0x164>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	079b      	lsls	r3, r3, #30
 8009210:	d413      	bmi.n	800923a <_printf_i+0x23a>
 8009212:	68e0      	ldr	r0, [r4, #12]
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	4298      	cmp	r0, r3
 8009218:	bfb8      	it	lt
 800921a:	4618      	movlt	r0, r3
 800921c:	e7a4      	b.n	8009168 <_printf_i+0x168>
 800921e:	2301      	movs	r3, #1
 8009220:	4632      	mov	r2, r6
 8009222:	4649      	mov	r1, r9
 8009224:	4640      	mov	r0, r8
 8009226:	47d0      	blx	sl
 8009228:	3001      	adds	r0, #1
 800922a:	d09b      	beq.n	8009164 <_printf_i+0x164>
 800922c:	3501      	adds	r5, #1
 800922e:	68e3      	ldr	r3, [r4, #12]
 8009230:	9903      	ldr	r1, [sp, #12]
 8009232:	1a5b      	subs	r3, r3, r1
 8009234:	42ab      	cmp	r3, r5
 8009236:	dcf2      	bgt.n	800921e <_printf_i+0x21e>
 8009238:	e7eb      	b.n	8009212 <_printf_i+0x212>
 800923a:	2500      	movs	r5, #0
 800923c:	f104 0619 	add.w	r6, r4, #25
 8009240:	e7f5      	b.n	800922e <_printf_i+0x22e>
 8009242:	bf00      	nop
 8009244:	08009d86 	.word	0x08009d86
 8009248:	08009d97 	.word	0x08009d97

0800924c <_sbrk_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d06      	ldr	r5, [pc, #24]	; (8009268 <_sbrk_r+0x1c>)
 8009250:	2300      	movs	r3, #0
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	f7f8 fb08 	bl	800186c <_sbrk>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_sbrk_r+0x1a>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_sbrk_r+0x1a>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	2000033c 	.word	0x2000033c

0800926c <__swbuf_r>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	460e      	mov	r6, r1
 8009270:	4614      	mov	r4, r2
 8009272:	4605      	mov	r5, r0
 8009274:	b118      	cbz	r0, 800927e <__swbuf_r+0x12>
 8009276:	6983      	ldr	r3, [r0, #24]
 8009278:	b90b      	cbnz	r3, 800927e <__swbuf_r+0x12>
 800927a:	f000 f9d9 	bl	8009630 <__sinit>
 800927e:	4b21      	ldr	r3, [pc, #132]	; (8009304 <__swbuf_r+0x98>)
 8009280:	429c      	cmp	r4, r3
 8009282:	d12b      	bne.n	80092dc <__swbuf_r+0x70>
 8009284:	686c      	ldr	r4, [r5, #4]
 8009286:	69a3      	ldr	r3, [r4, #24]
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	071a      	lsls	r2, r3, #28
 800928e:	d52f      	bpl.n	80092f0 <__swbuf_r+0x84>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	b36b      	cbz	r3, 80092f0 <__swbuf_r+0x84>
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	6820      	ldr	r0, [r4, #0]
 8009298:	1ac0      	subs	r0, r0, r3
 800929a:	6963      	ldr	r3, [r4, #20]
 800929c:	b2f6      	uxtb	r6, r6
 800929e:	4283      	cmp	r3, r0
 80092a0:	4637      	mov	r7, r6
 80092a2:	dc04      	bgt.n	80092ae <__swbuf_r+0x42>
 80092a4:	4621      	mov	r1, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 f92e 	bl	8009508 <_fflush_r>
 80092ac:	bb30      	cbnz	r0, 80092fc <__swbuf_r+0x90>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	60a3      	str	r3, [r4, #8]
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	701e      	strb	r6, [r3, #0]
 80092bc:	6963      	ldr	r3, [r4, #20]
 80092be:	3001      	adds	r0, #1
 80092c0:	4283      	cmp	r3, r0
 80092c2:	d004      	beq.n	80092ce <__swbuf_r+0x62>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	07db      	lsls	r3, r3, #31
 80092c8:	d506      	bpl.n	80092d8 <__swbuf_r+0x6c>
 80092ca:	2e0a      	cmp	r6, #10
 80092cc:	d104      	bne.n	80092d8 <__swbuf_r+0x6c>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f000 f919 	bl	8009508 <_fflush_r>
 80092d6:	b988      	cbnz	r0, 80092fc <__swbuf_r+0x90>
 80092d8:	4638      	mov	r0, r7
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <__swbuf_r+0x9c>)
 80092de:	429c      	cmp	r4, r3
 80092e0:	d101      	bne.n	80092e6 <__swbuf_r+0x7a>
 80092e2:	68ac      	ldr	r4, [r5, #8]
 80092e4:	e7cf      	b.n	8009286 <__swbuf_r+0x1a>
 80092e6:	4b09      	ldr	r3, [pc, #36]	; (800930c <__swbuf_r+0xa0>)
 80092e8:	429c      	cmp	r4, r3
 80092ea:	bf08      	it	eq
 80092ec:	68ec      	ldreq	r4, [r5, #12]
 80092ee:	e7ca      	b.n	8009286 <__swbuf_r+0x1a>
 80092f0:	4621      	mov	r1, r4
 80092f2:	4628      	mov	r0, r5
 80092f4:	f000 f80c 	bl	8009310 <__swsetup_r>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d0cb      	beq.n	8009294 <__swbuf_r+0x28>
 80092fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009300:	e7ea      	b.n	80092d8 <__swbuf_r+0x6c>
 8009302:	bf00      	nop
 8009304:	08009dc8 	.word	0x08009dc8
 8009308:	08009de8 	.word	0x08009de8
 800930c:	08009da8 	.word	0x08009da8

08009310 <__swsetup_r>:
 8009310:	4b32      	ldr	r3, [pc, #200]	; (80093dc <__swsetup_r+0xcc>)
 8009312:	b570      	push	{r4, r5, r6, lr}
 8009314:	681d      	ldr	r5, [r3, #0]
 8009316:	4606      	mov	r6, r0
 8009318:	460c      	mov	r4, r1
 800931a:	b125      	cbz	r5, 8009326 <__swsetup_r+0x16>
 800931c:	69ab      	ldr	r3, [r5, #24]
 800931e:	b913      	cbnz	r3, 8009326 <__swsetup_r+0x16>
 8009320:	4628      	mov	r0, r5
 8009322:	f000 f985 	bl	8009630 <__sinit>
 8009326:	4b2e      	ldr	r3, [pc, #184]	; (80093e0 <__swsetup_r+0xd0>)
 8009328:	429c      	cmp	r4, r3
 800932a:	d10f      	bne.n	800934c <__swsetup_r+0x3c>
 800932c:	686c      	ldr	r4, [r5, #4]
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009334:	0719      	lsls	r1, r3, #28
 8009336:	d42c      	bmi.n	8009392 <__swsetup_r+0x82>
 8009338:	06dd      	lsls	r5, r3, #27
 800933a:	d411      	bmi.n	8009360 <__swsetup_r+0x50>
 800933c:	2309      	movs	r3, #9
 800933e:	6033      	str	r3, [r6, #0]
 8009340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009344:	81a3      	strh	r3, [r4, #12]
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	e03e      	b.n	80093ca <__swsetup_r+0xba>
 800934c:	4b25      	ldr	r3, [pc, #148]	; (80093e4 <__swsetup_r+0xd4>)
 800934e:	429c      	cmp	r4, r3
 8009350:	d101      	bne.n	8009356 <__swsetup_r+0x46>
 8009352:	68ac      	ldr	r4, [r5, #8]
 8009354:	e7eb      	b.n	800932e <__swsetup_r+0x1e>
 8009356:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <__swsetup_r+0xd8>)
 8009358:	429c      	cmp	r4, r3
 800935a:	bf08      	it	eq
 800935c:	68ec      	ldreq	r4, [r5, #12]
 800935e:	e7e6      	b.n	800932e <__swsetup_r+0x1e>
 8009360:	0758      	lsls	r0, r3, #29
 8009362:	d512      	bpl.n	800938a <__swsetup_r+0x7a>
 8009364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009366:	b141      	cbz	r1, 800937a <__swsetup_r+0x6a>
 8009368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800936c:	4299      	cmp	r1, r3
 800936e:	d002      	beq.n	8009376 <__swsetup_r+0x66>
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff fa41 	bl	80087f8 <_free_r>
 8009376:	2300      	movs	r3, #0
 8009378:	6363      	str	r3, [r4, #52]	; 0x34
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	2300      	movs	r3, #0
 8009384:	6063      	str	r3, [r4, #4]
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f043 0308 	orr.w	r3, r3, #8
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	b94b      	cbnz	r3, 80093aa <__swsetup_r+0x9a>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800939c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a0:	d003      	beq.n	80093aa <__swsetup_r+0x9a>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4630      	mov	r0, r6
 80093a6:	f000 fa09 	bl	80097bc <__smakebuf_r>
 80093aa:	89a0      	ldrh	r0, [r4, #12]
 80093ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093b0:	f010 0301 	ands.w	r3, r0, #1
 80093b4:	d00a      	beq.n	80093cc <__swsetup_r+0xbc>
 80093b6:	2300      	movs	r3, #0
 80093b8:	60a3      	str	r3, [r4, #8]
 80093ba:	6963      	ldr	r3, [r4, #20]
 80093bc:	425b      	negs	r3, r3
 80093be:	61a3      	str	r3, [r4, #24]
 80093c0:	6923      	ldr	r3, [r4, #16]
 80093c2:	b943      	cbnz	r3, 80093d6 <__swsetup_r+0xc6>
 80093c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093c8:	d1ba      	bne.n	8009340 <__swsetup_r+0x30>
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	0781      	lsls	r1, r0, #30
 80093ce:	bf58      	it	pl
 80093d0:	6963      	ldrpl	r3, [r4, #20]
 80093d2:	60a3      	str	r3, [r4, #8]
 80093d4:	e7f4      	b.n	80093c0 <__swsetup_r+0xb0>
 80093d6:	2000      	movs	r0, #0
 80093d8:	e7f7      	b.n	80093ca <__swsetup_r+0xba>
 80093da:	bf00      	nop
 80093dc:	200000b4 	.word	0x200000b4
 80093e0:	08009dc8 	.word	0x08009dc8
 80093e4:	08009de8 	.word	0x08009de8
 80093e8:	08009da8 	.word	0x08009da8

080093ec <abort>:
 80093ec:	b508      	push	{r3, lr}
 80093ee:	2006      	movs	r0, #6
 80093f0:	f000 fab0 	bl	8009954 <raise>
 80093f4:	2001      	movs	r0, #1
 80093f6:	f7f8 f9c1 	bl	800177c <_exit>
	...

080093fc <__sflush_r>:
 80093fc:	898a      	ldrh	r2, [r1, #12]
 80093fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009402:	4605      	mov	r5, r0
 8009404:	0710      	lsls	r0, r2, #28
 8009406:	460c      	mov	r4, r1
 8009408:	d458      	bmi.n	80094bc <__sflush_r+0xc0>
 800940a:	684b      	ldr	r3, [r1, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dc05      	bgt.n	800941c <__sflush_r+0x20>
 8009410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009412:	2b00      	cmp	r3, #0
 8009414:	dc02      	bgt.n	800941c <__sflush_r+0x20>
 8009416:	2000      	movs	r0, #0
 8009418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800941e:	2e00      	cmp	r6, #0
 8009420:	d0f9      	beq.n	8009416 <__sflush_r+0x1a>
 8009422:	2300      	movs	r3, #0
 8009424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009428:	682f      	ldr	r7, [r5, #0]
 800942a:	602b      	str	r3, [r5, #0]
 800942c:	d032      	beq.n	8009494 <__sflush_r+0x98>
 800942e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	075a      	lsls	r2, r3, #29
 8009434:	d505      	bpl.n	8009442 <__sflush_r+0x46>
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	1ac0      	subs	r0, r0, r3
 800943a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800943c:	b10b      	cbz	r3, 8009442 <__sflush_r+0x46>
 800943e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009440:	1ac0      	subs	r0, r0, r3
 8009442:	2300      	movs	r3, #0
 8009444:	4602      	mov	r2, r0
 8009446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009448:	6a21      	ldr	r1, [r4, #32]
 800944a:	4628      	mov	r0, r5
 800944c:	47b0      	blx	r6
 800944e:	1c43      	adds	r3, r0, #1
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	d106      	bne.n	8009462 <__sflush_r+0x66>
 8009454:	6829      	ldr	r1, [r5, #0]
 8009456:	291d      	cmp	r1, #29
 8009458:	d82c      	bhi.n	80094b4 <__sflush_r+0xb8>
 800945a:	4a2a      	ldr	r2, [pc, #168]	; (8009504 <__sflush_r+0x108>)
 800945c:	40ca      	lsrs	r2, r1
 800945e:	07d6      	lsls	r6, r2, #31
 8009460:	d528      	bpl.n	80094b4 <__sflush_r+0xb8>
 8009462:	2200      	movs	r2, #0
 8009464:	6062      	str	r2, [r4, #4]
 8009466:	04d9      	lsls	r1, r3, #19
 8009468:	6922      	ldr	r2, [r4, #16]
 800946a:	6022      	str	r2, [r4, #0]
 800946c:	d504      	bpl.n	8009478 <__sflush_r+0x7c>
 800946e:	1c42      	adds	r2, r0, #1
 8009470:	d101      	bne.n	8009476 <__sflush_r+0x7a>
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	b903      	cbnz	r3, 8009478 <__sflush_r+0x7c>
 8009476:	6560      	str	r0, [r4, #84]	; 0x54
 8009478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800947a:	602f      	str	r7, [r5, #0]
 800947c:	2900      	cmp	r1, #0
 800947e:	d0ca      	beq.n	8009416 <__sflush_r+0x1a>
 8009480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009484:	4299      	cmp	r1, r3
 8009486:	d002      	beq.n	800948e <__sflush_r+0x92>
 8009488:	4628      	mov	r0, r5
 800948a:	f7ff f9b5 	bl	80087f8 <_free_r>
 800948e:	2000      	movs	r0, #0
 8009490:	6360      	str	r0, [r4, #52]	; 0x34
 8009492:	e7c1      	b.n	8009418 <__sflush_r+0x1c>
 8009494:	6a21      	ldr	r1, [r4, #32]
 8009496:	2301      	movs	r3, #1
 8009498:	4628      	mov	r0, r5
 800949a:	47b0      	blx	r6
 800949c:	1c41      	adds	r1, r0, #1
 800949e:	d1c7      	bne.n	8009430 <__sflush_r+0x34>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0c4      	beq.n	8009430 <__sflush_r+0x34>
 80094a6:	2b1d      	cmp	r3, #29
 80094a8:	d001      	beq.n	80094ae <__sflush_r+0xb2>
 80094aa:	2b16      	cmp	r3, #22
 80094ac:	d101      	bne.n	80094b2 <__sflush_r+0xb6>
 80094ae:	602f      	str	r7, [r5, #0]
 80094b0:	e7b1      	b.n	8009416 <__sflush_r+0x1a>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	e7ad      	b.n	8009418 <__sflush_r+0x1c>
 80094bc:	690f      	ldr	r7, [r1, #16]
 80094be:	2f00      	cmp	r7, #0
 80094c0:	d0a9      	beq.n	8009416 <__sflush_r+0x1a>
 80094c2:	0793      	lsls	r3, r2, #30
 80094c4:	680e      	ldr	r6, [r1, #0]
 80094c6:	bf08      	it	eq
 80094c8:	694b      	ldreq	r3, [r1, #20]
 80094ca:	600f      	str	r7, [r1, #0]
 80094cc:	bf18      	it	ne
 80094ce:	2300      	movne	r3, #0
 80094d0:	eba6 0807 	sub.w	r8, r6, r7
 80094d4:	608b      	str	r3, [r1, #8]
 80094d6:	f1b8 0f00 	cmp.w	r8, #0
 80094da:	dd9c      	ble.n	8009416 <__sflush_r+0x1a>
 80094dc:	6a21      	ldr	r1, [r4, #32]
 80094de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094e0:	4643      	mov	r3, r8
 80094e2:	463a      	mov	r2, r7
 80094e4:	4628      	mov	r0, r5
 80094e6:	47b0      	blx	r6
 80094e8:	2800      	cmp	r0, #0
 80094ea:	dc06      	bgt.n	80094fa <__sflush_r+0xfe>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	f04f 30ff 	mov.w	r0, #4294967295
 80094f8:	e78e      	b.n	8009418 <__sflush_r+0x1c>
 80094fa:	4407      	add	r7, r0
 80094fc:	eba8 0800 	sub.w	r8, r8, r0
 8009500:	e7e9      	b.n	80094d6 <__sflush_r+0xda>
 8009502:	bf00      	nop
 8009504:	20400001 	.word	0x20400001

08009508 <_fflush_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	690b      	ldr	r3, [r1, #16]
 800950c:	4605      	mov	r5, r0
 800950e:	460c      	mov	r4, r1
 8009510:	b913      	cbnz	r3, 8009518 <_fflush_r+0x10>
 8009512:	2500      	movs	r5, #0
 8009514:	4628      	mov	r0, r5
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	b118      	cbz	r0, 8009522 <_fflush_r+0x1a>
 800951a:	6983      	ldr	r3, [r0, #24]
 800951c:	b90b      	cbnz	r3, 8009522 <_fflush_r+0x1a>
 800951e:	f000 f887 	bl	8009630 <__sinit>
 8009522:	4b14      	ldr	r3, [pc, #80]	; (8009574 <_fflush_r+0x6c>)
 8009524:	429c      	cmp	r4, r3
 8009526:	d11b      	bne.n	8009560 <_fflush_r+0x58>
 8009528:	686c      	ldr	r4, [r5, #4]
 800952a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0ef      	beq.n	8009512 <_fflush_r+0xa>
 8009532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009534:	07d0      	lsls	r0, r2, #31
 8009536:	d404      	bmi.n	8009542 <_fflush_r+0x3a>
 8009538:	0599      	lsls	r1, r3, #22
 800953a:	d402      	bmi.n	8009542 <_fflush_r+0x3a>
 800953c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800953e:	f000 f915 	bl	800976c <__retarget_lock_acquire_recursive>
 8009542:	4628      	mov	r0, r5
 8009544:	4621      	mov	r1, r4
 8009546:	f7ff ff59 	bl	80093fc <__sflush_r>
 800954a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800954c:	07da      	lsls	r2, r3, #31
 800954e:	4605      	mov	r5, r0
 8009550:	d4e0      	bmi.n	8009514 <_fflush_r+0xc>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	059b      	lsls	r3, r3, #22
 8009556:	d4dd      	bmi.n	8009514 <_fflush_r+0xc>
 8009558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800955a:	f000 f908 	bl	800976e <__retarget_lock_release_recursive>
 800955e:	e7d9      	b.n	8009514 <_fflush_r+0xc>
 8009560:	4b05      	ldr	r3, [pc, #20]	; (8009578 <_fflush_r+0x70>)
 8009562:	429c      	cmp	r4, r3
 8009564:	d101      	bne.n	800956a <_fflush_r+0x62>
 8009566:	68ac      	ldr	r4, [r5, #8]
 8009568:	e7df      	b.n	800952a <_fflush_r+0x22>
 800956a:	4b04      	ldr	r3, [pc, #16]	; (800957c <_fflush_r+0x74>)
 800956c:	429c      	cmp	r4, r3
 800956e:	bf08      	it	eq
 8009570:	68ec      	ldreq	r4, [r5, #12]
 8009572:	e7da      	b.n	800952a <_fflush_r+0x22>
 8009574:	08009dc8 	.word	0x08009dc8
 8009578:	08009de8 	.word	0x08009de8
 800957c:	08009da8 	.word	0x08009da8

08009580 <std>:
 8009580:	2300      	movs	r3, #0
 8009582:	b510      	push	{r4, lr}
 8009584:	4604      	mov	r4, r0
 8009586:	e9c0 3300 	strd	r3, r3, [r0]
 800958a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800958e:	6083      	str	r3, [r0, #8]
 8009590:	8181      	strh	r1, [r0, #12]
 8009592:	6643      	str	r3, [r0, #100]	; 0x64
 8009594:	81c2      	strh	r2, [r0, #14]
 8009596:	6183      	str	r3, [r0, #24]
 8009598:	4619      	mov	r1, r3
 800959a:	2208      	movs	r2, #8
 800959c:	305c      	adds	r0, #92	; 0x5c
 800959e:	f7fe ffcf 	bl	8008540 <memset>
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <std+0x38>)
 80095a4:	6263      	str	r3, [r4, #36]	; 0x24
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <std+0x3c>)
 80095a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <std+0x40>)
 80095ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095ae:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <std+0x44>)
 80095b0:	6224      	str	r4, [r4, #32]
 80095b2:	6323      	str	r3, [r4, #48]	; 0x30
 80095b4:	bd10      	pop	{r4, pc}
 80095b6:	bf00      	nop
 80095b8:	0800998d 	.word	0x0800998d
 80095bc:	080099af 	.word	0x080099af
 80095c0:	080099e7 	.word	0x080099e7
 80095c4:	08009a0b 	.word	0x08009a0b

080095c8 <_cleanup_r>:
 80095c8:	4901      	ldr	r1, [pc, #4]	; (80095d0 <_cleanup_r+0x8>)
 80095ca:	f000 b8af 	b.w	800972c <_fwalk_reent>
 80095ce:	bf00      	nop
 80095d0:	08009509 	.word	0x08009509

080095d4 <__sfmoreglue>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	2268      	movs	r2, #104	; 0x68
 80095d8:	1e4d      	subs	r5, r1, #1
 80095da:	4355      	muls	r5, r2
 80095dc:	460e      	mov	r6, r1
 80095de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095e2:	f7ff f975 	bl	80088d0 <_malloc_r>
 80095e6:	4604      	mov	r4, r0
 80095e8:	b140      	cbz	r0, 80095fc <__sfmoreglue+0x28>
 80095ea:	2100      	movs	r1, #0
 80095ec:	e9c0 1600 	strd	r1, r6, [r0]
 80095f0:	300c      	adds	r0, #12
 80095f2:	60a0      	str	r0, [r4, #8]
 80095f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095f8:	f7fe ffa2 	bl	8008540 <memset>
 80095fc:	4620      	mov	r0, r4
 80095fe:	bd70      	pop	{r4, r5, r6, pc}

08009600 <__sfp_lock_acquire>:
 8009600:	4801      	ldr	r0, [pc, #4]	; (8009608 <__sfp_lock_acquire+0x8>)
 8009602:	f000 b8b3 	b.w	800976c <__retarget_lock_acquire_recursive>
 8009606:	bf00      	nop
 8009608:	20000339 	.word	0x20000339

0800960c <__sfp_lock_release>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__sfp_lock_release+0x8>)
 800960e:	f000 b8ae 	b.w	800976e <__retarget_lock_release_recursive>
 8009612:	bf00      	nop
 8009614:	20000339 	.word	0x20000339

08009618 <__sinit_lock_acquire>:
 8009618:	4801      	ldr	r0, [pc, #4]	; (8009620 <__sinit_lock_acquire+0x8>)
 800961a:	f000 b8a7 	b.w	800976c <__retarget_lock_acquire_recursive>
 800961e:	bf00      	nop
 8009620:	2000033a 	.word	0x2000033a

08009624 <__sinit_lock_release>:
 8009624:	4801      	ldr	r0, [pc, #4]	; (800962c <__sinit_lock_release+0x8>)
 8009626:	f000 b8a2 	b.w	800976e <__retarget_lock_release_recursive>
 800962a:	bf00      	nop
 800962c:	2000033a 	.word	0x2000033a

08009630 <__sinit>:
 8009630:	b510      	push	{r4, lr}
 8009632:	4604      	mov	r4, r0
 8009634:	f7ff fff0 	bl	8009618 <__sinit_lock_acquire>
 8009638:	69a3      	ldr	r3, [r4, #24]
 800963a:	b11b      	cbz	r3, 8009644 <__sinit+0x14>
 800963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009640:	f7ff bff0 	b.w	8009624 <__sinit_lock_release>
 8009644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009648:	6523      	str	r3, [r4, #80]	; 0x50
 800964a:	4b13      	ldr	r3, [pc, #76]	; (8009698 <__sinit+0x68>)
 800964c:	4a13      	ldr	r2, [pc, #76]	; (800969c <__sinit+0x6c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	62a2      	str	r2, [r4, #40]	; 0x28
 8009652:	42a3      	cmp	r3, r4
 8009654:	bf04      	itt	eq
 8009656:	2301      	moveq	r3, #1
 8009658:	61a3      	streq	r3, [r4, #24]
 800965a:	4620      	mov	r0, r4
 800965c:	f000 f820 	bl	80096a0 <__sfp>
 8009660:	6060      	str	r0, [r4, #4]
 8009662:	4620      	mov	r0, r4
 8009664:	f000 f81c 	bl	80096a0 <__sfp>
 8009668:	60a0      	str	r0, [r4, #8]
 800966a:	4620      	mov	r0, r4
 800966c:	f000 f818 	bl	80096a0 <__sfp>
 8009670:	2200      	movs	r2, #0
 8009672:	60e0      	str	r0, [r4, #12]
 8009674:	2104      	movs	r1, #4
 8009676:	6860      	ldr	r0, [r4, #4]
 8009678:	f7ff ff82 	bl	8009580 <std>
 800967c:	68a0      	ldr	r0, [r4, #8]
 800967e:	2201      	movs	r2, #1
 8009680:	2109      	movs	r1, #9
 8009682:	f7ff ff7d 	bl	8009580 <std>
 8009686:	68e0      	ldr	r0, [r4, #12]
 8009688:	2202      	movs	r2, #2
 800968a:	2112      	movs	r1, #18
 800968c:	f7ff ff78 	bl	8009580 <std>
 8009690:	2301      	movs	r3, #1
 8009692:	61a3      	str	r3, [r4, #24]
 8009694:	e7d2      	b.n	800963c <__sinit+0xc>
 8009696:	bf00      	nop
 8009698:	08009bc0 	.word	0x08009bc0
 800969c:	080095c9 	.word	0x080095c9

080096a0 <__sfp>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	4607      	mov	r7, r0
 80096a4:	f7ff ffac 	bl	8009600 <__sfp_lock_acquire>
 80096a8:	4b1e      	ldr	r3, [pc, #120]	; (8009724 <__sfp+0x84>)
 80096aa:	681e      	ldr	r6, [r3, #0]
 80096ac:	69b3      	ldr	r3, [r6, #24]
 80096ae:	b913      	cbnz	r3, 80096b6 <__sfp+0x16>
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff ffbd 	bl	8009630 <__sinit>
 80096b6:	3648      	adds	r6, #72	; 0x48
 80096b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096bc:	3b01      	subs	r3, #1
 80096be:	d503      	bpl.n	80096c8 <__sfp+0x28>
 80096c0:	6833      	ldr	r3, [r6, #0]
 80096c2:	b30b      	cbz	r3, 8009708 <__sfp+0x68>
 80096c4:	6836      	ldr	r6, [r6, #0]
 80096c6:	e7f7      	b.n	80096b8 <__sfp+0x18>
 80096c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096cc:	b9d5      	cbnz	r5, 8009704 <__sfp+0x64>
 80096ce:	4b16      	ldr	r3, [pc, #88]	; (8009728 <__sfp+0x88>)
 80096d0:	60e3      	str	r3, [r4, #12]
 80096d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096d6:	6665      	str	r5, [r4, #100]	; 0x64
 80096d8:	f000 f847 	bl	800976a <__retarget_lock_init_recursive>
 80096dc:	f7ff ff96 	bl	800960c <__sfp_lock_release>
 80096e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096e8:	6025      	str	r5, [r4, #0]
 80096ea:	61a5      	str	r5, [r4, #24]
 80096ec:	2208      	movs	r2, #8
 80096ee:	4629      	mov	r1, r5
 80096f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096f4:	f7fe ff24 	bl	8008540 <memset>
 80096f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009700:	4620      	mov	r0, r4
 8009702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009704:	3468      	adds	r4, #104	; 0x68
 8009706:	e7d9      	b.n	80096bc <__sfp+0x1c>
 8009708:	2104      	movs	r1, #4
 800970a:	4638      	mov	r0, r7
 800970c:	f7ff ff62 	bl	80095d4 <__sfmoreglue>
 8009710:	4604      	mov	r4, r0
 8009712:	6030      	str	r0, [r6, #0]
 8009714:	2800      	cmp	r0, #0
 8009716:	d1d5      	bne.n	80096c4 <__sfp+0x24>
 8009718:	f7ff ff78 	bl	800960c <__sfp_lock_release>
 800971c:	230c      	movs	r3, #12
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	e7ee      	b.n	8009700 <__sfp+0x60>
 8009722:	bf00      	nop
 8009724:	08009bc0 	.word	0x08009bc0
 8009728:	ffff0001 	.word	0xffff0001

0800972c <_fwalk_reent>:
 800972c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009730:	4606      	mov	r6, r0
 8009732:	4688      	mov	r8, r1
 8009734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009738:	2700      	movs	r7, #0
 800973a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800973e:	f1b9 0901 	subs.w	r9, r9, #1
 8009742:	d505      	bpl.n	8009750 <_fwalk_reent+0x24>
 8009744:	6824      	ldr	r4, [r4, #0]
 8009746:	2c00      	cmp	r4, #0
 8009748:	d1f7      	bne.n	800973a <_fwalk_reent+0xe>
 800974a:	4638      	mov	r0, r7
 800974c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009750:	89ab      	ldrh	r3, [r5, #12]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d907      	bls.n	8009766 <_fwalk_reent+0x3a>
 8009756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800975a:	3301      	adds	r3, #1
 800975c:	d003      	beq.n	8009766 <_fwalk_reent+0x3a>
 800975e:	4629      	mov	r1, r5
 8009760:	4630      	mov	r0, r6
 8009762:	47c0      	blx	r8
 8009764:	4307      	orrs	r7, r0
 8009766:	3568      	adds	r5, #104	; 0x68
 8009768:	e7e9      	b.n	800973e <_fwalk_reent+0x12>

0800976a <__retarget_lock_init_recursive>:
 800976a:	4770      	bx	lr

0800976c <__retarget_lock_acquire_recursive>:
 800976c:	4770      	bx	lr

0800976e <__retarget_lock_release_recursive>:
 800976e:	4770      	bx	lr

08009770 <__swhatbuf_r>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	460e      	mov	r6, r1
 8009774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009778:	2900      	cmp	r1, #0
 800977a:	b096      	sub	sp, #88	; 0x58
 800977c:	4614      	mov	r4, r2
 800977e:	461d      	mov	r5, r3
 8009780:	da08      	bge.n	8009794 <__swhatbuf_r+0x24>
 8009782:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	061a      	lsls	r2, r3, #24
 800978c:	d410      	bmi.n	80097b0 <__swhatbuf_r+0x40>
 800978e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009792:	e00e      	b.n	80097b2 <__swhatbuf_r+0x42>
 8009794:	466a      	mov	r2, sp
 8009796:	f000 f95f 	bl	8009a58 <_fstat_r>
 800979a:	2800      	cmp	r0, #0
 800979c:	dbf1      	blt.n	8009782 <__swhatbuf_r+0x12>
 800979e:	9a01      	ldr	r2, [sp, #4]
 80097a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097a8:	425a      	negs	r2, r3
 80097aa:	415a      	adcs	r2, r3
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	e7ee      	b.n	800978e <__swhatbuf_r+0x1e>
 80097b0:	2340      	movs	r3, #64	; 0x40
 80097b2:	2000      	movs	r0, #0
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	b016      	add	sp, #88	; 0x58
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080097bc <__smakebuf_r>:
 80097bc:	898b      	ldrh	r3, [r1, #12]
 80097be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097c0:	079d      	lsls	r5, r3, #30
 80097c2:	4606      	mov	r6, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	d507      	bpl.n	80097d8 <__smakebuf_r+0x1c>
 80097c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	2301      	movs	r3, #1
 80097d2:	6163      	str	r3, [r4, #20]
 80097d4:	b002      	add	sp, #8
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	ab01      	add	r3, sp, #4
 80097da:	466a      	mov	r2, sp
 80097dc:	f7ff ffc8 	bl	8009770 <__swhatbuf_r>
 80097e0:	9900      	ldr	r1, [sp, #0]
 80097e2:	4605      	mov	r5, r0
 80097e4:	4630      	mov	r0, r6
 80097e6:	f7ff f873 	bl	80088d0 <_malloc_r>
 80097ea:	b948      	cbnz	r0, 8009800 <__smakebuf_r+0x44>
 80097ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f0:	059a      	lsls	r2, r3, #22
 80097f2:	d4ef      	bmi.n	80097d4 <__smakebuf_r+0x18>
 80097f4:	f023 0303 	bic.w	r3, r3, #3
 80097f8:	f043 0302 	orr.w	r3, r3, #2
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	e7e3      	b.n	80097c8 <__smakebuf_r+0xc>
 8009800:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <__smakebuf_r+0x7c>)
 8009802:	62b3      	str	r3, [r6, #40]	; 0x28
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	6020      	str	r0, [r4, #0]
 8009808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	6163      	str	r3, [r4, #20]
 8009812:	9b01      	ldr	r3, [sp, #4]
 8009814:	6120      	str	r0, [r4, #16]
 8009816:	b15b      	cbz	r3, 8009830 <__smakebuf_r+0x74>
 8009818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800981c:	4630      	mov	r0, r6
 800981e:	f000 f92d 	bl	8009a7c <_isatty_r>
 8009822:	b128      	cbz	r0, 8009830 <__smakebuf_r+0x74>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	f023 0303 	bic.w	r3, r3, #3
 800982a:	f043 0301 	orr.w	r3, r3, #1
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	89a0      	ldrh	r0, [r4, #12]
 8009832:	4305      	orrs	r5, r0
 8009834:	81a5      	strh	r5, [r4, #12]
 8009836:	e7cd      	b.n	80097d4 <__smakebuf_r+0x18>
 8009838:	080095c9 	.word	0x080095c9

0800983c <memcpy>:
 800983c:	440a      	add	r2, r1
 800983e:	4291      	cmp	r1, r2
 8009840:	f100 33ff 	add.w	r3, r0, #4294967295
 8009844:	d100      	bne.n	8009848 <memcpy+0xc>
 8009846:	4770      	bx	lr
 8009848:	b510      	push	{r4, lr}
 800984a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009852:	4291      	cmp	r1, r2
 8009854:	d1f9      	bne.n	800984a <memcpy+0xe>
 8009856:	bd10      	pop	{r4, pc}

08009858 <memmove>:
 8009858:	4288      	cmp	r0, r1
 800985a:	b510      	push	{r4, lr}
 800985c:	eb01 0402 	add.w	r4, r1, r2
 8009860:	d902      	bls.n	8009868 <memmove+0x10>
 8009862:	4284      	cmp	r4, r0
 8009864:	4623      	mov	r3, r4
 8009866:	d807      	bhi.n	8009878 <memmove+0x20>
 8009868:	1e43      	subs	r3, r0, #1
 800986a:	42a1      	cmp	r1, r4
 800986c:	d008      	beq.n	8009880 <memmove+0x28>
 800986e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009876:	e7f8      	b.n	800986a <memmove+0x12>
 8009878:	4402      	add	r2, r0
 800987a:	4601      	mov	r1, r0
 800987c:	428a      	cmp	r2, r1
 800987e:	d100      	bne.n	8009882 <memmove+0x2a>
 8009880:	bd10      	pop	{r4, pc}
 8009882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800988a:	e7f7      	b.n	800987c <memmove+0x24>

0800988c <__malloc_lock>:
 800988c:	4801      	ldr	r0, [pc, #4]	; (8009894 <__malloc_lock+0x8>)
 800988e:	f7ff bf6d 	b.w	800976c <__retarget_lock_acquire_recursive>
 8009892:	bf00      	nop
 8009894:	20000338 	.word	0x20000338

08009898 <__malloc_unlock>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__malloc_unlock+0x8>)
 800989a:	f7ff bf68 	b.w	800976e <__retarget_lock_release_recursive>
 800989e:	bf00      	nop
 80098a0:	20000338 	.word	0x20000338

080098a4 <_realloc_r>:
 80098a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a8:	4680      	mov	r8, r0
 80098aa:	4614      	mov	r4, r2
 80098ac:	460e      	mov	r6, r1
 80098ae:	b921      	cbnz	r1, 80098ba <_realloc_r+0x16>
 80098b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	4611      	mov	r1, r2
 80098b6:	f7ff b80b 	b.w	80088d0 <_malloc_r>
 80098ba:	b92a      	cbnz	r2, 80098c8 <_realloc_r+0x24>
 80098bc:	f7fe ff9c 	bl	80087f8 <_free_r>
 80098c0:	4625      	mov	r5, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c8:	f000 f8fa 	bl	8009ac0 <_malloc_usable_size_r>
 80098cc:	4284      	cmp	r4, r0
 80098ce:	4607      	mov	r7, r0
 80098d0:	d802      	bhi.n	80098d8 <_realloc_r+0x34>
 80098d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098d6:	d812      	bhi.n	80098fe <_realloc_r+0x5a>
 80098d8:	4621      	mov	r1, r4
 80098da:	4640      	mov	r0, r8
 80098dc:	f7fe fff8 	bl	80088d0 <_malloc_r>
 80098e0:	4605      	mov	r5, r0
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d0ed      	beq.n	80098c2 <_realloc_r+0x1e>
 80098e6:	42bc      	cmp	r4, r7
 80098e8:	4622      	mov	r2, r4
 80098ea:	4631      	mov	r1, r6
 80098ec:	bf28      	it	cs
 80098ee:	463a      	movcs	r2, r7
 80098f0:	f7ff ffa4 	bl	800983c <memcpy>
 80098f4:	4631      	mov	r1, r6
 80098f6:	4640      	mov	r0, r8
 80098f8:	f7fe ff7e 	bl	80087f8 <_free_r>
 80098fc:	e7e1      	b.n	80098c2 <_realloc_r+0x1e>
 80098fe:	4635      	mov	r5, r6
 8009900:	e7df      	b.n	80098c2 <_realloc_r+0x1e>

08009902 <_raise_r>:
 8009902:	291f      	cmp	r1, #31
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4604      	mov	r4, r0
 8009908:	460d      	mov	r5, r1
 800990a:	d904      	bls.n	8009916 <_raise_r+0x14>
 800990c:	2316      	movs	r3, #22
 800990e:	6003      	str	r3, [r0, #0]
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	bd38      	pop	{r3, r4, r5, pc}
 8009916:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009918:	b112      	cbz	r2, 8009920 <_raise_r+0x1e>
 800991a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800991e:	b94b      	cbnz	r3, 8009934 <_raise_r+0x32>
 8009920:	4620      	mov	r0, r4
 8009922:	f000 f831 	bl	8009988 <_getpid_r>
 8009926:	462a      	mov	r2, r5
 8009928:	4601      	mov	r1, r0
 800992a:	4620      	mov	r0, r4
 800992c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009930:	f000 b818 	b.w	8009964 <_kill_r>
 8009934:	2b01      	cmp	r3, #1
 8009936:	d00a      	beq.n	800994e <_raise_r+0x4c>
 8009938:	1c59      	adds	r1, r3, #1
 800993a:	d103      	bne.n	8009944 <_raise_r+0x42>
 800993c:	2316      	movs	r3, #22
 800993e:	6003      	str	r3, [r0, #0]
 8009940:	2001      	movs	r0, #1
 8009942:	e7e7      	b.n	8009914 <_raise_r+0x12>
 8009944:	2400      	movs	r4, #0
 8009946:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800994a:	4628      	mov	r0, r5
 800994c:	4798      	blx	r3
 800994e:	2000      	movs	r0, #0
 8009950:	e7e0      	b.n	8009914 <_raise_r+0x12>
	...

08009954 <raise>:
 8009954:	4b02      	ldr	r3, [pc, #8]	; (8009960 <raise+0xc>)
 8009956:	4601      	mov	r1, r0
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f7ff bfd2 	b.w	8009902 <_raise_r>
 800995e:	bf00      	nop
 8009960:	200000b4 	.word	0x200000b4

08009964 <_kill_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d07      	ldr	r5, [pc, #28]	; (8009984 <_kill_r+0x20>)
 8009968:	2300      	movs	r3, #0
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	4611      	mov	r1, r2
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	f7f7 fef3 	bl	800175c <_kill>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d102      	bne.n	8009980 <_kill_r+0x1c>
 800997a:	682b      	ldr	r3, [r5, #0]
 800997c:	b103      	cbz	r3, 8009980 <_kill_r+0x1c>
 800997e:	6023      	str	r3, [r4, #0]
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	bf00      	nop
 8009984:	2000033c 	.word	0x2000033c

08009988 <_getpid_r>:
 8009988:	f7f7 bee0 	b.w	800174c <_getpid>

0800998c <__sread>:
 800998c:	b510      	push	{r4, lr}
 800998e:	460c      	mov	r4, r1
 8009990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009994:	f000 f89c 	bl	8009ad0 <_read_r>
 8009998:	2800      	cmp	r0, #0
 800999a:	bfab      	itete	ge
 800999c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800999e:	89a3      	ldrhlt	r3, [r4, #12]
 80099a0:	181b      	addge	r3, r3, r0
 80099a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099a6:	bfac      	ite	ge
 80099a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80099aa:	81a3      	strhlt	r3, [r4, #12]
 80099ac:	bd10      	pop	{r4, pc}

080099ae <__swrite>:
 80099ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b2:	461f      	mov	r7, r3
 80099b4:	898b      	ldrh	r3, [r1, #12]
 80099b6:	05db      	lsls	r3, r3, #23
 80099b8:	4605      	mov	r5, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	4616      	mov	r6, r2
 80099be:	d505      	bpl.n	80099cc <__swrite+0x1e>
 80099c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c4:	2302      	movs	r3, #2
 80099c6:	2200      	movs	r2, #0
 80099c8:	f000 f868 	bl	8009a9c <_lseek_r>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	4632      	mov	r2, r6
 80099da:	463b      	mov	r3, r7
 80099dc:	4628      	mov	r0, r5
 80099de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	f000 b817 	b.w	8009a14 <_write_r>

080099e6 <__sseek>:
 80099e6:	b510      	push	{r4, lr}
 80099e8:	460c      	mov	r4, r1
 80099ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ee:	f000 f855 	bl	8009a9c <_lseek_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	bf15      	itete	ne
 80099f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a02:	81a3      	strheq	r3, [r4, #12]
 8009a04:	bf18      	it	ne
 8009a06:	81a3      	strhne	r3, [r4, #12]
 8009a08:	bd10      	pop	{r4, pc}

08009a0a <__sclose>:
 8009a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0e:	f000 b813 	b.w	8009a38 <_close_r>
	...

08009a14 <_write_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	; (8009a34 <_write_r+0x20>)
 8009a18:	4604      	mov	r4, r0
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	2200      	movs	r2, #0
 8009a20:	602a      	str	r2, [r5, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	f7f7 fed1 	bl	80017ca <_write>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_write_r+0x1e>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_write_r+0x1e>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	2000033c 	.word	0x2000033c

08009a38 <_close_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	; (8009a54 <_close_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7f7 fedd 	bl	8001802 <_close>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_close_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_close_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	2000033c 	.word	0x2000033c

08009a58 <_fstat_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	; (8009a78 <_fstat_r+0x20>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f7f7 fed8 	bl	800181a <_fstat>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d102      	bne.n	8009a74 <_fstat_r+0x1c>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b103      	cbz	r3, 8009a74 <_fstat_r+0x1c>
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	2000033c 	.word	0x2000033c

08009a7c <_isatty_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d06      	ldr	r5, [pc, #24]	; (8009a98 <_isatty_r+0x1c>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	f7f7 fed7 	bl	800183a <_isatty>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_isatty_r+0x1a>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_isatty_r+0x1a>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	2000033c 	.word	0x2000033c

08009a9c <_lseek_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4d07      	ldr	r5, [pc, #28]	; (8009abc <_lseek_r+0x20>)
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	602a      	str	r2, [r5, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f7f7 fed0 	bl	8001850 <_lseek>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_lseek_r+0x1e>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_lseek_r+0x1e>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	2000033c 	.word	0x2000033c

08009ac0 <_malloc_usable_size_r>:
 8009ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac4:	1f18      	subs	r0, r3, #4
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	bfbc      	itt	lt
 8009aca:	580b      	ldrlt	r3, [r1, r0]
 8009acc:	18c0      	addlt	r0, r0, r3
 8009ace:	4770      	bx	lr

08009ad0 <_read_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d07      	ldr	r5, [pc, #28]	; (8009af0 <_read_r+0x20>)
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	4608      	mov	r0, r1
 8009ad8:	4611      	mov	r1, r2
 8009ada:	2200      	movs	r2, #0
 8009adc:	602a      	str	r2, [r5, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f7f7 fe56 	bl	8001790 <_read>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_read_r+0x1e>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_read_r+0x1e>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	2000033c 	.word	0x2000033c

08009af4 <_init>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	bf00      	nop
 8009af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afa:	bc08      	pop	{r3}
 8009afc:	469e      	mov	lr, r3
 8009afe:	4770      	bx	lr

08009b00 <_fini>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	bf00      	nop
 8009b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b06:	bc08      	pop	{r3}
 8009b08:	469e      	mov	lr, r3
 8009b0a:	4770      	bx	lr
